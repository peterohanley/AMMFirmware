
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00002904  00002998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030b  0080033a  0080033a  00002bd2  2**0
                  ALLOC
  3 .noinit       00000004  00800645  00800645  00002bd2  2**0
                  ALLOC
  4 .stab         00002784  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000910  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000007d8  00000000  00000000  00005c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cda2  00000000  00000000  00006440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e23  00000000  00000000  000131e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000537d  00000000  00000000  00016005  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015ec  00000000  00000000  0001b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000047fc  00000000  00000000  0001c970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007ec8  00000000  00000000  0002116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  00029034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c2       	rjmp	.+1372   	; 0x55e <__ctors_end>
       2:	00 00       	nop
       4:	e6 c2       	rjmp	.+1484   	; 0x5d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c2       	rjmp	.+1480   	; 0x5d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c2       	rjmp	.+1476   	; 0x5d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c2       	rjmp	.+1472   	; 0x5d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c2       	rjmp	.+1468   	; 0x5d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c2       	rjmp	.+1464   	; 0x5d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c2       	rjmp	.+1460   	; 0x5d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c2       	rjmp	.+1456   	; 0x5d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c2       	rjmp	.+1452   	; 0x5d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_10>
      2c:	d2 c2       	rjmp	.+1444   	; 0x5d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d0 c2       	rjmp	.+1440   	; 0x5d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c2       	rjmp	.+1436   	; 0x5d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	cc c2       	rjmp	.+1432   	; 0x5d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ca c2       	rjmp	.+1428   	; 0x5d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c8 c2       	rjmp	.+1424   	; 0x5d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	c6 c2       	rjmp	.+1420   	; 0x5d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	c4 c2       	rjmp	.+1416   	; 0x5d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c2 c2       	rjmp	.+1412   	; 0x5d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c0 c2       	rjmp	.+1408   	; 0x5d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_21>
      58:	bc c2       	rjmp	.+1400   	; 0x5d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ba c2       	rjmp	.+1396   	; 0x5d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b8 c2       	rjmp	.+1392   	; 0x5d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c2       	rjmp	.+1388   	; 0x5d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c2       	rjmp	.+1384   	; 0x5d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c2       	rjmp	.+1380   	; 0x5d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c2       	rjmp	.+1376   	; 0x5d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c2       	rjmp	.+1372   	; 0x5d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c2       	rjmp	.+1368   	; 0x5d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c2       	rjmp	.+1364   	; 0x5d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c2       	rjmp	.+1360   	; 0x5d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c2       	rjmp	.+1356   	; 0x5d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	a4 c2       	rjmp	.+1352   	; 0x5d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a2 c2       	rjmp	.+1348   	; 0x5d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a0 c2       	rjmp	.+1344   	; 0x5d2 <__bad_interrupt>
      92:	00 00       	nop
      94:	9e c2       	rjmp	.+1340   	; 0x5d2 <__bad_interrupt>
      96:	00 00       	nop
      98:	9c c2       	rjmp	.+1336   	; 0x5d2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9a c2       	rjmp	.+1332   	; 0x5d2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	98 c2       	rjmp	.+1328   	; 0x5d2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	96 c2       	rjmp	.+1324   	; 0x5d2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	94 c2       	rjmp	.+1320   	; 0x5d2 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <pstr_ROC>:
      ac:	08 47 49 56 45 5f 52 4f 43 00                       .GIVE_ROC.

000000b6 <pstr_LIDOCANE>:
      b6:	0d 47 49 56 45 5f 4c 49 44 4f 43 41 4e 45 00        .GIVE_LIDOCANE.

000000c5 <pstr_PROPOFOL>:
      c5:	0d 47 49 56 45 5f 50 52 4f 50 4f 46 4f 4c 00        .GIVE_PROPOFOL.

000000d4 <pstr_ANTIBIOTICS>:
      d4:	10 47 49 56 45 5f 41 4e 54 49 42 49 4f 54 49 43     .GIVE_ANTIBIOTIC
      e4:	53 00                                               S.

000000e6 <pstr_KETAMINE>:
      e6:	0d 47 49 56 45 5f 4b 45 54 41 4d 49 4e 45 00        .GIVE_KETAMINE.

000000f5 <pstr_FENTANYL>:
      f5:	0d 47 49 56 45 5f 46 45 4e 54 41 4e 59 4c 00        .GIVE_FENTANYL.

00000104 <pstr_MORPHINE>:
     104:	0d 47 49 56 45 5f 4d 4f 52 50 48 49 4e 45 00        .GIVE_MORPHINE.

00000113 <pstr_ETOMIDATE>:
     113:	0e 47 49 56 45 5f 45 54 4f 4d 49 44 41 54 45 00     .GIVE_ETOMIDATE.

00000123 <heat_str>:
     123:	04 48 45 41 54 00                                   .HEAT.

00000129 <blip_str>:
     129:	04 42 4c 49 50 00                                   .BLIP.

0000012f <device_name_string>:
     12f:	09 65 73 6f 70 68 61 67 75 73 00                    .esophagus.

0000013a <iv_arm_msg>:
     13a:	0d 41 52 4d 5f 52 5f 49 56 5f 43 41 54 48 00        .ARM_R_IV_CATH.

00000149 <eschar_msg_5>:
     149:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 35 00     .ARM_L_ESCHAR_5.

00000159 <eschar_msg_4>:
     159:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 34 00     .ARM_L_ESCHAR_4.

00000169 <eschar_msg_3>:
     169:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 33 00     .ARM_L_ESCHAR_3.

00000179 <eschar_msg_2>:
     179:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 32 00     .ARM_L_ESCHAR_2.

00000189 <eschar_msg_1>:
     189:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 31 00     .ARM_L_ESCHAR_1.

00000199 <o2_msg_str>:
     199:	02 4f 32 00                                         .O2.

0000019d <hypervent_msg_str>:
     19d:	16 4d 41 53 4b 5f 48 59 50 45 52 56 45 4e 54 49     .MASK_HYPERVENTI
     1ad:	4c 41 54 45 5f 50 54 00                             LATE_PT.

000001b5 <mainstem_msg_str>:
     1b5:	1c 4d 41 49 4e 53 54 45 4d 5f 56 45 4e 54 49 4c     .MAINSTEM_VENTIL
     1c5:	41 54 49 4f 4e 5f 45 54 5f 54 55 42 45 00           ATION_ET_TUBE.

000001d3 <bvm_off_msg_str>:
     1d3:	07 42 56 4d 5f 4f 46 46 00                          .BVM_OFF.

000001dc <vent_msg_str>:
     1dc:	13 56 45 4e 54 49 4c 41 54 49 4f 4e 5f 45 54 5f     .VENTILATION_ET_
     1ec:	54 55 42 45 00                                      TUBE.

000001f1 <esophageal_msg_str>:
     1f1:	1e 45 53 4f 50 48 41 47 45 41 4c 5f 56 45 4e 54     .ESOPHAGEAL_VENT
     201:	49 4c 41 54 49 4f 4e 5f 45 54 5f 54 55 42 45 00     ILATION_ET_TUBE.

00000211 <bio_report_string>:
     211:	11 41 43 54 3d 31 38 73 2c 50 52 4f 58 3d 31 39     .ACT=18s,PROX=19
     221:	73 2c 00                                            s,.

00000224 <ProductString>:
     224:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
     234:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
     244:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

00000252 <ManufacturerString>:
     252:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     262:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000026c <LanguageString>:
     26c:	04 03 09 04                                         ....

00000270 <ConfigurationDescriptor>:
     270:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     280:	00 00 09 21 11 01 00 01 22 ca 01 07 05 81 03 08     ...!....".......
     290:	00 05                                               ..

00000292 <DeviceDescriptor>:
     292:	12 01 10 01 00 00 00 08 eb 03 40 20 01 00 01 02     ..........@ ....
     2a2:	00 01                                               ..

000002a4 <GenericReport>:
     2a4:	06 00 ff 09 01 a1 01 85 01 09 02 15 00 26 ff 00     .............&..
     2b4:	75 08 95 fe b1 02 85 02 09 02 15 00 26 ff 00 75     u...........&..u
     2c4:	08 95 ff b1 02 85 03 09 05 15 00 26 ff 00 75 08     ...........&..u.
     2d4:	95 06 81 00 85 04 09 06 15 00 26 ff 00 75 08 95     ..........&..u..
     2e4:	08 b1 02 85 05 09 07 15 00 26 ff 00 75 08 95 0c     .........&..u...
     2f4:	81 02 85 06 09 08 15 00 26 ff 00 75 08 95 10 b1     ........&..u....
     304:	02 85 07 09 09 15 00 26 ff 00 75 08 95 0d 81 02     .......&..u.....
     314:	85 ff 09 0a 15 00 26 ff 00 75 08 95 08 b1 02 85     ......&..u......
     324:	fe 09 0b 15 00 26 ff 00 75 08 95 08 b1 02 85 08     .....&..u.......
     334:	09 0c 15 00 26 ff 00 75 08 95 04 81 02 85 08 09     ....&..u........
     344:	0c 15 00 26 ff 00 75 08 95 04 91 02 85 09 09 0c     ...&..u.........
     354:	15 00 26 ff 00 75 08 95 04 81 02 85 09 09 0c 15     ..&..u..........
     364:	00 26 ff 00 75 08 95 04 91 02 85 0a 09 0c 15 00     .&..u...........
     374:	26 ff 00 75 08 95 04 81 02 85 0a 09 0c 15 00 26     &..u...........&
     384:	ff 00 75 08 95 04 91 02 85 0b 09 0c 15 00 26 ff     ..u...........&.
     394:	00 75 08 95 04 81 02 85 0b 09 0c 15 00 26 ff 00     .u...........&..
     3a4:	75 08 95 04 91 02 85 0c 09 0c 15 00 26 ff 00 75     u...........&..u
     3b4:	08 95 04 81 02 85 0c 09 0c 15 00 26 ff 00 75 08     ...........&..u.
     3c4:	95 04 91 02 85 0d 09 0c 15 00 26 ff 00 75 08 95     ..........&..u..
     3d4:	04 81 02 85 0d 09 0c 15 00 26 ff 00 75 08 95 04     .........&..u...
     3e4:	91 02 85 0e 09 0c 15 00 26 ff 00 75 08 95 04 81     ........&..u....
     3f4:	02 85 0e 09 0c 15 00 26 ff 00 75 08 95 04 91 02     .......&..u.....
     404:	85 0f 09 00 15 00 26 ff 00 75 08 95 04 b1 02 85     ......&..u......
     414:	10 09 0d 15 00 26 ff 00 75 08 95 40 81 02 85 11     .....&..u..@....
     424:	09 0d 15 00 26 ff 00 75 08 95 01 91 02 85 12 09     ....&..u........
     434:	0e 15 00 26 ff 00 75 08 95 ff 81 02 85 12 09 0e     ...&..u.........
     444:	15 00 26 ff 00 75 08 95 ff 91 02 85 13 09 0f 15     ..&..u..........
     454:	00 26 ff 00 75 08 95 ff 81 02 85 13 09 0f 15 00     .&..u...........
     464:	26 ff 00 75 08 95 ff 91 02 c0                       &..u......

0000046e <o2_str>:
     46e:	02 4f 32 00                                         .O2.

00000472 <temp_probe_str>:
     472:	0a 54 45 4d 50 5f 50 52 4f 42 45 00                 .TEMP_PROBE.

0000047e <pulse_ox_str>:
     47e:	08 50 55 4c 53 45 5f 4f 58 00                       .PULSE_OX.

00000488 <bp_cuff_str>:
     488:	07 42 50 5f 43 55 46 46 00                          .BP_CUFF.

00000491 <ecg_str>:
     491:	03 45 43 47 00                                      .ECG.

00000496 <fluids_str>:
     496:	06 46 4c 55 49 44 53 00                             .FLUIDS.

0000049e <roc_str>:
     49e:	03 52 4f 43 00                                      .ROC.

000004a3 <lidocane_str>:
     4a3:	08 4c 49 44 4f 43 41 4e 45 00                       .LIDOCANE.

000004ad <propofol_str>:
     4ad:	08 50 52 4f 50 4f 46 4f 4c 00                       .PROPOFOL.

000004b7 <antibiotics_str>:
     4b7:	0b 41 4e 54 49 42 49 4f 54 49 43 53 00              .ANTIBIOTICS.

000004c4 <ketamine_str>:
     4c4:	08 4b 45 54 41 4d 49 4e 45 00                       .KETAMINE.

000004ce <fentanyl_str>:
     4ce:	08 46 45 4e 54 41 4e 59 4c 00                       .FENTANYL.

000004d8 <morphine_str>:
     4d8:	08 4d 4f 52 50 48 49 4e 45 00                       .MORPHINE.

000004e2 <succs_str>:
     4e2:	05 53 55 43 43 53 00                                .SUCCS.

000004e9 <etomidate_str>:
     4e9:	09 45 54 4f 4d 49 44 41 54 45 00                    .ETOMIDATE.

000004f4 <vent_str>:
     4f4:	04 56 45 4e 54 00                                   .VENT.

000004fa <bvm_str>:
     4fa:	03 42 56 4d 00                                      .BVM.

000004ff <iv_connected_str>:
     4ff:	0d 41 52 4d 5f 52 5f 49 56 5f 43 41 54 48 00        .ARM_R_IV_CATH.

0000050e <pstr_rcv_ROC>:
     50e:	03 52 4f 43 00                                      .ROC.

00000513 <pstr_rcv_LIDOCANE>:
     513:	08 4c 49 44 4f 43 41 4e 45 00                       .LIDOCANE.

0000051d <pstr_rcv_PROPOFOL>:
     51d:	08 50 52 4f 50 4f 46 4f 4c 00                       .PROPOFOL.

00000527 <pstr_rcv_ANTIBIOTICS>:
     527:	0b 41 4e 54 49 42 49 4f 54 49 43 53 00              .ANTIBIOTICS.

00000534 <pstr_rcv_KETAMINE>:
     534:	08 4b 45 54 41 4d 49 4e 45 00                       .KETAMINE.

0000053e <pstr_rcv_FENTANYL>:
     53e:	08 46 45 4e 54 41 4e 59 4c 00                       .FENTANYL.

00000548 <pstr_rcv_MORPHINE>:
     548:	08 4d 4f 52 50 48 49 4e 45 00                       .MORPHINE.

00000552 <pstr_rcv_ETOMIDATE>:
     552:	09 45 54 4f 4d 49 44 41 54 45 00 00                 .ETOMIDATE..

0000055e <__ctors_end>:
     55e:	11 24       	eor	r1, r1
     560:	1f be       	out	0x3f, r1	; 63
     562:	cf ef       	ldi	r28, 0xFF	; 255
     564:	da e0       	ldi	r29, 0x0A	; 10
     566:	de bf       	out	0x3e, r29	; 62
     568:	cd bf       	out	0x3d, r28	; 61

0000056a <Bootloader_Jump_Check>:
/* the bootloader stuff */
uint32_t Boot_Key ATTR_NO_INIT;
void Bootloader_Jump_Check(void)
{
    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))
     56a:	04 b6       	in	r0, 0x34	; 52
     56c:	03 fe       	sbrs	r0, 3
     56e:	1b c0       	rjmp	.+54     	; 0x5a6 <__do_copy_data>
     570:	80 91 45 06 	lds	r24, 0x0645
     574:	90 91 46 06 	lds	r25, 0x0646
     578:	a0 91 47 06 	lds	r26, 0x0647
     57c:	b0 91 48 06 	lds	r27, 0x0648
     580:	8a 3c       	cpi	r24, 0xCA	; 202
     582:	2c ea       	ldi	r18, 0xAC	; 172
     584:	92 07       	cpc	r25, r18
     586:	22 e4       	ldi	r18, 0x42	; 66
     588:	a2 07       	cpc	r26, r18
     58a:	2c ed       	ldi	r18, 0xDC	; 220
     58c:	b2 07       	cpc	r27, r18
     58e:	59 f4       	brne	.+22     	; 0x5a6 <__do_copy_data>
    {
		//overwrite boot key so that if the code that's loaded used the same location and value it will not re-bootload.
		//MCUSR &= 0 ; //~(1 << WDRF);
        Boot_Key = 0;
     590:	10 92 45 06 	sts	0x0645, r1
     594:	10 92 46 06 	sts	0x0646, r1
     598:	10 92 47 06 	sts	0x0647, r1
     59c:	10 92 48 06 	sts	0x0648, r1
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     5a0:	e0 e0       	ldi	r30, 0x00	; 0
     5a2:	f8 e3       	ldi	r31, 0x38	; 56
     5a4:	09 95       	icall

000005a6 <__do_copy_data>:
     5a6:	13 e0       	ldi	r17, 0x03	; 3
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b1 e0       	ldi	r27, 0x01	; 1
     5ac:	e4 e0       	ldi	r30, 0x04	; 4
     5ae:	f9 e2       	ldi	r31, 0x29	; 41
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x10>
     5b2:	05 90       	lpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	aa 33       	cpi	r26, 0x3A	; 58
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0xc>

000005bc <__do_clear_bss>:
     5bc:	16 e0       	ldi	r17, 0x06	; 6
     5be:	aa e3       	ldi	r26, 0x3A	; 58
     5c0:	b3 e0       	ldi	r27, 0x03	; 3
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	a5 34       	cpi	r26, 0x45	; 69
     5c8:	b1 07       	cpc	r27, r17
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>
     5cc:	30 d1       	rcall	.+608    	; 0x82e <main>
     5ce:	0c 94 80 14 	jmp	0x2900	; 0x2900 <_exit>

000005d2 <__bad_interrupt>:
     5d2:	16 cd       	rjmp	.-1492   	; 0x0 <__vectors>

000005d4 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     5d4:	25 b1       	in	r18, 0x05	; 5
     5d6:	98 2f       	mov	r25, r24
     5d8:	91 70       	andi	r25, 0x01	; 1
     5da:	90 95       	com	r25
     5dc:	21 60       	ori	r18, 0x01	; 1
     5de:	92 23       	and	r25, r18
     5e0:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     5e2:	2b b1       	in	r18, 0x0b	; 11
     5e4:	98 2f       	mov	r25, r24
     5e6:	90 72       	andi	r25, 0x20	; 32
     5e8:	90 95       	com	r25
     5ea:	20 62       	ori	r18, 0x20	; 32
     5ec:	92 23       	and	r25, r18
     5ee:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     5f0:	98 b1       	in	r25, 0x08	; 8
     5f2:	80 78       	andi	r24, 0x80	; 128
     5f4:	9f 77       	andi	r25, 0x7F	; 127
     5f6:	89 2b       	or	r24, r25
     5f8:	88 b9       	out	0x08, r24	; 8
			}
     5fa:	08 95       	ret

000005fc <Jump_To_Bootloader>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     5fc:	80 91 e0 00 	lds	r24, 0x00E0
     600:	81 60       	ori	r24, 0x01	; 1
     602:	80 93 e0 00 	sts	0x00E0, r24
{
    // If USB is used, detach from the bus and reset it
    //USB_Disable();
	USB_Detach();
    // Disable all interrupts
    cli();
     606:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	9d e3       	ldi	r25, 0x3D	; 61
     60c:	a9 e4       	ldi	r26, 0x49	; 73
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	90 40       	sbci	r25, 0x00	; 0
     612:	a0 40       	sbci	r26, 0x00	; 0
     614:	e1 f7       	brne	.-8      	; 0x60e <Jump_To_Bootloader+0x12>
     616:	00 c0       	rjmp	.+0      	; 0x618 <Jump_To_Bootloader+0x1c>
     618:	00 00       	nop
    // Wait two seconds for the USB detachment to register on the host
    Delay_MS(1500);
    // Set the bootloader key to the magic value and force a reset
    Boot_Key = MAGIC_BOOT_KEY;
     61a:	8a ec       	ldi	r24, 0xCA	; 202
     61c:	9c ea       	ldi	r25, 0xAC	; 172
     61e:	a2 e4       	ldi	r26, 0x42	; 66
     620:	bc ed       	ldi	r27, 0xDC	; 220
     622:	80 93 45 06 	sts	0x0645, r24
     626:	90 93 46 06 	sts	0x0646, r25
     62a:	a0 93 47 06 	sts	0x0647, r26
     62e:	b0 93 48 06 	sts	0x0648, r27
    wdt_enable(WDTO_500MS);
     632:	2d e0       	ldi	r18, 0x0D	; 13
     634:	88 e1       	ldi	r24, 0x18	; 24
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	a8 95       	wdr
     63e:	80 93 60 00 	sts	0x0060, r24
     642:	0f be       	out	0x3f, r0	; 63
     644:	20 93 60 00 	sts	0x0060, r18
     648:	ff cf       	rjmp	.-2      	; 0x648 <Jump_To_Bootloader+0x4c>

0000064a <adc_read>:

uint16_t adc_values[12];

uint16_t adc_read(int pin) {
	uint8_t lo, hi;
	uint8_t pinlo = pin & 0x1f;
     64a:	98 2f       	mov	r25, r24
     64c:	9f 71       	andi	r25, 0x1F	; 31
	
	bool pinhi = pin & 0x20;
	if (pinhi) { //TODO optimize away the if
     64e:	85 ff       	sbrs	r24, 5
     650:	04 c0       	rjmp	.+8      	; 0x65a <adc_read+0x10>
		ADCSRB |= (1<<MUX5);
     652:	80 91 7b 00 	lds	r24, 0x007B
     656:	80 62       	ori	r24, 0x20	; 32
     658:	03 c0       	rjmp	.+6      	; 0x660 <adc_read+0x16>
	} else {
		ADCSRB &= ~(1<<MUX5);
     65a:	80 91 7b 00 	lds	r24, 0x007B
     65e:	8f 7d       	andi	r24, 0xDF	; 223
     660:	80 93 7b 00 	sts	0x007B, r24
	}
	
	//ADMUX &= 0xf8; //clear low pins
	//ADMUX |= pinlo;
	ADMUX = (ADMUX & 0xe0) | pinlo; //clear low pins
     664:	80 91 7c 00 	lds	r24, 0x007C
     668:	80 7e       	andi	r24, 0xE0	; 224
     66a:	89 2b       	or	r24, r25
     66c:	80 93 7c 00 	sts	0x007C, r24
	
	ADCSRA |= (1<<ADSC); //get an adc value
     670:	80 91 7a 00 	lds	r24, 0x007A
     674:	80 64       	ori	r24, 0x40	; 64
     676:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1<<ADSC)); //Wait for it to do the adc
     67a:	80 91 7a 00 	lds	r24, 0x007A
     67e:	86 fd       	sbrc	r24, 6
     680:	fc cf       	rjmp	.-8      	; 0x67a <adc_read+0x30>
	lo = ADCL;
     682:	80 91 78 00 	lds	r24, 0x0078
	hi = ADCH;
     686:	90 91 79 00 	lds	r25, 0x0079
	return (hi << 8) | lo;
     68a:	39 2f       	mov	r19, r25
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	82 2b       	or	r24, r18
     692:	93 2b       	or	r25, r19
}
     694:	08 95       	ret

00000696 <adc_task>:

void adc_task(void) {
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
	int i;
	for (i = 0; i < 9; i++) {
     69e:	00 e9       	ldi	r16, 0x90	; 144
     6a0:	15 e0       	ldi	r17, 0x05	; 5
     6a2:	c0 e0       	ldi	r28, 0x00	; 0
     6a4:	d0 e0       	ldi	r29, 0x00	; 0
		adc_values[i] = adc_read(i);
     6a6:	ce 01       	movw	r24, r28
     6a8:	d0 df       	rcall	.-96     	; 0x64a <adc_read>
     6aa:	f8 01       	movw	r30, r16
     6ac:	81 93       	st	Z+, r24
     6ae:	91 93       	st	Z+, r25
     6b0:	8f 01       	movw	r16, r30
     6b2:	21 96       	adiw	r28, 0x01	; 1
	return (hi << 8) | lo;
}

void adc_task(void) {
	int i;
	for (i = 0; i < 9; i++) {
     6b4:	c9 30       	cpi	r28, 0x09	; 9
     6b6:	d1 05       	cpc	r29, r1
     6b8:	b1 f7       	brne	.-20     	; 0x6a6 <adc_task+0x10>
     6ba:	df 91       	pop	r29
		adc_values[i] = adc_read(i);
	}
}
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <lung_module_init>:
     6c4:	38 d6       	rcall	.+3184   	; 0x1336 <millis>
//workaround
uint8_t o2_msg_waiting;
DEFINE_PSTRING(o2_msg_str,"O2");

void lung_module_init(void) {
	gas_pressure_learning_started = millis();
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	80 93 79 05 	sts	0x0579, r24
     6ce:	90 93 7a 05 	sts	0x057A, r25
     6d2:	a0 93 7b 05 	sts	0x057B, r26
     6d6:	b0 93 7c 05 	sts	0x057C, r27
     6da:	08 95       	ret

000006dc <lung_module_task>:
}
     6dc:	2c d6       	rcall	.+3160   	; 0x1336 <millis>

void lung_module_task(void)
{

	ms_time_t now = millis();
     6de:	ab 01       	movw	r20, r22
     6e0:	bc 01       	movw	r22, r24
     6e2:	80 91 6a 05 	lds	r24, 0x056A
	//learn for a while
	if (!gas_pressure_learned && (now 
     6e6:	88 23       	and	r24, r24
     6e8:	e9 f4       	brne	.+58     	; 0x724 <lung_module_task+0x48>
     6ea:	80 91 79 05 	lds	r24, 0x0579
		>= (gas_pressure_learning_started + GAS_PRESSURE_LEARN_TIME_MS))) {
     6ee:	90 91 7a 05 	lds	r25, 0x057A
     6f2:	a0 91 7b 05 	lds	r26, 0x057B
     6f6:	b0 91 7c 05 	lds	r27, 0x057C
     6fa:	84 52       	subi	r24, 0x24	; 36
     6fc:	9a 4f       	sbci	r25, 0xFA	; 250
     6fe:	af 4f       	sbci	r26, 0xFF	; 255
     700:	bf 4f       	sbci	r27, 0xFF	; 255
     702:	48 17       	cp	r20, r24
void lung_module_task(void)
{

	ms_time_t now = millis();
	//learn for a while
	if (!gas_pressure_learned && (now 
     704:	59 07       	cpc	r21, r25
     706:	6a 07       	cpc	r22, r26
     708:	7b 07       	cpc	r23, r27
     70a:	60 f0       	brcs	.+24     	; 0x724 <lung_module_task+0x48>
     70c:	81 e0       	ldi	r24, 0x01	; 1
		>= (gas_pressure_learning_started + GAS_PRESSURE_LEARN_TIME_MS))) {
		gas_pressure_learned = 1;
     70e:	80 93 6a 05 	sts	0x056A, r24
     712:	80 91 9e 05 	lds	r24, 0x059E
		gas_pressure_threshold	= adc_values[stomach_adc_pin] + 5;
     716:	90 91 9f 05 	lds	r25, 0x059F
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	90 93 09 01 	sts	0x0109, r25
     720:	80 93 08 01 	sts	0x0108, r24
     724:	80 91 6a 05 	lds	r24, 0x056A
	}
	bool eso_press = gas_pressure_learned ?
		  adc_values[stomach_adc_pin] >= gas_pressure_threshold
		: 0;
     728:	88 23       	and	r24, r24
     72a:	61 f0       	breq	.+24     	; 0x744 <lung_module_task+0x68>
     72c:	e1 e0       	ldi	r30, 0x01	; 1
     72e:	20 91 9e 05 	lds	r18, 0x059E
     732:	30 91 9f 05 	lds	r19, 0x059F
     736:	80 91 08 01 	lds	r24, 0x0108
     73a:	90 91 09 01 	lds	r25, 0x0109
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	08 f4       	brcc	.+2      	; 0x746 <lung_module_task+0x6a>
     744:	e0 e0       	ldi	r30, 0x00	; 0
     746:	80 91 4e 05 	lds	r24, 0x054E
	if (!bvm_sitch) {
     74a:	88 23       	and	r24, r24
     74c:	19 f4       	brne	.+6      	; 0x754 <lung_module_task+0x78>
     74e:	10 92 73 05 	sts	0x0573, r1
		eso_st = 0;
     752:	08 95       	ret
     754:	80 91 73 05 	lds	r24, 0x0573
     758:	ee 23       	and	r30, r30
	} else {
		if (eso_press) {
     75a:	39 f0       	breq	.+14     	; 0x76a <lung_module_task+0x8e>
     75c:	82 30       	cpi	r24, 0x02	; 2
			if (eso_st == 0 || eso_st == 1) {
     75e:	a8 f5       	brcc	.+106    	; 0x7ca <lung_module_task+0xee>
     760:	81 e0       	ldi	r24, 0x01	; 1
				esophageal_msg_waiting = 1;
     762:	80 93 4d 04 	sts	0x044D, r24
     766:	83 e0       	ldi	r24, 0x03	; 3
				eso_st = 3;
     768:	12 c0       	rjmp	.+36     	; 0x78e <lung_module_task+0xb2>
     76a:	83 30       	cpi	r24, 0x03	; 3
			}
		} else {
			if (eso_st == 3) {
     76c:	69 f4       	brne	.+26     	; 0x788 <lung_module_task+0xac>
     76e:	e3 d5       	rcall	.+3014   	; 0x1336 <millis>
				eso_flow_stop_time = millis();
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	80 93 6b 05 	sts	0x056B, r24
     778:	90 93 6c 05 	sts	0x056C, r25
     77c:	a0 93 6d 05 	sts	0x056D, r26
     780:	b0 93 6e 05 	sts	0x056E, r27
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	03 c0       	rjmp	.+6      	; 0x78e <lung_module_task+0xb2>
				eso_st = 2;
     788:	88 23       	and	r24, r24
     78a:	21 f4       	brne	.+8      	; 0x794 <lung_module_task+0xb8>
			} else if (eso_st == 0) {
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 73 05 	sts	0x0573, r24
				eso_st = 1;
     792:	08 95       	ret
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	c9 f4       	brne	.+50     	; 0x7ca <lung_module_task+0xee>
			} else if (eso_st == 2) {
     798:	80 91 6b 05 	lds	r24, 0x056B
				if (now - eso_flow_stop_time > BVM_OFF_WAIT_TIME_MS) {
     79c:	90 91 6c 05 	lds	r25, 0x056C
     7a0:	a0 91 6d 05 	lds	r26, 0x056D
     7a4:	b0 91 6e 05 	lds	r27, 0x056E
     7a8:	48 1b       	sub	r20, r24
     7aa:	59 0b       	sbc	r21, r25
     7ac:	6a 0b       	sbc	r22, r26
     7ae:	7b 0b       	sbc	r23, r27
     7b0:	49 38       	cpi	r20, 0x89	; 137
     7b2:	83 e1       	ldi	r24, 0x13	; 19
     7b4:	58 07       	cpc	r21, r24
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	68 07       	cpc	r22, r24
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	78 07       	cpc	r23, r24
     7be:	28 f0       	brcs	.+10     	; 0x7ca <lung_module_task+0xee>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 61 05 	sts	0x0561, r24
					bvm_off_msg_waiting = 1;
     7c6:	10 92 4e 05 	sts	0x054E, r1
					bvm_sitch = 0;
     7ca:	08 95       	ret

000007cc <SetupHardware>:
     7cc:	84 b7       	in	r24, 0x34	; 52
     7ce:	87 7f       	andi	r24, 0xF7	; 247
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     7d0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     7d2:	88 e1       	ldi	r24, 0x18	; 24
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	80 93 60 00 	sts	0x0060, r24
     7dc:	10 92 60 00 	sts	0x0060, r1
     7e0:	0f be       	out	0x3f, r0	; 63
	/* disable digital input buffer */
	DIDR1 &= ~(1<<AIN0D);
	DIDR0 |= 0xff;
#endif
	/* enable and configure ADC */
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); /* sets clock division */ 
     7e2:	ea e7       	ldi	r30, 0x7A	; 122
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	87 60       	ori	r24, 0x07	; 7
     7ea:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); /*enable*/
     7ec:	80 81       	ld	r24, Z
     7ee:	80 68       	ori	r24, 0x80	; 128
     7f0:	80 83       	st	Z, r24
	/* to select channel, write to ADMUX */
	//ADCSRB |= MUX5;
	//ADMUX = 2; /* ADC channel 10? */

	ADMUX = (1<<REFS0) /*| (1<<REFS1)*/; /* set ref, arduino uses 1<<6 */
     7f2:	80 e4       	ldi	r24, 0x40	; 64
     7f4:	80 93 7c 00 	sts	0x007C, r24
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 e8       	ldi	r24, 0x80	; 128
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	80 93 61 00 	sts	0x0061, r24
     804:	90 93 61 00 	sts	0x0061, r25
     808:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
	ADCSRA |= (1<<ADSC); /* do the longer first conversion */
     80a:	80 81       	ld	r24, Z
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 83       	st	Z, r24
	
	/* set pin 7 (on schematic: D7 = PE6) as input */
	/* all pins are input by default */
	/* enable pullup resistor */
	PORTE |= (1<<PE6);
     810:	76 9a       	sbi	0x0e, 6	; 14
	
	/* enable pins as output */
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB3);
     812:	84 b1       	in	r24, 0x04	; 4
     814:	8e 60       	ori	r24, 0x0E	; 14
     816:	84 b9       	out	0x04, r24	; 4
	//DDRC |= (1<<PC6) | (1<<PC7); 
	
	//from e arm, ove later
	DDRB |= (1<<PB6) | (1<<PB7);
     818:	84 b1       	in	r24, 0x04	; 4
     81a:	80 6c       	ori	r24, 0xC0	; 192
     81c:	84 b9       	out	0x04, r24	; 4

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     81e:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     820:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     822:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     824:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     826:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     828:	47 98       	cbi	0x08, 7	; 8
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     82a:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <USB_Init>

0000082e <main>:
}
     82e:	ce df       	rcall	.-100    	; 0x7cc <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     830:	4f d5       	rcall	.+2718   	; 0x12d0 <setup_timer>
	setup_timer();
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	cf de       	rcall	.-610    	; 0x5d4 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     836:	78 94       	sei
     838:	45 df       	rcall	.-374    	; 0x6c4 <lung_module_init>
     83a:	84 ea       	ldi	r24, 0xA4	; 164
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     83c:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();
	//setup_airwaysensor();
	lung_module_init();
     83e:	0e 94 3b 12 	call	0x2476	; 0x2476 <HID_Device_USBTask>

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
     842:	0e 94 cc 10 	call	0x2198	; 0x2198 <USB_USBTask>
     846:	27 df       	rcall	.-434    	; 0x696 <adc_task>
     848:	49 df       	rcall	.-366    	; 0x6dc <lung_module_task>
		USB_USBTask();
     84a:	f7 cf       	rjmp	.-18     	; 0x83a <main+0xc>

0000084c <EVENT_USB_Device_Connect>:
     84c:	80 ea       	ldi	r24, 0xA0	; 160
		adc_task();
     84e:	c2 ce       	rjmp	.-636    	; 0x5d4 <LEDs_SetAllLEDs>

00000850 <EVENT_USB_Device_Disconnect>:
     850:	81 e0       	ldi	r24, 0x01	; 1
		//airwaysensor_task(adc_values, sensor_varnces, sensor_evt_thresh, &event_buffer);
		lung_module_task();
     852:	c0 ce       	rjmp	.-640    	; 0x5d4 <LEDs_SetAllLEDs>

00000854 <EVENT_USB_Device_ConfigurationChanged>:
     854:	84 ea       	ldi	r24, 0xA4	; 164
     856:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     858:	0e 94 22 12 	call	0x2444	; 0x2444 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     85c:	90 91 e2 00 	lds	r25, 0x00E2
     860:	94 60       	ori	r25, 0x04	; 4
     862:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     866:	88 23       	and	r24, r24
     868:	11 f0       	breq	.+4      	; 0x86e <EVENT_USB_Device_ConfigurationChanged+0x1a>
     86a:	80 e2       	ldi	r24, 0x20	; 32
     86c:	01 c0       	rjmp	.+2      	; 0x870 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     86e:	81 e8       	ldi	r24, 0x81	; 129
     870:	b1 ce       	rjmp	.-670    	; 0x5d4 <LEDs_SetAllLEDs>

00000872 <EVENT_USB_Device_ControlRequest>:
     872:	84 ea       	ldi	r24, 0xA4	; 164
}
     874:	91 e0       	ldi	r25, 0x01	; 1

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     876:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <HID_Device_ProcessControlRequest>

0000087a <EVENT_USB_Device_StartOfFrame>:
}
     87a:	80 91 b2 01 	lds	r24, 0x01B2
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     87e:	90 91 b3 01 	lds	r25, 0x01B3
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	29 f0       	breq	.+10     	; 0x890 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	90 93 b3 01 	sts	0x01B3, r25
     88c:	80 93 b2 01 	sts	0x01B2, r24
     890:	08 95       	ret

00000892 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     892:	8f 92       	push	r8
     894:	9f 92       	push	r9
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2b 97       	sbiw	r28, 0x0b	; 11
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	5b 01       	movw	r10, r22
     8bc:	79 01       	movw	r14, r18
     8be:	48 01       	movw	r8, r16
	//uint16_t cb_strlen;
	//uint16_t strlen_rem;
	TIME_t ms;
	UNUSED(HIDInterfaceInfo);
	const event_t* nextevt;
	switch (ReportType) {
     8c0:	44 23       	and	r20, r20
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <CALLBACK_HID_Device_CreateHIDReport+0x34>
     8c4:	5e c0       	rjmp	.+188    	; 0x982 <CALLBACK_HID_Device_CreateHIDReport+0xf0>
     8c6:	42 30       	cpi	r20, 0x02	; 2
     8c8:	09 f0       	breq	.+2      	; 0x8cc <CALLBACK_HID_Device_CreateHIDReport+0x3a>
     8ca:	82 c3       	rjmp	.+1796   	; 0xfd0 <__stack+0x4d1>
				
				*ReportSize = STRING_DESC_REPORT_HACK_SIZE;
				stm_state = STRINGSTM_STATE_BASE;
				return true;
			} else */
			if (*ReportID == TIMESTAMP_OFFSET_FR_ID) {
     8cc:	db 01       	movw	r26, r22
     8ce:	8c 91       	ld	r24, X
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
				//return the current timestamp
				ms = host_millis();
     8d4:	3f d5       	rcall	.+2686   	; 0x1354 <host_millis>
     8d6:	87 01       	movw	r16, r14
				time_to_wire(ms, Data);
     8d8:	26 d6       	rcall	.+3148   	; 0x1526 <time_to_wire>
     8da:	88 e0       	ldi	r24, 0x08	; 8
     8dc:	90 e0       	ldi	r25, 0x00	; 0
				*ReportSize = TIMESTAMP_FR_SIZE;
     8de:	18 c0       	rjmp	.+48     	; 0x910 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
     8e0:	86 30       	cpi	r24, 0x06	; 6
     8e2:	d9 f4       	brne	.+54     	; 0x91a <CALLBACK_HID_Device_CreateHIDReport+0x88>
				return true;
			} else if (*ReportID == SET_SENS_THRESH_REPORT_ID) {
     8e4:	54 e9       	ldi	r21, 0x94	; 148
     8e6:	c5 2e       	mov	r12, r21
     8e8:	51 e0       	ldi	r21, 0x01	; 1
     8ea:	d5 2e       	mov	r13, r21
     8ec:	89 01       	movw	r16, r18
     8ee:	d6 01       	movw	r26, r12
     8f0:	6d 91       	ld	r22, X+
				for (int i = 0; i < 4; i++) {
					float_to_wire(sensor_evt_thresh[i], Data + 4*i);
     8f2:	7d 91       	ld	r23, X+
     8f4:	8d 91       	ld	r24, X+
     8f6:	9d 91       	ld	r25, X+
     8f8:	6d 01       	movw	r12, r26
     8fa:	a8 01       	movw	r20, r16
     8fc:	a9 d4       	rcall	.+2386   	; 0x1250 <float_to_wire>
     8fe:	0c 5f       	subi	r16, 0xFC	; 252
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	b4 ea       	ldi	r27, 0xA4	; 164
     904:	cb 16       	cp	r12, r27
     906:	b1 e0       	ldi	r27, 0x01	; 1
				ms = host_millis();
				time_to_wire(ms, Data);
				*ReportSize = TIMESTAMP_FR_SIZE;
				return true;
			} else if (*ReportID == SET_SENS_THRESH_REPORT_ID) {
				for (int i = 0; i < 4; i++) {
     908:	db 06       	cpc	r13, r27
     90a:	89 f7       	brne	.-30     	; 0x8ee <CALLBACK_HID_Device_CreateHIDReport+0x5c>
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	f4 01       	movw	r30, r8
					float_to_wire(sensor_evt_thresh[i], Data + 4*i);
				}
				*ReportSize = SET_SENS_THRESH_REPORT_SIZE;
     912:	91 83       	std	Z+1, r25	; 0x01
     914:	80 83       	st	Z, r24
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	5c c3       	rjmp	.+1720   	; 0xfd2 <__stack+0x4d3>
     91a:	81 30       	cpi	r24, 0x01	; 1
				return true;
     91c:	a9 f4       	brne	.+42     	; 0x948 <CALLBACK_HID_Device_CreateHIDReport+0xb6>
     91e:	d9 01       	movw	r26, r18
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
     920:	81 e1       	ldi	r24, 0x11	; 17
     922:	8d 93       	st	X+, r24
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	01 96       	adiw	r24, 0x01	; 1
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     92a:	fc 01       	movw	r30, r24
     92c:	ef 5e       	subi	r30, 0xEF	; 239
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
					Data[1+i] = pgm_read_byte(bio_report_string.content + i);
     92e:	fd 4f       	sbci	r31, 0xFD	; 253
     930:	e4 91       	lpm	r30, Z
     932:	ed 93       	st	X+, r30
     934:	81 31       	cpi	r24, 0x11	; 17
     936:	91 05       	cpc	r25, r1
     938:	b9 f7       	brne	.-18     	; 0x928 <CALLBACK_HID_Device_CreateHIDReport+0x96>
				return true;
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
     93a:	8e ef       	ldi	r24, 0xFE	; 254
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	d4 01       	movw	r26, r8
					Data[1+i] = pgm_read_byte(bio_report_string.content + i);
				}
				*ReportSize = REPORT_MAP_STRING_SIZE;
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	9c 93       	st	X, r25
     944:	8e 93       	st	-X, r24
     946:	e7 cf       	rjmp	.-50     	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	89 f4       	brne	.+34     	; 0x96e <CALLBACK_HID_Device_CreateHIDReport+0xdc>
     94c:	d9 01       	movw	r26, r18
				return true;
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
     94e:	89 e0       	ldi	r24, 0x09	; 9
     950:	8d 93       	st	X+, r24
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	01 96       	adiw	r24, 0x01	; 1
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     958:	fc 01       	movw	r30, r24
     95a:	e1 5d       	subi	r30, 0xD1	; 209
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
					Data[1+i] = pgm_read_byte(device_name_string.content + i);
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	e4 91       	lpm	r30, Z
     960:	ed 93       	st	X+, r30
     962:	89 30       	cpi	r24, 0x09	; 9
     964:	91 05       	cpc	r25, r1
     966:	b9 f7       	brne	.-18     	; 0x956 <CALLBACK_HID_Device_CreateHIDReport+0xc4>
				return true;
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	d1 cf       	rjmp	.-94     	; 0x910 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
					Data[1+i] = pgm_read_byte(device_name_string.content + i);
				}
				*ReportSize = DEVICE_NAME_REPORT_SIZE;
     96e:	8f 30       	cpi	r24, 0x0F	; 15
     970:	09 f0       	breq	.+2      	; 0x974 <CALLBACK_HID_Device_CreateHIDReport+0xe2>
     972:	2e c3       	rjmp	.+1628   	; 0xfd0 <__stack+0x4d1>
				return true;
			} else if (*ReportID == NO_DATA_REPORT_ID) {
     974:	80 91 72 05 	lds	r24, 0x0572
     978:	d9 01       	movw	r26, r18
				Data[0] = lung_st;
     97a:	8c 93       	st	X, r24
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	c7 cf       	rjmp	.-114    	; 0x910 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
				*ReportSize = NO_DATA_REPORT_SIZE;
     982:	db 01       	movw	r26, r22
     984:	0c 91       	ld	r16, X
     986:	07 30       	cpi	r16, 0x07	; 7
		However, every report id must also have a clause for if it is specicifically requested. 
		*/
		//TODO use a table of functions that might set the report, call each in turn
		//this will allow better operation with multiple reports, and allow each module's variables to be encapsulated in their files
			
			if ((*ReportID == GET_SENSOR_EVENT_REPORT_ID) /*(*ReportID == 0)*/) {
     988:	a1 f4       	brne	.+40     	; 0x9b2 <CALLBACK_HID_Device_CreateHIDReport+0x120>
     98a:	80 91 10 01 	lds	r24, 0x0110
     98e:	90 91 11 01 	lds	r25, 0x0111
				//FIXME duplicated code here. Not sure how to handle this duplication as this code must be on the control path when this specific report is requested.
				if (event_buffer.occupancy) { // nextevt != NULL) {
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	09 f4       	brne	.+2      	; 0x998 <CALLBACK_HID_Device_CreateHIDReport+0x106>
     996:	1c c3       	rjmp	.+1592   	; 0xfd0 <__stack+0x4d1>
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	07 d4       	rcall	.+2062   	; 0x11ac <deq_event>
					
					nextevt = deq_event(&event_buffer);
     99e:	b7 01       	movw	r22, r14
     9a0:	33 d4       	rcall	.+2150   	; 0x1208 <event_to_wire>
     9a2:	8d e0       	ldi	r24, 0x0D	; 13
     9a4:	90 e0       	ldi	r25, 0x00	; 0
					event_to_wire(nextevt, Data);
     9a6:	f4 01       	movw	r30, r8
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
					*ReportSize = GET_SENSOR_EVENT_REPORT_SIZE;
     9ac:	d5 01       	movw	r26, r10
     9ae:	0c 93       	st	X, r16
     9b0:	b2 cf       	rjmp	.-156    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     9b2:	03 30       	cpi	r16, 0x03	; 3
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <CALLBACK_HID_Device_CreateHIDReport+0x126>
					*ReportID = GET_SENSOR_EVENT_REPORT_ID;
     9b6:	3f c0       	rjmp	.+126    	; 0xa36 <CALLBACK_HID_Device_CreateHIDReport+0x1a4>
     9b8:	fe 01       	movw	r30, r28
     9ba:	34 96       	adiw	r30, 0x04	; 4
					return true;
				} else {
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b1 e0       	ldi	r27, 0x01	; 1
     9c0:	88 e0       	ldi	r24, 0x08	; 8
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
     9c2:	0d 90       	ld	r0, X+
     9c4:	01 92       	st	Z+, r0
     9c6:	81 50       	subi	r24, 0x01	; 1
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <CALLBACK_HID_Device_CreateHIDReport+0x130>
     9ca:	ce 01       	movw	r24, r28
     9cc:	04 96       	adiw	r24, 0x04	; 4
     9ce:	b7 01       	movw	r22, r14
     9d0:	9e 01       	movw	r18, r28
     9d2:	24 5f       	subi	r18, 0xF4	; 244
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	dc 01       	movw	r26, r24
     9d8:	ed 91       	ld	r30, X+
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     9da:	fd 91       	ld	r31, X+
     9dc:	cd 01       	movw	r24, r26
     9de:	ee 0f       	add	r30, r30
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e0 57       	subi	r30, 0x70	; 112
     9e4:	fa 4f       	sbci	r31, 0xFA	; 250
     9e6:	41 81       	ldd	r20, Z+1	; 0x01
     9e8:	db 01       	movw	r26, r22
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	4c 93       	st	X, r20
     9ee:	11 97       	sbiw	r26, 0x01	; 1
     9f0:	40 81       	ld	r20, Z
     9f2:	4c 93       	st	X, r20
     9f4:	6e 5f       	subi	r22, 0xFE	; 254
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	82 17       	cp	r24, r18
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
     9fa:	93 07       	cpc	r25, r19
     9fc:	61 f7       	brne	.-40     	; 0x9d6 <CALLBACK_HID_Device_CreateHIDReport+0x144>
     9fe:	80 e5       	ldi	r24, 0x50	; 80
     a00:	c8 2e       	mov	r12, r24
				} else {
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
     a02:	85 e0       	ldi	r24, 0x05	; 5
     a04:	d8 2e       	mov	r13, r24
     a06:	87 01       	movw	r16, r14
     a08:	08 5f       	subi	r16, 0xF8	; 248
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	f6 01       	movw	r30, r12
     a0e:	61 91       	ld	r22, Z+
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     a10:	71 91       	ld	r23, Z+
     a12:	81 91       	ld	r24, Z+
     a14:	91 91       	ld	r25, Z+
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
				}
				for (int i = 0; i < 4; i ++) {
					float_to_wire(sensor_varnces[i],Data+8+4*i);
     a16:	6f 01       	movw	r12, r30
     a18:	a8 01       	movw	r20, r16
     a1a:	1a d4       	rcall	.+2100   	; 0x1250 <float_to_wire>
     a1c:	0c 5f       	subi	r16, 0xFC	; 252
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	f0 e6       	ldi	r31, 0x60	; 96
     a22:	cf 16       	cp	r12, r31
     a24:	f5 e0       	ldi	r31, 0x05	; 5
     a26:	df 06       	cpc	r13, r31
     a28:	89 f7       	brne	.-30     	; 0xa0c <CALLBACK_HID_Device_CreateHIDReport+0x17a>
     a2a:	83 e0       	ldi	r24, 0x03	; 3
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
				}
				for (int i = 0; i < 4; i ++) {
     a2c:	d5 01       	movw	r26, r10
     a2e:	8c 93       	st	X, r24
     a30:	88 e1       	ldi	r24, 0x18	; 24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	6d cf       	rjmp	.-294    	; 0x910 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
					float_to_wire(sensor_varnces[i],Data+8+4*i);
				}
				*ReportID = 3;
     a36:	00 23       	and	r16, r16
     a38:	09 f0       	breq	.+2      	; 0xa3c <CALLBACK_HID_Device_CreateHIDReport+0x1aa>
     a3a:	ca c2       	rjmp	.+1428   	; 0xfd0 <__stack+0x4d1>
				*ReportSize = 24;
     a3c:	80 91 65 05 	lds	r24, 0x0565
     a40:	88 23       	and	r24, r24
				return true;
			} else  if (*ReportID == 0) {
     a42:	09 f4       	brne	.+2      	; 0xa46 <CALLBACK_HID_Device_CreateHIDReport+0x1b4>
     a44:	3a c0       	rjmp	.+116    	; 0xaba <CALLBACK_HID_Device_CreateHIDReport+0x228>
     a46:	e0 91 e2 02 	lds	r30, 0x02E2
				
				if (rfid_usable_to_send) {
     a4a:	f0 91 e3 02 	lds	r31, 0x02E3
     a4e:	80 81       	ld	r24, Z
     a50:	84 34       	cpi	r24, 0x44	; 68
					char *msgbuf;
					msgbuf = *usable_message;
     a52:	09 f0       	breq	.+2      	; 0xa56 <CALLBACK_HID_Device_CreateHIDReport+0x1c4>
     a54:	bd c2       	rjmp	.+1402   	; 0xfd0 <__stack+0x4d1>
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	86 31       	cpi	r24, 0x16	; 22
					if (msgbuf[0] == 0x44 && msgbuf[1] == 0x16) {
     a5a:	09 f0       	breq	.+2      	; 0xa5e <CALLBACK_HID_Device_CreateHIDReport+0x1cc>
     a5c:	b9 c2       	rjmp	.+1394   	; 0xfd0 <__stack+0x4d1>
     a5e:	1b 82       	std	Y+3, r1	; 0x03
     a60:	1a 82       	std	Y+2, r1	; 0x02
     a62:	cf 01       	movw	r24, r30
     a64:	0a 96       	adiw	r24, 0x0a	; 10
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
						unsigned char* tagstart = (unsigned char*) msgbuf+10;
						unsigned char pstr_len;
						const char* pstr_msg = NULL;
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	ae 01       	movw	r20, r28
						
						if (classify_tag(tagstart, &pstr_len, &pstr_msg)) {
     a6e:	4e 5f       	subi	r20, 0xFE	; 254
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	bf d5       	rcall	.+2942   	; 0x15f2 <classify_tag>
     a74:	88 23       	and	r24, r24
     a76:	09 f4       	brne	.+2      	; 0xa7a <CALLBACK_HID_Device_CreateHIDReport+0x1e8>
     a78:	ab c2       	rjmp	.+1366   	; 0xfd0 <__stack+0x4d1>
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	9b 81       	ldd	r25, Y+3	; 0x03
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	09 f4       	brne	.+2      	; 0xa84 <CALLBACK_HID_Device_CreateHIDReport+0x1f2>
     a82:	a6 c2       	rjmp	.+1356   	; 0xfd0 <__stack+0x4d1>
     a84:	1d d6       	rcall	.+3130   	; 0x16c0 <rfid_enable_buzzer>
     a86:	99 81       	ldd	r25, Y+1	; 0x01
							if (pstr_msg == NULL) {
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	2b 81       	ldd	r18, Y+3	; 0x03
     a8c:	d7 01       	movw	r26, r14
     a8e:	9d 93       	st	X+, r25
     a90:	e8 2f       	mov	r30, r24
								//Recognized, but sent recently. take no action.
								return false;
							} else {
								rfid_enable_buzzer();
     a92:	f2 2f       	mov	r31, r18
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <CALLBACK_HID_Device_CreateHIDReport+0x20a>
								SEND_PROX_UGLY_HACK(pstr_len,pstr_msg);
     a96:	24 91       	lpm	r18, Z
     a98:	2d 93       	st	X+, r18
     a9a:	31 96       	adiw	r30, 0x01	; 1
     a9c:	2e 2f       	mov	r18, r30
     a9e:	28 1b       	sub	r18, r24
     aa0:	29 17       	cp	r18, r25
     aa2:	c8 f3       	brcs	.-14     	; 0xa96 <CALLBACK_HID_Device_CreateHIDReport+0x204>
     aa4:	83 e1       	ldi	r24, 0x13	; 19
     aa6:	d5 01       	movw	r26, r10
     aa8:	8c 93       	st	X, r24
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	f4 01       	movw	r30, r8
     ab0:	91 83       	std	Z+1, r25	; 0x01
     ab2:	80 83       	st	Z, r24
     ab4:	10 92 65 05 	sts	0x0565, r1
     ab8:	2e cf       	rjmp	.-420    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     aba:	80 91 4d 04 	lds	r24, 0x044D
     abe:	88 23       	and	r24, r24
     ac0:	c9 f0       	breq	.+50     	; 0xaf4 <CALLBACK_HID_Device_CreateHIDReport+0x262>
     ac2:	d9 01       	movw	r26, r18
								rfid_usable_to_send = 0;
     ac4:	8e e1       	ldi	r24, 0x1E	; 30
     ac6:	8d 93       	st	X+, r24
     ac8:	80 e0       	ldi	r24, 0x00	; 0
					*ReportSize = BIO_EVENT_REPORT_SIZE;
					prox2act_msg_waiting = 0;
					return true;
				}
#endif
				else if (esophageal_msg_waiting) {
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	fc 01       	movw	r30, r24
     ad0:	ef 50       	subi	r30, 0x0F	; 15
					SEND_ACT(esophageal_msg_str);
     ad2:	fe 4f       	sbci	r31, 0xFE	; 254
     ad4:	e4 91       	lpm	r30, Z
     ad6:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     ad8:	8e 31       	cpi	r24, 0x1E	; 30
     ada:	91 05       	cpc	r25, r1
					prox2act_msg_waiting = 0;
					return true;
				}
#endif
				else if (esophageal_msg_waiting) {
					SEND_ACT(esophageal_msg_str);
     adc:	b9 f7       	brne	.-18     	; 0xacc <CALLBACK_HID_Device_CreateHIDReport+0x23a>
     ade:	82 e1       	ldi	r24, 0x12	; 18
     ae0:	d5 01       	movw	r26, r10
     ae2:	8c 93       	st	X, r24
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	f4 01       	movw	r30, r8
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
     aee:	10 92 4d 04 	sts	0x044D, r1
     af2:	11 cf       	rjmp	.-478    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     af4:	80 91 87 05 	lds	r24, 0x0587
     af8:	88 23       	and	r24, r24
     afa:	c9 f0       	breq	.+50     	; 0xb2e <__stack+0x2f>
     afc:	d9 01       	movw	r26, r18
					esophageal_msg_waiting = 0;
     afe:	83 e1       	ldi	r24, 0x13	; 19
     b00:	8d 93       	st	X+, r24
     b02:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (vent_msg_waiting) {
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	fc 01       	movw	r30, r24
     b0a:	e4 52       	subi	r30, 0x24	; 36
					SEND_ACT(vent_msg_str);
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	e4 91       	lpm	r30, Z
     b10:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     b12:	83 31       	cpi	r24, 0x13	; 19
     b14:	91 05       	cpc	r25, r1
				else if (esophageal_msg_waiting) {
					SEND_ACT(esophageal_msg_str);
					esophageal_msg_waiting = 0;
					return true;
				} else if (vent_msg_waiting) {
					SEND_ACT(vent_msg_str);
     b16:	b9 f7       	brne	.-18     	; 0xb06 <__stack+0x7>
     b18:	82 e1       	ldi	r24, 0x12	; 18
     b1a:	d5 01       	movw	r26, r10
     b1c:	8c 93       	st	X, r24
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	f4 01       	movw	r30, r8
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	80 83       	st	Z, r24
     b28:	10 92 87 05 	sts	0x0587, r1
     b2c:	f4 ce       	rjmp	.-536    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     b2e:	80 91 61 05 	lds	r24, 0x0561
     b32:	88 23       	and	r24, r24
     b34:	c9 f0       	breq	.+50     	; 0xb68 <__stack+0x69>
     b36:	d9 01       	movw	r26, r18
					vent_msg_waiting = 0;
     b38:	87 e0       	ldi	r24, 0x07	; 7
     b3a:	8d 93       	st	X+, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (bvm_off_msg_waiting) {
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	fc 01       	movw	r30, r24
     b44:	ed 52       	subi	r30, 0x2D	; 45
					SEND_ACT(bvm_off_msg_str);
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	e4 91       	lpm	r30, Z
     b4a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     b4c:	87 30       	cpi	r24, 0x07	; 7
     b4e:	91 05       	cpc	r25, r1
				} else if (vent_msg_waiting) {
					SEND_ACT(vent_msg_str);
					vent_msg_waiting = 0;
					return true;
				} else if (bvm_off_msg_waiting) {
					SEND_ACT(bvm_off_msg_str);
     b50:	b9 f7       	brne	.-18     	; 0xb40 <__stack+0x41>
     b52:	82 e1       	ldi	r24, 0x12	; 18
     b54:	d5 01       	movw	r26, r10
     b56:	8c 93       	st	X, r24
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	f4 01       	movw	r30, r8
     b5e:	91 83       	std	Z+1, r25	; 0x01
     b60:	80 83       	st	Z, r24
     b62:	10 92 61 05 	sts	0x0561, r1
     b66:	d7 ce       	rjmp	.-594    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     b68:	80 91 8e 05 	lds	r24, 0x058E
     b6c:	88 23       	and	r24, r24
     b6e:	c9 f0       	breq	.+50     	; 0xba2 <__stack+0xa3>
     b70:	d9 01       	movw	r26, r18
					bvm_off_msg_waiting = 0;
     b72:	8c e1       	ldi	r24, 0x1C	; 28
     b74:	8d 93       	st	X+, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (mainstem_msg_waiting) {
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	fc 01       	movw	r30, r24
     b7e:	eb 54       	subi	r30, 0x4B	; 75
					SEND_ACT(mainstem_msg_str);
     b80:	fe 4f       	sbci	r31, 0xFE	; 254
     b82:	e4 91       	lpm	r30, Z
     b84:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     b86:	8c 31       	cpi	r24, 0x1C	; 28
     b88:	91 05       	cpc	r25, r1
				} else if (bvm_off_msg_waiting) {
					SEND_ACT(bvm_off_msg_str);
					bvm_off_msg_waiting = 0;
					return true;
				} else if (mainstem_msg_waiting) {
					SEND_ACT(mainstem_msg_str);
     b8a:	b9 f7       	brne	.-18     	; 0xb7a <__stack+0x7b>
     b8c:	82 e1       	ldi	r24, 0x12	; 18
     b8e:	d5 01       	movw	r26, r10
     b90:	8c 93       	st	X, r24
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	f4 01       	movw	r30, r8
     b98:	91 83       	std	Z+1, r25	; 0x01
     b9a:	80 83       	st	Z, r24
     b9c:	10 92 8e 05 	sts	0x058E, r1
     ba0:	ba ce       	rjmp	.-652    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     ba2:	80 91 4f 05 	lds	r24, 0x054F
     ba6:	88 23       	and	r24, r24
     ba8:	c9 f0       	breq	.+50     	; 0xbdc <__stack+0xdd>
     baa:	d9 01       	movw	r26, r18
					mainstem_msg_waiting = 0;
     bac:	86 e1       	ldi	r24, 0x16	; 22
     bae:	8d 93       	st	X+, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (hypervent_msg_waiting) {
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	fc 01       	movw	r30, r24
     bb8:	e3 56       	subi	r30, 0x63	; 99
					SEND_ACT(hypervent_msg_str);
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	e4 91       	lpm	r30, Z
     bbe:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     bc0:	86 31       	cpi	r24, 0x16	; 22
     bc2:	91 05       	cpc	r25, r1
				} else if (mainstem_msg_waiting) {
					SEND_ACT(mainstem_msg_str);
					mainstem_msg_waiting = 0;
					return true;
				} else if (hypervent_msg_waiting) {
					SEND_ACT(hypervent_msg_str);
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <__stack+0xb5>
     bc6:	82 e1       	ldi	r24, 0x12	; 18
     bc8:	d5 01       	movw	r26, r10
     bca:	8c 93       	st	X, r24
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	f4 01       	movw	r30, r8
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
     bd6:	10 92 4f 05 	sts	0x054F, r1
     bda:	9d ce       	rjmp	.-710    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     bdc:	80 91 8c 05 	lds	r24, 0x058C
     be0:	88 23       	and	r24, r24
     be2:	c9 f0       	breq	.+50     	; 0xc16 <__stack+0x117>
     be4:	82 e0       	ldi	r24, 0x02	; 2
					hypervent_msg_waiting = 0;
     be6:	d9 01       	movw	r26, r18
     be8:	8c 93       	st	X, r24
     bea:	ea e9       	ldi	r30, 0x9A	; 154
					return true;
				} else if (o2_msg_waiting) {
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	84 91       	lpm	r24, Z
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	8c 93       	st	X, r24
					SEND_ACT(o2_msg_str);
     bf4:	11 97       	sbiw	r26, 0x01	; 1
     bf6:	31 96       	adiw	r30, 0x01	; 1
     bf8:	e4 91       	lpm	r30, Z
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	ec 93       	st	X, r30
     bfe:	82 e1       	ldi	r24, 0x12	; 18
     c00:	fb 01       	movw	r30, r22
     c02:	80 83       	st	Z, r24
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	d4 01       	movw	r26, r8
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	9c 93       	st	X, r25
     c0e:	8e 93       	st	-X, r24
     c10:	10 92 8c 05 	sts	0x058C, r1
     c14:	80 ce       	rjmp	.-768    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     c16:	80 91 7d 05 	lds	r24, 0x057D
     c1a:	88 23       	and	r24, r24
     c1c:	d1 f0       	breq	.+52     	; 0xc52 <__stack+0x153>
     c1e:	d9 01       	movw	r26, r18
					o2_msg_waiting = 0;
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	8d 93       	st	X+, r24
     c24:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (blip_msg_waiting) {
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	fc 01       	movw	r30, r24
     c2c:	e7 5d       	subi	r30, 0xD7	; 215
					SEND_ACT(blip_str);
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	e4 91       	lpm	r30, Z
     c32:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	91 05       	cpc	r25, r1
				} else if (o2_msg_waiting) {
					SEND_ACT(o2_msg_str);
					o2_msg_waiting = 0;
					return true;
				} else if (blip_msg_waiting) {
					SEND_ACT(blip_str);
     c38:	b9 f7       	brne	.-18     	; 0xc28 <__stack+0x129>
     c3a:	82 e1       	ldi	r24, 0x12	; 18
     c3c:	f5 01       	movw	r30, r10
     c3e:	80 83       	st	Z, r24
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	d4 01       	movw	r26, r8
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	9c 93       	st	X, r25
     c4a:	8e 93       	st	-X, r24
     c4c:	10 92 7d 05 	sts	0x057D, r1
     c50:	62 ce       	rjmp	.-828    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     c52:	80 91 64 05 	lds	r24, 0x0564
     c56:	88 23       	and	r24, r24
     c58:	d1 f0       	breq	.+52     	; 0xc8e <__stack+0x18f>
     c5a:	d9 01       	movw	r26, r18
					blip_msg_waiting = 0;
     c5c:	84 e0       	ldi	r24, 0x04	; 4
     c5e:	8d 93       	st	X+, r24
     c60:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (heat_msg_waiting) {
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	fc 01       	movw	r30, r24
     c68:	ed 5d       	subi	r30, 0xDD	; 221
					SEND_ACT(heat_str);
     c6a:	fe 4f       	sbci	r31, 0xFE	; 254
     c6c:	e4 91       	lpm	r30, Z
     c6e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     c70:	84 30       	cpi	r24, 0x04	; 4
     c72:	91 05       	cpc	r25, r1
				} else if (blip_msg_waiting) {
					SEND_ACT(blip_str);
					blip_msg_waiting = 0;
					return true;
				} else if (heat_msg_waiting) {
					SEND_ACT(heat_str);
     c74:	b9 f7       	brne	.-18     	; 0xc64 <__stack+0x165>
     c76:	82 e1       	ldi	r24, 0x12	; 18
     c78:	f5 01       	movw	r30, r10
     c7a:	80 83       	st	Z, r24
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	d4 01       	movw	r26, r8
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	9c 93       	st	X, r25
     c86:	8e 93       	st	-X, r24
     c88:	10 92 64 05 	sts	0x0564, r1
     c8c:	44 ce       	rjmp	.-888    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     c8e:	80 91 6f 05 	lds	r24, 0x056F
     c92:	88 23       	and	r24, r24
     c94:	d1 f0       	breq	.+52     	; 0xcca <__stack+0x1cb>
     c96:	d9 01       	movw	r26, r18
					heat_msg_waiting = 0;
     c98:	8e e0       	ldi	r24, 0x0E	; 14
     c9a:	8d 93       	st	X+, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	fc 01       	movw	r30, r24
     ca4:	ed 5e       	subi	r30, 0xED	; 237
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	e4 91       	lpm	r30, Z
     caa:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     cac:	8e 30       	cpi	r24, 0x0E	; 14
     cae:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     cb0:	b9 f7       	brne	.-18     	; 0xca0 <__stack+0x1a1>
     cb2:	82 e1       	ldi	r24, 0x12	; 18
     cb4:	f5 01       	movw	r30, r10
     cb6:	80 83       	st	Z, r24
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	d4 01       	movw	r26, r8
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	10 92 6f 05 	sts	0x056F, r1
     cc8:	26 ce       	rjmp	.-948    	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     cca:	80 91 74 05 	lds	r24, 0x0574
     cce:	88 23       	and	r24, r24
     cd0:	d1 f0       	breq	.+52     	; 0xd06 <__stack+0x207>
     cd2:	d9 01       	movw	r26, r18
     cd4:	8d e0       	ldi	r24, 0x0D	; 13
     cd6:	8d 93       	st	X+, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	fc 01       	movw	r30, r24
     ce0:	ec 5f       	subi	r30, 0xFC	; 252
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	e4 91       	lpm	r30, Z
     ce6:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     ce8:	8d 30       	cpi	r24, 0x0D	; 13
     cea:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     cec:	b9 f7       	brne	.-18     	; 0xcdc <__stack+0x1dd>
     cee:	82 e1       	ldi	r24, 0x12	; 18
     cf0:	f5 01       	movw	r30, r10
     cf2:	80 83       	st	Z, r24
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	d4 01       	movw	r26, r8
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	9c 93       	st	X, r25
     cfe:	8e 93       	st	-X, r24
     d00:	10 92 74 05 	sts	0x0574, r1
     d04:	08 ce       	rjmp	.-1008   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     d06:	80 91 8b 05 	lds	r24, 0x058B
     d0a:	88 23       	and	r24, r24
     d0c:	d1 f0       	breq	.+52     	; 0xd42 <__stack+0x243>
     d0e:	d9 01       	movw	r26, r18
     d10:	8d e0       	ldi	r24, 0x0D	; 13
     d12:	8d 93       	st	X+, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	fc 01       	movw	r30, r24
     d1c:	eb 50       	subi	r30, 0x0B	; 11
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	e4 91       	lpm	r30, Z
     d22:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d24:	8d 30       	cpi	r24, 0x0D	; 13
     d26:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     d28:	b9 f7       	brne	.-18     	; 0xd18 <__stack+0x219>
     d2a:	82 e1       	ldi	r24, 0x12	; 18
     d2c:	f5 01       	movw	r30, r10
     d2e:	80 83       	st	Z, r24
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	d4 01       	movw	r26, r8
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	9c 93       	st	X, r25
     d3a:	8e 93       	st	-X, r24
     d3c:	10 92 8b 05 	sts	0x058B, r1
     d40:	ea cd       	rjmp	.-1068   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     d42:	80 91 60 05 	lds	r24, 0x0560
     d46:	88 23       	and	r24, r24
     d48:	d1 f0       	breq	.+52     	; 0xd7e <__stack+0x27f>
     d4a:	d9 01       	movw	r26, r18
     d4c:	8d e0       	ldi	r24, 0x0D	; 13
     d4e:	8d 93       	st	X+, r24
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	fc 01       	movw	r30, r24
     d58:	ea 51       	subi	r30, 0x1A	; 26
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	e4 91       	lpm	r30, Z
     d5e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d60:	8d 30       	cpi	r24, 0x0D	; 13
     d62:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     d64:	b9 f7       	brne	.-18     	; 0xd54 <__stack+0x255>
     d66:	82 e1       	ldi	r24, 0x12	; 18
     d68:	f5 01       	movw	r30, r10
     d6a:	80 83       	st	Z, r24
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	d4 01       	movw	r26, r8
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	9c 93       	st	X, r25
     d76:	8e 93       	st	-X, r24
     d78:	10 92 60 05 	sts	0x0560, r1
     d7c:	cc cd       	rjmp	.-1128   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     d7e:	80 91 8d 05 	lds	r24, 0x058D
     d82:	88 23       	and	r24, r24
     d84:	d1 f0       	breq	.+52     	; 0xdba <__stack+0x2bb>
     d86:	d9 01       	movw	r26, r18
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	8d 93       	st	X+, r24
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	fc 01       	movw	r30, r24
     d94:	ec 52       	subi	r30, 0x2C	; 44
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	e4 91       	lpm	r30, Z
     d9a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d9c:	80 31       	cpi	r24, 0x10	; 16
     d9e:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     da0:	b9 f7       	brne	.-18     	; 0xd90 <__stack+0x291>
     da2:	82 e1       	ldi	r24, 0x12	; 18
     da4:	f5 01       	movw	r30, r10
     da6:	80 83       	st	Z, r24
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	d4 01       	movw	r26, r8
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	8e 93       	st	-X, r24
     db4:	10 92 8d 05 	sts	0x058D, r1
     db8:	ae cd       	rjmp	.-1188   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     dba:	80 91 85 05 	lds	r24, 0x0585
     dbe:	88 23       	and	r24, r24
     dc0:	d1 f0       	breq	.+52     	; 0xdf6 <__stack+0x2f7>
     dc2:	d9 01       	movw	r26, r18
     dc4:	8d e0       	ldi	r24, 0x0D	; 13
     dc6:	8d 93       	st	X+, r24
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	fc 01       	movw	r30, r24
     dd0:	eb 53       	subi	r30, 0x3B	; 59
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	e4 91       	lpm	r30, Z
     dd6:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     dd8:	8d 30       	cpi	r24, 0x0D	; 13
     dda:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     ddc:	b9 f7       	brne	.-18     	; 0xdcc <__stack+0x2cd>
     dde:	82 e1       	ldi	r24, 0x12	; 18
     de0:	f5 01       	movw	r30, r10
     de2:	80 83       	st	Z, r24
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	d4 01       	movw	r26, r8
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	10 92 85 05 	sts	0x0585, r1
     df4:	90 cd       	rjmp	.-1248   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     df6:	80 91 8f 05 	lds	r24, 0x058F
     dfa:	88 23       	and	r24, r24
     dfc:	d1 f0       	breq	.+52     	; 0xe32 <__stack+0x333>
     dfe:	d9 01       	movw	r26, r18
     e00:	8d e0       	ldi	r24, 0x0D	; 13
     e02:	8d 93       	st	X+, r24
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	fc 01       	movw	r30, r24
     e0c:	ea 54       	subi	r30, 0x4A	; 74
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	e4 91       	lpm	r30, Z
     e12:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e14:	8d 30       	cpi	r24, 0x0D	; 13
     e16:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     e18:	b9 f7       	brne	.-18     	; 0xe08 <__stack+0x309>
     e1a:	82 e1       	ldi	r24, 0x12	; 18
     e1c:	f5 01       	movw	r30, r10
     e1e:	80 83       	st	Z, r24
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	d4 01       	movw	r26, r8
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	9c 93       	st	X, r25
     e2a:	8e 93       	st	-X, r24
     e2c:	10 92 8f 05 	sts	0x058F, r1
     e30:	72 cd       	rjmp	.-1308   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     e32:	80 91 84 05 	lds	r24, 0x0584
     e36:	88 23       	and	r24, r24
     e38:	d1 f0       	breq	.+52     	; 0xe6e <__stack+0x36f>
     e3a:	d9 01       	movw	r26, r18
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	8d 93       	st	X+, r24
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	fc 01       	movw	r30, r24
     e48:	e4 55       	subi	r30, 0x54	; 84
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	e4 91       	lpm	r30, Z
     e4e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     e54:	b9 f7       	brne	.-18     	; 0xe44 <__stack+0x345>
     e56:	82 e1       	ldi	r24, 0x12	; 18
     e58:	f5 01       	movw	r30, r10
     e5a:	80 83       	st	Z, r24
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	d4 01       	movw	r26, r8
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	9c 93       	st	X, r25
     e66:	8e 93       	st	-X, r24
     e68:	10 92 84 05 	sts	0x0584, r1
     e6c:	54 cd       	rjmp	.-1368   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     e6e:	80 91 63 05 	lds	r24, 0x0563
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	d9 f4       	brne	.+54     	; 0xeac <__stack+0x3ad>
     e76:	d9 01       	movw	r26, r18
     e78:	8e e0       	ldi	r24, 0x0E	; 14
     e7a:	8d 93       	st	X+, r24
     e7c:	80 e0       	ldi	r24, 0x00	; 0
#define ESCHAR_RESPONSE_MACRO(x) if (eschar_msg_state_##x == ESCHAR_MSG_WAITING) {\
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	fc 01       	movw	r30, r24
     e84:	e7 57       	subi	r30, 0x77	; 119
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	e4 91       	lpm	r30, Z
     e8a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e8c:	8e 30       	cpi	r24, 0x0E	; 14
     e8e:	91 05       	cpc	r25, r1
#define ESCHAR_RESPONSE_MACRO(x) if (eschar_msg_state_##x == ESCHAR_MSG_WAITING) {\
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
     e90:	b9 f7       	brne	.-18     	; 0xe80 <__stack+0x381>
     e92:	82 e1       	ldi	r24, 0x12	; 18
     e94:	f5 01       	movw	r30, r10
     e96:	80 83       	st	Z, r24
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	d4 01       	movw	r26, r8
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	9c 93       	st	X, r25
     ea2:	8e 93       	st	-X, r24
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	80 93 63 05 	sts	0x0563, r24
     eaa:	35 cd       	rjmp	.-1430   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     eac:	80 91 88 05 	lds	r24, 0x0588
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	d9 f4       	brne	.+54     	; 0xeea <__stack+0x3eb>
     eb4:	d9 01       	movw	r26, r18
     eb6:	8e e0       	ldi	r24, 0x0E	; 14
     eb8:	8d 93       	st	X+, r24
     eba:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(2)
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	fc 01       	movw	r30, r24
     ec2:	e7 58       	subi	r30, 0x87	; 135
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	e4 91       	lpm	r30, Z
     ec8:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     eca:	8e 30       	cpi	r24, 0x0E	; 14
     ecc:	91 05       	cpc	r25, r1
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
     ece:	b9 f7       	brne	.-18     	; 0xebe <__stack+0x3bf>
     ed0:	82 e1       	ldi	r24, 0x12	; 18
     ed2:	f5 01       	movw	r30, r10
     ed4:	80 83       	st	Z, r24
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	d4 01       	movw	r26, r8
     edc:	11 96       	adiw	r26, 0x01	; 1
     ede:	9c 93       	st	X, r25
     ee0:	8e 93       	st	-X, r24
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	80 93 88 05 	sts	0x0588, r24
     ee8:	16 cd       	rjmp	.-1492   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     eea:	80 91 86 05 	lds	r24, 0x0586
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__stack+0x429>
     ef2:	d9 01       	movw	r26, r18
     ef4:	8e e0       	ldi	r24, 0x0E	; 14
     ef6:	8d 93       	st	X+, r24
     ef8:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(3)
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	fc 01       	movw	r30, r24
     f00:	e7 59       	subi	r30, 0x97	; 151
     f02:	fe 4f       	sbci	r31, 0xFE	; 254
     f04:	e4 91       	lpm	r30, Z
     f06:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     f08:	8e 30       	cpi	r24, 0x0E	; 14
     f0a:	91 05       	cpc	r25, r1
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
     f0c:	b9 f7       	brne	.-18     	; 0xefc <__stack+0x3fd>
     f0e:	82 e1       	ldi	r24, 0x12	; 18
     f10:	f5 01       	movw	r30, r10
     f12:	80 83       	st	Z, r24
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	d4 01       	movw	r26, r8
     f1a:	11 96       	adiw	r26, 0x01	; 1
     f1c:	9c 93       	st	X, r25
     f1e:	8e 93       	st	-X, r24
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	80 93 86 05 	sts	0x0586, r24
     f26:	f7 cc       	rjmp	.-1554   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     f28:	80 91 4e 04 	lds	r24, 0x044E
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	d9 f4       	brne	.+54     	; 0xf66 <__stack+0x467>
     f30:	d9 01       	movw	r26, r18
     f32:	8e e0       	ldi	r24, 0x0E	; 14
     f34:	8d 93       	st	X+, r24
     f36:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(4)
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	fc 01       	movw	r30, r24
     f3e:	e7 5a       	subi	r30, 0xA7	; 167
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	e4 91       	lpm	r30, Z
     f44:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     f46:	8e 30       	cpi	r24, 0x0E	; 14
     f48:	91 05       	cpc	r25, r1
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
				ESCHAR_RESPONSE_MACRO(4)
     f4a:	b9 f7       	brne	.-18     	; 0xf3a <__stack+0x43b>
     f4c:	82 e1       	ldi	r24, 0x12	; 18
     f4e:	f5 01       	movw	r30, r10
     f50:	80 83       	st	Z, r24
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	d4 01       	movw	r26, r8
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	9c 93       	st	X, r25
     f5c:	8e 93       	st	-X, r24
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	80 93 4e 04 	sts	0x044E, r24
     f64:	d8 cc       	rjmp	.-1616   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     f66:	80 91 7f 05 	lds	r24, 0x057F
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	d9 f4       	brne	.+54     	; 0xfa4 <__stack+0x4a5>
     f6e:	d9 01       	movw	r26, r18
     f70:	8e e0       	ldi	r24, 0x0E	; 14
     f72:	8d 93       	st	X+, r24
     f74:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(5)
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	fc 01       	movw	r30, r24
     f7c:	e7 5b       	subi	r30, 0xB7	; 183
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
     f80:	e4 91       	lpm	r30, Z
     f82:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     f84:	8e 30       	cpi	r24, 0x0E	; 14
     f86:	91 05       	cpc	r25, r1
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
				ESCHAR_RESPONSE_MACRO(4)
				ESCHAR_RESPONSE_MACRO(5)
     f88:	b9 f7       	brne	.-18     	; 0xf78 <__stack+0x479>
     f8a:	82 e1       	ldi	r24, 0x12	; 18
     f8c:	f5 01       	movw	r30, r10
     f8e:	80 83       	st	Z, r24
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	d4 01       	movw	r26, r8
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	9c 93       	st	X, r25
     f9a:	8e 93       	st	-X, r24
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 7f 05 	sts	0x057F, r24
     fa2:	b9 cc       	rjmp	.-1678   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     fa4:	80 91 10 01 	lds	r24, 0x0110
     fa8:	90 91 11 01 	lds	r25, 0x0111
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	81 f0       	breq	.+32     	; 0xfd0 <__stack+0x4d1>
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	91 e0       	ldi	r25, 0x01	; 1
				
				//send the sensor spike event
				if (event_buffer.occupancy) {
     fb4:	fb d0       	rcall	.+502    	; 0x11ac <deq_event>
     fb6:	b7 01       	movw	r22, r14
     fb8:	27 d1       	rcall	.+590    	; 0x1208 <event_to_wire>
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	f4 01       	movw	r30, r8
					if (RV_IS_IV_ARM) {
						deq_event(&event_buffer); //intentionally discard
						SEND_ACT(iv_arm_msg);
						return true;
					} else { // some other thing that uses the rv code FIXME list them
						nextevt = deq_event(&event_buffer);
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	d5 01       	movw	r26, r10
						event_to_wire(nextevt, Data);
     fc8:	8c 93       	st	X, r24
     fca:	81 e8       	ldi	r24, 0x81	; 129
     fcc:	03 db       	rcall	.-2554   	; 0x5d4 <LEDs_SetAllLEDs>
						*ReportSize = GET_SENSOR_EVENT_REPORT_SIZE;
     fce:	a3 cc       	rjmp	.-1722   	; 0x916 <CALLBACK_HID_Device_CreateHIDReport+0x84>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	2b 96       	adiw	r28, 0x0b	; 11
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
						*ReportID = GET_SENSOR_EVENT_REPORT_ID;
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
						LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
					return true;
				}
				*/
			}
	}
	return false;
     fe6:	ff 90       	pop	r15
}
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	9f 90       	pop	r9
     ff4:	8f 90       	pop	r8
     ff6:	08 95       	ret

00000ff8 <CALLBACK_HID_Device_ProcessHIDReport>:
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	e9 01       	movw	r28, r18
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	b1 f1       	breq	.+108    	; 0x1072 <CALLBACK_HID_Device_ProcessHIDReport+0x7a>
    1006:	42 30       	cpi	r20, 0x02	; 2
    1008:	09 f0       	breq	.+2      	; 0x100c <CALLBACK_HID_Device_ProcessHIDReport+0x14>
    100a:	8e c0       	rjmp	.+284    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    100c:	62 30       	cpi	r22, 0x02	; 2
	UNUSED(ReportSize);
	switch (ReportType) {
		case HID_REPORT_ITEM_Feature:
		//store string id and offset in alotted bytes
		//use the getDescriptor callback to get the string pointer and length
			if (ReportID == STRING_DESC_HACK_REPORT_ID) {
    100e:	51 f4       	brne	.+20     	; 0x1024 <CALLBACK_HID_Device_ProcessHIDReport+0x2c>
				stm_state = STRINGSTM_STRING_REQUESTED;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 3c 03 	sts	0x033C, r24
				stm_reqd_stringid = Data[0];
    1016:	88 81       	ld	r24, Y
    1018:	80 93 3b 03 	sts	0x033B, r24
				stm_reqd_offset = Data[1];
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	80 93 3a 03 	sts	0x033A, r24
    1022:	82 c0       	rjmp	.+260    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
			} else if (ReportID == TIMESTAMP_OFFSET_FR_ID) {
    1024:	64 30       	cpi	r22, 0x04	; 4
    1026:	21 f4       	brne	.+8      	; 0x1030 <CALLBACK_HID_Device_ProcessHIDReport+0x38>
				TIME_t oset;
				oset = time_from_wire(Data);
    1028:	c9 01       	movw	r24, r18
    102a:	a6 d2       	rcall	.+1356   	; 0x1578 <time_from_wire>
    102c:	0c d2       	rcall	.+1048   	; 0x1446 <set_time_oset>
				set_time_oset(oset);
    102e:	7c c0       	rjmp	.+248    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    1030:	66 30       	cpi	r22, 0x06	; 6
    1032:	91 f4       	brne	.+36     	; 0x1058 <CALLBACK_HID_Device_ProcessHIDReport+0x60>
			} else if (ReportID == SET_SENS_THRESH_REPORT_ID) {
    1034:	04 e9       	ldi	r16, 0x94	; 148
    1036:	11 e0       	ldi	r17, 0x01	; 1
    1038:	ce 01       	movw	r24, r28
    103a:	28 d1       	rcall	.+592    	; 0x128c <float_from_wire>
				for (int i=0; i < 4; i++) {
					sensor_evt_thresh[i] = float_from_wire(Data + 4*i);
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	f8 01       	movw	r30, r16
    1042:	81 93       	st	Z+, r24
    1044:	91 93       	st	Z+, r25
    1046:	a1 93       	st	Z+, r26
    1048:	b1 93       	st	Z+, r27
    104a:	8f 01       	movw	r16, r30
    104c:	24 96       	adiw	r28, 0x04	; 4
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	04 3a       	cpi	r16, 0xA4	; 164
    1052:	1f 07       	cpc	r17, r31
			} else if (ReportID == TIMESTAMP_OFFSET_FR_ID) {
				TIME_t oset;
				oset = time_from_wire(Data);
				set_time_oset(oset);
			} else if (ReportID == SET_SENS_THRESH_REPORT_ID) {
				for (int i=0; i < 4; i++) {
    1054:	89 f7       	brne	.-30     	; 0x1038 <CALLBACK_HID_Device_ProcessHIDReport+0x40>
    1056:	68 c0       	rjmp	.+208    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    1058:	6f 3f       	cpi	r22, 0xFF	; 255
    105a:	19 f4       	brne	.+6      	; 0x1062 <CALLBACK_HID_Device_ProcessHIDReport+0x6a>
    105c:	81 ea       	ldi	r24, 0xA1	; 161
					sensor_evt_thresh[i] = float_from_wire(Data + 4*i);
				}
			} else if (ReportID == START_BOOTLOADER_REPORT_ID) {
    105e:	ba da       	rcall	.-2700   	; 0x5d4 <LEDs_SetAllLEDs>
    1060:	cd da       	rcall	.-2662   	; 0x5fc <Jump_To_Bootloader>
				//check that proper code was supplied
				//FIXME lol always succeed
				//start bootloader
				LEDs_SetAllLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
    1062:	6f 30       	cpi	r22, 0x0F	; 15
    1064:	09 f0       	breq	.+2      	; 0x1068 <CALLBACK_HID_Device_ProcessHIDReport+0x70>
    1066:	60 c0       	rjmp	.+192    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
				Jump_To_Bootloader();
    1068:	38 d3       	rcall	.+1648   	; 0x16da <heat_enable>
    106a:	81 e0       	ldi	r24, 0x01	; 1
			} else if (ReportID == NO_DATA_REPORT_ID) {
    106c:	80 93 64 05 	sts	0x0564, r24
    1070:	5b c0       	rjmp	.+182    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
				heat_enable();
    1072:	61 31       	cpi	r22, 0x11	; 17
    1074:	61 f0       	breq	.+24     	; 0x108e <CALLBACK_HID_Device_ProcessHIDReport+0x96>
				heat_msg_waiting = 1;
    1076:	62 31       	cpi	r22, 0x12	; 18
    1078:	20 f4       	brcc	.+8      	; 0x1082 <CALLBACK_HID_Device_ProcessHIDReport+0x8a>
    107a:	6d 30       	cpi	r22, 0x0D	; 13
    107c:	09 f0       	breq	.+2      	; 0x1080 <CALLBACK_HID_Device_ProcessHIDReport+0x88>
			}
			break;
		case HID_REPORT_ITEM_Out:
		//TODO have these handlers update the value sent on the corresponding INPUT reports.
		
		switch (ReportID) {
    107e:	54 c0       	rjmp	.+168    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    1080:	38 c0       	rjmp	.+112    	; 0x10f2 <CALLBACK_HID_Device_ProcessHIDReport+0xfa>
    1082:	62 31       	cpi	r22, 0x12	; 18
    1084:	31 f1       	breq	.+76     	; 0x10d2 <CALLBACK_HID_Device_ProcessHIDReport+0xda>
    1086:	63 31       	cpi	r22, 0x13	; 19
    1088:	09 f0       	breq	.+2      	; 0x108c <CALLBACK_HID_Device_ProcessHIDReport+0x94>
    108a:	4e c0       	rjmp	.+156    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    108c:	06 c0       	rjmp	.+12     	; 0x109a <CALLBACK_HID_Device_ProcessHIDReport+0xa2>
    108e:	88 81       	ld	r24, Y
    1090:	88 23       	and	r24, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <CALLBACK_HID_Device_ProcessHIDReport+0x9e>
    1094:	49 c0       	rjmp	.+146    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    1096:	97 d2       	rcall	.+1326   	; 0x15c6 <rfid_sendcommand_readtags>
    1098:	47 c0       	rjmp	.+142    	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
			
			case RFID_TAG_SCAN_COMMAND_REPORT_ID:
			//rfid_parser_clearbuffers();
			if (Data[0] == 0) {
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	86 35       	cpi	r24, 0x56	; 86
    109e:	61 f4       	brne	.+24     	; 0x10b8 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
				rfid_sendcommand_readtags();
    10a2:	85 34       	cpi	r24, 0x45	; 69
    10a4:	99 f4       	brne	.+38     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
			for (int i = 0; i <= len; i++) {
				prox2act[i] = Data[i];
			}
			prox2act_msg_waiting = 1;
#endif
			if (Data[1] == 'V' && Data[2] == 'E' && Data[3] == 'N' && Data[4] == 'T') { // VENT
    10a8:	8e 34       	cpi	r24, 0x4E	; 78
    10aa:	81 f4       	brne	.+32     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	84 35       	cpi	r24, 0x54	; 84
    10b0:	69 f4       	brne	.+26     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10b2:	40 93 62 05 	sts	0x0562, r20
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10b8:	82 34       	cpi	r24, 0x42	; 66
    10ba:	41 f4       	brne	.+16     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	86 35       	cpi	r24, 0x56	; 86
				//TODO what is the appropriate action here
				vent_sitch = ACT_MSG_ST_RCVD;
    10c0:	29 f4       	brne	.+10     	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	8d 34       	cpi	r24, 0x4D	; 77
			} else if (Data[1] == 'B' && Data[2] == 'V' && Data[3] == 'M') { // BVM
    10c6:	11 f4       	brne	.+4      	; 0x10cc <CALLBACK_HID_Device_ProcessHIDReport+0xd4>
    10c8:	40 93 4e 05 	sts	0x054E, r20
    10cc:	ce 01       	movw	r24, r28
    10ce:	31 d3       	rcall	.+1634   	; 0x1732 <flow_sensor_handle_PROX>
    10d0:	2b c0       	rjmp	.+86     	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	83 35       	cpi	r24, 0x53	; 83
				//TODO what is the appropriate action here
				//do not send any airway messages if the BVM message has not been received
				bvm_sitch = ACT_MSG_ST_RCVD;
    10d6:	51 f4       	brne	.+20     	; 0x10ec <CALLBACK_HID_Device_ProcessHIDReport+0xf4>
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
			} else if (Data[1] == 'O' && Data[2] == '2') {
				//airway emits an O2 message on ACT, echoing it
				//makes rfid code simpler
				//o2_msg_waiting = 1;
			}
			flow_sensor_handle_PROX((char*)Data);
    10da:	84 35       	cpi	r24, 0x54	; 84
    10dc:	39 f4       	brne	.+14     	; 0x10ec <CALLBACK_HID_Device_ProcessHIDReport+0xf4>
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
    10e0:	8f 34       	cpi	r24, 0x4F	; 79
				Escharotomy arm
				IV arm
				Rugged arm
				or rather, all the arms that have a pulse.
			*/
			if (Data[1]=='S' && Data[2]=='T' && Data[3]=='O' && Data[4]=='P') { // skip length, check first character
    10e2:	21 f4       	brne	.+8      	; 0x10ec <CALLBACK_HID_Device_ProcessHIDReport+0xf4>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	80 35       	cpi	r24, 0x50	; 80
    10e8:	09 f4       	brne	.+2      	; 0x10ec <CALLBACK_HID_Device_ProcessHIDReport+0xf4>
    10ea:	f9 d2       	rcall	.+1522   	; 0x16de <pulse_stop>
    10ec:	ce 01       	movw	r24, r28
    10ee:	8a d3       	rcall	.+1812   	; 0x1804 <flow_sensor_handle_ACT>
    10f0:	1b c0       	rjmp	.+54     	; 0x1128 <CALLBACK_HID_Device_ProcessHIDReport+0x130>
    10f2:	c9 01       	movw	r24, r18
    10f4:	cb d0       	rcall	.+406    	; 0x128c <float_from_wire>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
				pulse_stop();
    10fa:	40 e7       	ldi	r20, 0x70	; 112
    10fc:	52 e4       	ldi	r21, 0x42	; 66
			}
			flow_sensor_handle_ACT((char*) Data);
    10fe:	0e 94 02 13 	call	0x2604	; 0x2604 <__divsf3>
    1102:	9b 01       	movw	r18, r22
			break;
    1104:	ac 01       	movw	r20, r24
				IV Arm
			*/
			int pulse_delay_ms;
			float hr;
			//read float from message
			hr = float_from_wire(Data); // b/m
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	80 e8       	ldi	r24, 0x80	; 128
			float bps = hr / 60.0; /* b/m * m/s = b/s */
    110c:	9f e3       	ldi	r25, 0x3F	; 63
    110e:	0e 94 02 13 	call	0x2604	; 0x2604 <__divsf3>
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a e7       	ldi	r20, 0x7A	; 122
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__mulsf3>
			float spb = 1.0/bps;
    111e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__fixsfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	de d2       	rcall	.+1468   	; 0x16e4 <pulse_set_delay>
			float ms_p_b = 1000*spb;
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	UNUSED(wIndex);
	switch (DescriptorType)
    1132:	93 30       	cpi	r25, 0x03	; 3
    1134:	89 f0       	breq	.+34     	; 0x1158 <CALLBACK_USB_GetDescriptor+0x26>
    1136:	94 30       	cpi	r25, 0x04	; 4
    1138:	28 f4       	brcc	.+10     	; 0x1144 <CALLBACK_USB_GetDescriptor+0x12>
    113a:	91 30       	cpi	r25, 0x01	; 1
    113c:	49 f1       	breq	.+82     	; 0x1190 <CALLBACK_USB_GetDescriptor+0x5e>
    113e:	92 30       	cpi	r25, 0x02	; 2
    1140:	61 f5       	brne	.+88     	; 0x119a <CALLBACK_USB_GetDescriptor+0x68>
    1142:	05 c0       	rjmp	.+10     	; 0x114e <CALLBACK_USB_GetDescriptor+0x1c>
    1144:	91 32       	cpi	r25, 0x21	; 33
    1146:	d1 f0       	breq	.+52     	; 0x117c <CALLBACK_USB_GetDescriptor+0x4a>
    1148:	92 32       	cpi	r25, 0x22	; 34
    114a:	39 f5       	brne	.+78     	; 0x119a <CALLBACK_USB_GetDescriptor+0x68>
    114c:	1c c0       	rjmp	.+56     	; 0x1186 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    114e:	82 e2       	ldi	r24, 0x22	; 34
    1150:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1152:	e0 e7       	ldi	r30, 0x70	; 112
    1154:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1156:	25 c0       	rjmp	.+74     	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	41 f0       	breq	.+16     	; 0x116c <CALLBACK_USB_GetDescriptor+0x3a>
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	18 f0       	brcs	.+6      	; 0x1166 <CALLBACK_USB_GetDescriptor+0x34>
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	d9 f4       	brne	.+54     	; 0x119a <CALLBACK_USB_GetDescriptor+0x68>
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1166:	ec e6       	ldi	r30, 0x6C	; 108
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    116c:	e2 e5       	ldi	r30, 0x52	; 82
    116e:	f2 e0       	ldi	r31, 0x02	; 2
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1172:	e4 e2       	ldi	r30, 0x24	; 36
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	84 91       	lpm	r24, Z
    1178:	90 e0       	ldi	r25, 0x00	; 0
					break;
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    117c:	89 e0       	ldi	r24, 0x09	; 9
    117e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    1180:	e2 e8       	ldi	r30, 0x82	; 130
    1182:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
    1186:	8a ec       	ldi	r24, 0xCA	; 202
    1188:	91 e0       	ldi	r25, 0x01	; 1
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
    118a:	e4 ea       	ldi	r30, 0xA4	; 164
    118c:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(GenericReport);
			break;
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x70>
	UNUSED(wIndex);
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1190:	82 e1       	ldi	r24, 0x12	; 18
    1192:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;
	UNUSED(wIndex);
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1194:	e2 e9       	ldi	r30, 0x92	; 146
    1196:	f2 e0       	ldi	r31, 0x02	; 2
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    119e:	e0 e0       	ldi	r30, 0x00	; 0
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    11a2:	da 01       	movw	r26, r20
    11a4:	11 96       	adiw	r26, 0x01	; 1
    11a6:	fc 93       	st	X, r31
    11a8:	ee 93       	st	-X, r30
	return Size;
}
    11aa:	08 95       	ret

000011ac <deq_event>:
		ebuf->occupancy = ebuf->buflen;
	}
}

const event_t* deq_event(event_buf_t* ebuf)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	fc 01       	movw	r30, r24
	if (ebuf->occupancy) {
    11b2:	26 81       	ldd	r18, Z+6	; 0x06
    11b4:	37 81       	ldd	r19, Z+7	; 0x07
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	d9 f0       	breq	.+54     	; 0x11f2 <deq_event+0x46>
		int lr = ebuf->last_real;
    11bc:	c4 81       	ldd	r28, Z+4	; 0x04
    11be:	d5 81       	ldd	r29, Z+5	; 0x05
		event_t* out = &(ebuf->evtbuf[lr]);
		ebuf->last_real = (lr + 1) % (ebuf->buflen);
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	0e 94 4f 14 	call	0x289e	; 0x289e <__udivmodhi4>
    11cc:	95 83       	std	Z+5, r25	; 0x05
    11ce:	84 83       	std	Z+4, r24	; 0x04
		(ebuf->occupancy)--;
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	30 40       	sbci	r19, 0x00	; 0
    11d4:	37 83       	std	Z+7, r19	; 0x07
    11d6:	26 83       	std	Z+6, r18	; 0x06
		return out;
    11d8:	2d e0       	ldi	r18, 0x0D	; 13
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	c2 9f       	mul	r28, r18
    11de:	c0 01       	movw	r24, r0
    11e0:	c3 9f       	mul	r28, r19
    11e2:	90 0d       	add	r25, r0
    11e4:	d2 9f       	mul	r29, r18
    11e6:	90 0d       	add	r25, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	08 96       	adiw	r24, 0x08	; 8
    11ec:	8e 0f       	add	r24, r30
    11ee:	9f 1f       	adc	r25, r31
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <deq_event+0x4a>
	}
	return NULL;
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <uint32_to_wire>:
union uint32_byteview {
	uint32_t val;
	uint8_t u8s[4];
};
void uint32_to_wire(uint32_t v, uint8_t w[])
{
    11fc:	fa 01       	movw	r30, r20
	union uint32_byteview ubv;
	ubv.val = v;
	for (int i = 0; i < 4; i++) {
		w[i] = ubv.u8s[3-i];
    11fe:	90 83       	st	Z, r25
    1200:	81 83       	std	Z+1, r24	; 0x01
    1202:	72 83       	std	Z+2, r23	; 0x02
    1204:	63 83       	std	Z+3, r22	; 0x03
	}
}
    1206:	08 95       	ret

00001208 <event_to_wire>:
		return runvar_curmean(&(o->snd));
	}
}

void event_to_wire(const event_t* e, uint8_t w[])
{
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	7b 01       	movw	r14, r22
	time_to_wire(e->host_time_start, w);
    1218:	28 81       	ld	r18, Y
    121a:	39 81       	ldd	r19, Y+1	; 0x01
    121c:	4a 81       	ldd	r20, Y+2	; 0x02
    121e:	5b 81       	ldd	r21, Y+3	; 0x03
    1220:	6c 81       	ldd	r22, Y+4	; 0x04
    1222:	7d 81       	ldd	r23, Y+5	; 0x05
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	87 01       	movw	r16, r14
    122a:	7d d1       	rcall	.+762    	; 0x1526 <time_to_wire>
    122c:	68 85       	ldd	r22, Y+8	; 0x08
	uint32_to_wire(e->evt_dur, w+8);
    122e:	79 85       	ldd	r23, Y+9	; 0x09
    1230:	8a 85       	ldd	r24, Y+10	; 0x0a
    1232:	9b 85       	ldd	r25, Y+11	; 0x0b
    1234:	a7 01       	movw	r20, r14
    1236:	48 5f       	subi	r20, 0xF8	; 248
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	e0 df       	rcall	.-64     	; 0x11fc <uint32_to_wire>
    123c:	8c 85       	ldd	r24, Y+12	; 0x0c
    123e:	f7 01       	movw	r30, r14
	w[12] = e->location;
    1240:	84 87       	std	Z+12, r24	; 0x0c
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
}
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <float_to_wire>:
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
union float_byteview {
	float val;
	uint8_t u8s[4];
};
void float_to_wire(float f, uint8_t w[])
{
    1254:	00 d0       	rcall	.+0      	; 0x1256 <float_to_wire+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <float_to_wire+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
	union float_byteview fbv;
	fbv.val = f;
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	ab 83       	std	Y+3, r26	; 0x03
    1266:	bc 83       	std	Y+4, r27	; 0x04
    1268:	de 01       	movw	r26, r28
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	fa 01       	movw	r30, r20
	for (int i = 0; i < 4; i++) {
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
		w[i] = fbv.u8s[i];
    1272:	2d 91       	ld	r18, X+
    1274:	21 93       	st	Z+, r18
};
void float_to_wire(float f, uint8_t w[])
{
	union float_byteview fbv;
	fbv.val = f;
	for (int i = 0; i < 4; i++) {
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	91 05       	cpc	r25, r1
    127c:	d1 f7       	brne	.-12     	; 0x1272 <float_to_wire+0x22>
		w[i] = fbv.u8s[i];
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <float_from_wire>:
float float_from_wire(const uint8_t w[])
{
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <float_from_wire+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <float_from_wire+0x8>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	union float_byteview fbv;
	for (int i = 0; i < 4; i++) {
    1298:	fc 01       	movw	r30, r24
    129a:	de 01       	movw	r26, r28
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
		fbv.u8s[i] = w[i];
    12a2:	21 91       	ld	r18, Z+
    12a4:	2d 93       	st	X+, r18
	}
}
float float_from_wire(const uint8_t w[])
{
	union float_byteview fbv;
	for (int i = 0; i < 4; i++) {
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	91 05       	cpc	r25, r1
    12ac:	d1 f7       	brne	.-12     	; 0x12a2 <float_from_wire+0x16>
		fbv.u8s[i] = w[i];
	}
	return fbv.val;
    12ae:	59 81       	ldd	r21, Y+1	; 0x01
    12b0:	4a 81       	ldd	r20, Y+2	; 0x02
    12b2:	3b 81       	ldd	r19, Y+3	; 0x03
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	85 2f       	mov	r24, r21
    12b8:	94 2f       	mov	r25, r20
    12ba:	a3 2f       	mov	r26, r19
    12bc:	b2 2f       	mov	r27, r18
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <setup_timer>:
		256		61.5
		1024	14.625
	*/
	
	/* set timer 1 to CTC mode */
	TCCR0A |= (1<<WGM01);
    12d0:	84 b5       	in	r24, 0x24	; 36
    12d2:	82 60       	ori	r24, 0x02	; 2
    12d4:	84 bd       	out	0x24, r24	; 36
	/* enable interrupts for */
	TIMSK0 |= (1<<OCIE0A);
    12d6:	ee e6       	ldi	r30, 0x6E	; 110
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	82 60       	ori	r24, 0x02	; 2
    12de:	80 83       	st	Z, r24
	
	/* set CTC value to 1ms */
	OCR0A = 249; /* 249;*/
    12e0:	89 ef       	ldi	r24, 0xF9	; 249
    12e2:	87 bd       	out	0x27, r24	; 39
	
	/* set timer 1 to a prescaler of 64 */
	TCCR0B |= (1<<CS01)|(1<<CS00);
    12e4:	85 b5       	in	r24, 0x25	; 37
    12e6:	83 60       	ori	r24, 0x03	; 3
    12e8:	85 bd       	out	0x25, r24	; 37
	
	
	//when timer hits 249 OCF1A is set. to clear it set it to 1
	/* 16000000 / 1024 = 250 ticks in a second, set overflow check to 249 */
	
}
    12ea:	08 95       	ret

000012ec <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
	cur_millis++;
    12fe:	80 91 44 04 	lds	r24, 0x0444
    1302:	90 91 45 04 	lds	r25, 0x0445
    1306:	a0 91 46 04 	lds	r26, 0x0446
    130a:	b0 91 47 04 	lds	r27, 0x0447
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	a1 1d       	adc	r26, r1
    1312:	b1 1d       	adc	r27, r1
    1314:	80 93 44 04 	sts	0x0444, r24
    1318:	90 93 45 04 	sts	0x0445, r25
    131c:	a0 93 46 04 	sts	0x0446, r26
    1320:	b0 93 47 04 	sts	0x0447, r27
}
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <millis>:

ms_time_t millis(void)
{
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
	ms_time_t ms = cur_millis;
    133a:	00 91 44 04 	lds	r16, 0x0444
    133e:	10 91 45 04 	lds	r17, 0x0445
    1342:	20 91 46 04 	lds	r18, 0x0446
    1346:	30 91 47 04 	lds	r19, 0x0447
	return ms;
}
    134a:	b8 01       	movw	r22, r16
    134c:	c9 01       	movw	r24, r18
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <host_millis>:

TIME_t host_millis(void) {
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
	return time_oset + cur_millis;
    1362:	00 91 44 04 	lds	r16, 0x0444
    1366:	10 91 45 04 	lds	r17, 0x0445
    136a:	20 91 46 04 	lds	r18, 0x0446
    136e:	30 91 47 04 	lds	r19, 0x0447
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	ba 01       	movw	r22, r20
    1378:	f0 90 3c 04 	lds	r15, 0x043C
    137c:	b0 91 3d 04 	lds	r27, 0x043D
    1380:	a0 91 3e 04 	lds	r26, 0x043E
    1384:	d0 90 3f 04 	lds	r13, 0x043F
    1388:	80 91 40 04 	lds	r24, 0x0440
    138c:	90 91 41 04 	lds	r25, 0x0441
    1390:	e0 90 42 04 	lds	r14, 0x0442
    1394:	e0 91 43 04 	lds	r30, 0x0443
    1398:	f0 0e       	add	r15, r16
    139a:	d1 e0       	ldi	r29, 0x01	; 1
    139c:	f0 16       	cp	r15, r16
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <host_millis+0x4e>
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
    13a2:	b1 0f       	add	r27, r17
    13a4:	c1 e0       	ldi	r28, 0x01	; 1
    13a6:	b1 17       	cp	r27, r17
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <host_millis+0x58>
    13aa:	c0 e0       	ldi	r28, 0x00	; 0
    13ac:	db 0f       	add	r29, r27
    13ae:	f1 e0       	ldi	r31, 0x01	; 1
    13b0:	db 17       	cp	r29, r27
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <host_millis+0x62>
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	cf 2b       	or	r28, r31
    13b8:	a2 0f       	add	r26, r18
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	a2 17       	cp	r26, r18
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <host_millis+0x6e>
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ca 0f       	add	r28, r26
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	ca 17       	cp	r28, r26
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <host_millis+0x78>
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	bf 2b       	or	r27, r31
    13ce:	f3 2f       	mov	r31, r19
    13d0:	fd 0d       	add	r31, r13
    13d2:	a1 e0       	ldi	r26, 0x01	; 1
    13d4:	f3 17       	cp	r31, r19
    13d6:	08 f0       	brcs	.+2      	; 0x13da <host_millis+0x86>
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	bf 0f       	add	r27, r31
    13dc:	dd 24       	eor	r13, r13
    13de:	d3 94       	inc	r13
    13e0:	bf 17       	cp	r27, r31
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <host_millis+0x92>
    13e4:	dd 24       	eor	r13, r13
    13e6:	ad 29       	or	r26, r13
    13e8:	f1 e0       	ldi	r31, 0x01	; 1
    13ea:	84 17       	cp	r24, r20
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <host_millis+0x9c>
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	a8 0f       	add	r26, r24
    13f2:	dd 24       	eor	r13, r13
    13f4:	d3 94       	inc	r13
    13f6:	a8 17       	cp	r26, r24
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <host_millis+0xa8>
    13fa:	dd 24       	eor	r13, r13
    13fc:	fd 29       	or	r31, r13
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	95 17       	cp	r25, r21
    1402:	08 f0       	brcs	.+2      	; 0x1406 <host_millis+0xb2>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	f9 0f       	add	r31, r25
    1408:	dd 24       	eor	r13, r13
    140a:	d3 94       	inc	r13
    140c:	f9 17       	cp	r31, r25
    140e:	08 f0       	brcs	.+2      	; 0x1412 <host_millis+0xbe>
    1410:	dd 24       	eor	r13, r13
    1412:	8d 29       	or	r24, r13
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	e6 16       	cp	r14, r22
    1418:	08 f0       	brcs	.+2      	; 0x141c <host_millis+0xc8>
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	8e 0d       	add	r24, r14
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	8e 15       	cp	r24, r14
    1422:	08 f0       	brcs	.+2      	; 0x1426 <host_millis+0xd2>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	92 2b       	or	r25, r18
}
    1428:	2f 2d       	mov	r18, r15
    142a:	3d 2f       	mov	r19, r29
    142c:	4c 2f       	mov	r20, r28
    142e:	5b 2f       	mov	r21, r27
    1430:	6a 2f       	mov	r22, r26
    1432:	7f 2f       	mov	r23, r31
    1434:	9e 0f       	add	r25, r30
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	08 95       	ret

00001446 <set_time_oset>:

void set_time_oset(TIME_t t)
{
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	f9 01       	movw	r30, r18
    1456:	da 01       	movw	r26, r20
    1458:	eb 01       	movw	r28, r22
	ms_time_t cur = cur_millis;
    145a:	00 91 44 04 	lds	r16, 0x0444
    145e:	10 91 45 04 	lds	r17, 0x0445
    1462:	20 91 46 04 	lds	r18, 0x0446
    1466:	30 91 47 04 	lds	r19, 0x0447
	time_oset = t - cur;
    146a:	de 2e       	mov	r13, r30
    146c:	d0 1a       	sub	r13, r16
    146e:	ee 24       	eor	r14, r14
    1470:	e3 94       	inc	r14
    1472:	ed 15       	cp	r30, r13
    1474:	08 f0       	brcs	.+2      	; 0x1478 <set_time_oset+0x32>
    1476:	ee 24       	eor	r14, r14
    1478:	ef 2f       	mov	r30, r31
    147a:	e1 1b       	sub	r30, r17
    147c:	ff 24       	eor	r15, r15
    147e:	f3 94       	inc	r15
    1480:	fe 17       	cp	r31, r30
    1482:	08 f0       	brcs	.+2      	; 0x1486 <set_time_oset+0x40>
    1484:	ff 24       	eor	r15, r15
    1486:	fe 2f       	mov	r31, r30
    1488:	fe 19       	sub	r31, r14
    148a:	ef 2e       	mov	r14, r31
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	ee 15       	cp	r30, r14
    1490:	08 f0       	brcs	.+2      	; 0x1494 <set_time_oset+0x4e>
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	ff 2a       	or	r15, r31
    1496:	fa 2f       	mov	r31, r26
    1498:	f2 1b       	sub	r31, r18
    149a:	e1 e0       	ldi	r30, 0x01	; 1
    149c:	af 17       	cp	r26, r31
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <set_time_oset+0x5c>
    14a0:	e0 e0       	ldi	r30, 0x00	; 0
    14a2:	af 2f       	mov	r26, r31
    14a4:	af 19       	sub	r26, r15
    14a6:	ff 24       	eor	r15, r15
    14a8:	f3 94       	inc	r15
    14aa:	fa 17       	cp	r31, r26
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <set_time_oset+0x6a>
    14ae:	ff 24       	eor	r15, r15
    14b0:	ef 29       	or	r30, r15
    14b2:	fb 2f       	mov	r31, r27
    14b4:	f3 1b       	sub	r31, r19
    14b6:	3f 2f       	mov	r19, r31
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	bf 17       	cp	r27, r31
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <set_time_oset+0x7a>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	53 2f       	mov	r21, r19
    14c2:	5e 1b       	sub	r21, r30
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	35 17       	cp	r19, r21
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <set_time_oset+0x86>
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	24 2b       	or	r18, r20
    14ce:	4c 2f       	mov	r20, r28
    14d0:	42 1b       	sub	r20, r18
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	c4 17       	cp	r28, r20
    14d6:	08 f0       	brcs	.+2      	; 0x14da <set_time_oset+0x94>
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3d 2f       	mov	r19, r29
    14dc:	32 1b       	sub	r19, r18
    14de:	21 e0       	ldi	r18, 0x01	; 1
    14e0:	d3 17       	cp	r29, r19
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <set_time_oset+0xa0>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	68 2f       	mov	r22, r24
    14e8:	62 1b       	sub	r22, r18
    14ea:	26 2f       	mov	r18, r22
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	82 17       	cp	r24, r18
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <set_time_oset+0xae>
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	96 1b       	sub	r25, r22
    14f6:	d0 92 3c 04 	sts	0x043C, r13
    14fa:	e0 92 3d 04 	sts	0x043D, r14
    14fe:	a0 93 3e 04 	sts	0x043E, r26
    1502:	50 93 3f 04 	sts	0x043F, r21
    1506:	40 93 40 04 	sts	0x0440, r20
    150a:	30 93 41 04 	sts	0x0441, r19
    150e:	20 93 42 04 	sts	0x0442, r18
    1512:	90 93 43 04 	sts	0x0443, r25
}
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	08 95       	ret

00001526 <time_to_wire>:
union ui64_byteview {
	uint64_t u64_val;
	uint8_t u8s[8];
};
void time_to_wire(TIME_t ms, uint8_t w[])
{
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	28 97       	sbiw	r28, 0x08	; 8
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
	union ui64_byteview val;
	val.u64_val = ms;
    153e:	29 83       	std	Y+1, r18	; 0x01
    1540:	3a 83       	std	Y+2, r19	; 0x02
    1542:	4b 83       	std	Y+3, r20	; 0x03
    1544:	5c 83       	std	Y+4, r21	; 0x04
    1546:	6d 83       	std	Y+5, r22	; 0x05
    1548:	7e 83       	std	Y+6, r23	; 0x06
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	98 87       	std	Y+8, r25	; 0x08
    154e:	de 01       	movw	r26, r28
    1550:	19 96       	adiw	r26, 0x09	; 9
    1552:	f8 01       	movw	r30, r16

union ui64_byteview {
	uint64_t u64_val;
	uint8_t u8s[8];
};
void time_to_wire(TIME_t ms, uint8_t w[])
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
{
	union ui64_byteview val;
	val.u64_val = ms;
	for (int i = 0; i < 8; i++) {
		w[i] = val.u8s[7-i];
    1558:	2e 91       	ld	r18, -X
    155a:	21 93       	st	Z+, r18
};
void time_to_wire(TIME_t ms, uint8_t w[])
{
	union ui64_byteview val;
	val.u64_val = ms;
	for (int i = 0; i < 8; i++) {
    155c:	a8 17       	cp	r26, r24
    155e:	b9 07       	cpc	r27, r25
    1560:	d9 f7       	brne	.-10     	; 0x1558 <time_to_wire+0x32>
		w[i] = val.u8s[7-i];
	}
}
    1562:	28 96       	adiw	r28, 0x08	; 8
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <time_from_wire>:

TIME_t time_from_wire(const uint8_t w[])
{
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	28 97       	sbiw	r28, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < 8; i++) {
		w[i] = val.u8s[7-i];
	}
}

TIME_t time_from_wire(const uint8_t w[])
    158c:	dc 01       	movw	r26, r24
    158e:	18 96       	adiw	r26, 0x08	; 8
{
	/* little-endian */
	union ui64_byteview val;
	for (int i = 0; i < 8; i++) {
    1590:	fe 01       	movw	r30, r28
    1592:	31 96       	adiw	r30, 0x01	; 1
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
		val.u8s[i] = w[7-i];
    1598:	2e 91       	ld	r18, -X
    159a:	21 93       	st	Z+, r18

TIME_t time_from_wire(const uint8_t w[])
{
	/* little-endian */
	union ui64_byteview val;
	for (int i = 0; i < 8; i++) {
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	91 05       	cpc	r25, r1
    15a2:	d1 f7       	brne	.-12     	; 0x1598 <time_from_wire+0x20>
		val.u8s[i] = w[7-i];
	}
	
	return val.u64_val;
    15a4:	29 81       	ldd	r18, Y+1	; 0x01
    15a6:	3a 81       	ldd	r19, Y+2	; 0x02
    15a8:	4b 81       	ldd	r20, Y+3	; 0x03
    15aa:	5c 81       	ldd	r21, Y+4	; 0x04
    15ac:	6d 81       	ldd	r22, Y+5	; 0x05
    15ae:	7e 81       	ldd	r23, Y+6	; 0x06
    15b0:	8f 81       	ldd	r24, Y+7	; 0x07
    15b2:	98 85       	ldd	r25, Y+8	; 0x08
    15b4:	28 96       	adiw	r28, 0x08	; 8
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <rfid_sendcommand_readtags>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    15c6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    15ca:	85 ff       	sbrs	r24, 5
    15cc:	fc cf       	rjmp	.-8      	; 0x15c6 <rfid_sendcommand_readtags>
				UDR1 = DataByte;
    15ce:	83 e4       	ldi	r24, 0x43	; 67
    15d0:	80 93 ce 00 	sts	0x00CE, r24
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    15d4:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    15d8:	85 ff       	sbrs	r24, 5
    15da:	fc cf       	rjmp	.-8      	; 0x15d4 <rfid_sendcommand_readtags+0xe>
				UDR1 = DataByte;
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	80 93 ce 00 	sts	0x00CE, r24
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    15e2:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    15e6:	85 ff       	sbrs	r24, 5
    15e8:	fc cf       	rjmp	.-8      	; 0x15e2 <rfid_sendcommand_readtags+0x1c>
				UDR1 = DataByte;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 ce 00 	sts	0x00CE, r24
void rfid_sendcommand_readtags(void)
{
	Serial_SendByte(0x43);
	Serial_SendByte(0x03);
	Serial_SendByte(0x01);
}
    15f0:	08 95       	ret

000015f2 <classify_tag>:
};



bool classify_tag(const unsigned char* tagbuf, unsigned char* out_len, const char** out_str)
{
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	5c 01       	movw	r10, r24
    1614:	3b 01       	movw	r6, r22
    1616:	2a 01       	movw	r4, r20
	int c;
	ms_time_t now = millis();
    1618:	8e de       	rcall	.-740    	; 0x1336 <millis>
    161a:	6b 01       	movw	r12, r22
    161c:	7c 01       	movw	r14, r24
    161e:	00 e0       	ldi	r16, 0x00	; 0
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	24 e1       	ldi	r18, 0x14	; 20
		c = memcmp((void*)tagbuf,(void*) tags[i].tag,TAG_LEN);
    1624:	82 2e       	mov	r8, r18
    1626:	91 2c       	mov	r9, r1
    1628:	08 9d       	mul	r16, r8
    162a:	e0 01       	movw	r28, r0
    162c:	09 9d       	mul	r16, r9
    162e:	d0 0d       	add	r29, r0
    1630:	18 9d       	mul	r17, r8
    1632:	d0 0d       	add	r29, r0
    1634:	11 24       	eor	r1, r1
    1636:	cc 54       	subi	r28, 0x4C	; 76
    1638:	de 4f       	sbci	r29, 0xFE	; 254
    163a:	c5 01       	movw	r24, r10
    163c:	be 01       	movw	r22, r28
    163e:	4c e0       	ldi	r20, 0x0C	; 12
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	0e 94 63 14 	call	0x28c6	; 0x28c6 <memcmp>
    1646:	00 97       	sbiw	r24, 0x00	; 0
		if (!c) {
    1648:	21 f5       	brne	.+72     	; 0x1692 <classify_tag+0xa0>
    164a:	88 89       	ldd	r24, Y+16	; 0x10
			if ((now-tags[i].last_send_time) > DEBOUNCE_MS) {
    164c:	99 89       	ldd	r25, Y+17	; 0x11
    164e:	aa 89       	ldd	r26, Y+18	; 0x12
    1650:	bb 89       	ldd	r27, Y+19	; 0x13
    1652:	a7 01       	movw	r20, r14
    1654:	96 01       	movw	r18, r12
    1656:	28 1b       	sub	r18, r24
    1658:	39 0b       	sbc	r19, r25
    165a:	4a 0b       	sbc	r20, r26
    165c:	5b 0b       	sbc	r21, r27
    165e:	da 01       	movw	r26, r20
    1660:	c9 01       	movw	r24, r18
    1662:	c8 8a       	std	Y+16, r12	; 0x10
				tags[i].last_send_time = now;
    1664:	d9 8a       	std	Y+17, r13	; 0x11
    1666:	ea 8a       	std	Y+18, r14	; 0x12
    1668:	fb 8a       	std	Y+19, r15	; 0x13
    166a:	89 38       	cpi	r24, 0x89	; 137
	int c;
	ms_time_t now = millis();
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
		c = memcmp((void*)tagbuf,(void*) tags[i].tag,TAG_LEN);
		if (!c) {
			if ((now-tags[i].last_send_time) > DEBOUNCE_MS) {
    166c:	33 e1       	ldi	r19, 0x13	; 19
    166e:	93 07       	cpc	r25, r19
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	a3 07       	cpc	r26, r19
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	b3 07       	cpc	r27, r19
    1678:	50 f0       	brcs	.+20     	; 0x168e <classify_tag+0x9c>
    167a:	ec 85       	ldd	r30, Y+12	; 0x0c
				tags[i].last_send_time = now;
				*out_len = pgm_read_byte(tags[i].msglen);
    167c:	fd 85       	ldd	r31, Y+13	; 0x0d
    167e:	e4 91       	lpm	r30, Z
    1680:	d3 01       	movw	r26, r6
    1682:	ec 93       	st	X, r30
    1684:	8e 85       	ldd	r24, Y+14	; 0x0e
				*out_str = tags[i].msg;
    1686:	9f 85       	ldd	r25, Y+15	; 0x0f
    1688:	f2 01       	movw	r30, r4
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
    168e:	81 e0       	ldi	r24, 0x01	; 1
				return 1; // str not null, true
			} else {
				tags[i].last_send_time = now;
				return 1;
    1690:	06 c0       	rjmp	.+12     	; 0x169e <classify_tag+0xac>
    1692:	0f 5f       	subi	r16, 0xFF	; 255

bool classify_tag(const unsigned char* tagbuf, unsigned char* out_len, const char** out_str)
{
	int c;
	ms_time_t now = millis();
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	0f 30       	cpi	r16, 0x0F	; 15
    1698:	11 05       	cpc	r17, r1
    169a:	31 f6       	brne	.-116    	; 0x1628 <classify_tag+0x36>
    169c:	80 e0       	ldi	r24, 0x00	; 0
				tags[i].last_send_time = now;
				return 1;
			}
		}
	}
	return 0;
    169e:	df 91       	pop	r29
}
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	08 95       	ret

000016c0 <rfid_enable_buzzer>:
    16c0:	3a de       	rcall	.-908    	; 0x1336 <millis>
	
}

void rfid_enable_buzzer(void)
{
	last_buzzer_enable = millis();
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	80 93 ec 05 	sts	0x05EC, r24
    16ca:	90 93 ed 05 	sts	0x05ED, r25
    16ce:	a0 93 ee 05 	sts	0x05EE, r26
    16d2:	b0 93 ef 05 	sts	0x05EF, r27
    16d6:	2f 9a       	sbi	0x05, 7	; 5
	PORTB |= (1<<PB7);
    16d8:	08 95       	ret

000016da <heat_enable>:
#include "EscharotomyArm.h"

volatile uint8_t pulse_enabled;
void heat_enable(void)
{
	PORTB |= (1<<PB7);
    16da:	2f 9a       	sbi	0x05, 7	; 5
}
    16dc:	08 95       	ret

000016de <pulse_stop>:
	last_loop_start = millis();
	pulse_enabled = 1;
}
void pulse_stop(void)
{
	pulse_enabled = 0;
    16de:	10 92 30 06 	sts	0x0630, r1
}
    16e2:	08 95       	ret

000016e4 <pulse_set_delay>:
void pulse_set_delay(int delay)
{
	pulse_enabled = 1;
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	20 93 30 06 	sts	0x0630, r18
	if (delay > PULSE_NUM_ELTS) {
    16ea:	85 34       	cpi	r24, 0x45	; 69
    16ec:	91 05       	cpc	r25, r1
    16ee:	14 f4       	brge	.+4      	; 0x16f4 <pulse_set_delay+0x10>
		pulse_delay_ms = delay;
	} else {
		pulse_delay_ms = PULSE_NUM_ELTS; // FIXME 50% seems a good choice
    16f0:	84 e4       	ldi	r24, 0x44	; 68
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	90 93 e5 02 	sts	0x02E5, r25
    16f8:	80 93 e4 02 	sts	0x02E4, r24
    16fc:	08 95       	ret

000016fe <ram_prog_cmp>:
			return -1;
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
			return 1;
		}
	}
	return 0;
    16fe:	dc 01       	movw	r26, r24
}


int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0a c0       	rjmp	.+20     	; 0x171a <ram_prog_cmp+0x1c>
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
    1706:	2d 91       	ld	r18, X+
	*/
	
}


int ram_prog_cmp(char* ram, char* prog, int n)
    1708:	fb 01       	movw	r30, r22
    170a:	e8 0f       	add	r30, r24
    170c:	f9 1f       	adc	r31, r25
{
	for (int i = 0; i < n; i++) {
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
    170e:	e4 91       	lpm	r30, Z
    1710:	2e 17       	cp	r18, r30
    1712:	48 f0       	brcs	.+18     	; 0x1726 <ram_prog_cmp+0x28>
			return -1;
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
    1714:	e2 17       	cp	r30, r18
    1716:	50 f0       	brcs	.+20     	; 0x172c <ram_prog_cmp+0x2e>
}


int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	84 17       	cp	r24, r20
    171c:	95 07       	cpc	r25, r21
    171e:	9c f3       	brlt	.-26     	; 0x1706 <ram_prog_cmp+0x8>
			return -1;
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
			return 1;
		}
	}
	return 0;
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	08 95       	ret

int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
			return -1;
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	08 95       	ret
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
			return 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
    1730:	08 95       	ret

00001732 <flow_sensor_handle_PROX>:

void flow_sensor_handle_PROX(char* data)
{
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ec 01       	movw	r28, r24
#define AS_ACT_CMP_CASE(s) if (!ram_prog_cmp(data,(char*)&pstr_rcv_##s,MIN(data[0],pstr_rcv_##s .len))) {last_flowmsg_rcvd = el_##s;return;} 
	
	FLOW_ACT_MESSAGE_TABLE(AS_ACT_CMP_CASE);
    173c:	18 81       	ld	r17, Y
    173e:	41 2f       	mov	r20, r17
    1740:	1a 30       	cpi	r17, 0x0A	; 10
    1742:	08 f0       	brcs	.+2      	; 0x1746 <flow_sensor_handle_PROX+0x14>
    1744:	49 e0       	ldi	r20, 0x09	; 9
    1746:	ce 01       	movw	r24, r28
    1748:	62 e5       	ldi	r22, 0x52	; 82
    174a:	75 e0       	ldi	r23, 0x05	; 5
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	d7 df       	rcall	.-82     	; 0x16fe <ram_prog_cmp>
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	11 f4       	brne	.+4      	; 0x1758 <flow_sensor_handle_PROX+0x26>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	4f c0       	rjmp	.+158    	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    1758:	01 2f       	mov	r16, r17
    175a:	19 30       	cpi	r17, 0x09	; 9
    175c:	08 f0       	brcs	.+2      	; 0x1760 <flow_sensor_handle_PROX+0x2e>
    175e:	08 e0       	ldi	r16, 0x08	; 8
    1760:	ce 01       	movw	r24, r28
    1762:	68 e4       	ldi	r22, 0x48	; 72
    1764:	75 e0       	ldi	r23, 0x05	; 5
    1766:	40 2f       	mov	r20, r16
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	c9 df       	rcall	.-110    	; 0x16fe <ram_prog_cmp>
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	11 f4       	brne	.+4      	; 0x1774 <flow_sensor_handle_PROX+0x42>
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	41 c0       	rjmp	.+130    	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    1774:	ce 01       	movw	r24, r28
    1776:	6e e3       	ldi	r22, 0x3E	; 62
    1778:	75 e0       	ldi	r23, 0x05	; 5
    177a:	40 2f       	mov	r20, r16
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	bf df       	rcall	.-130    	; 0x16fe <ram_prog_cmp>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	11 f4       	brne	.+4      	; 0x1788 <flow_sensor_handle_PROX+0x56>
    1784:	83 e0       	ldi	r24, 0x03	; 3
    1786:	37 c0       	rjmp	.+110    	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    1788:	ce 01       	movw	r24, r28
    178a:	64 e3       	ldi	r22, 0x34	; 52
    178c:	75 e0       	ldi	r23, 0x05	; 5
    178e:	40 2f       	mov	r20, r16
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	b5 df       	rcall	.-150    	; 0x16fe <ram_prog_cmp>
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	11 f4       	brne	.+4      	; 0x179c <flow_sensor_handle_PROX+0x6a>
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	2d c0       	rjmp	.+90     	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    179c:	41 2f       	mov	r20, r17
    179e:	1c 30       	cpi	r17, 0x0C	; 12
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <flow_sensor_handle_PROX+0x72>
    17a2:	4b e0       	ldi	r20, 0x0B	; 11
    17a4:	ce 01       	movw	r24, r28
    17a6:	67 e2       	ldi	r22, 0x27	; 39
    17a8:	75 e0       	ldi	r23, 0x05	; 5
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	a8 df       	rcall	.-176    	; 0x16fe <ram_prog_cmp>
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <flow_sensor_handle_PROX+0x84>
    17b2:	85 e0       	ldi	r24, 0x05	; 5
    17b4:	20 c0       	rjmp	.+64     	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    17b6:	ce 01       	movw	r24, r28
    17b8:	6d e1       	ldi	r22, 0x1D	; 29
    17ba:	75 e0       	ldi	r23, 0x05	; 5
    17bc:	40 2f       	mov	r20, r16
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	9e df       	rcall	.-196    	; 0x16fe <ram_prog_cmp>
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	11 f4       	brne	.+4      	; 0x17ca <flow_sensor_handle_PROX+0x98>
    17c6:	86 e0       	ldi	r24, 0x06	; 6
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    17ca:	ce 01       	movw	r24, r28
    17cc:	63 e1       	ldi	r22, 0x13	; 19
    17ce:	75 e0       	ldi	r23, 0x05	; 5
    17d0:	40 2f       	mov	r20, r16
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	94 df       	rcall	.-216    	; 0x16fe <ram_prog_cmp>
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	11 f4       	brne	.+4      	; 0x17de <flow_sensor_handle_PROX+0xac>
    17da:	87 e0       	ldi	r24, 0x07	; 7
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <flow_sensor_handle_PROX+0xc4>
    17de:	41 2f       	mov	r20, r17
    17e0:	14 30       	cpi	r17, 0x04	; 4
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <flow_sensor_handle_PROX+0xb4>
    17e4:	43 e0       	ldi	r20, 0x03	; 3
    17e6:	ce 01       	movw	r24, r28
    17e8:	6e e0       	ldi	r22, 0x0E	; 14
    17ea:	75 e0       	ldi	r23, 0x05	; 5
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	87 df       	rcall	.-242    	; 0x16fe <ram_prog_cmp>
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	19 f4       	brne	.+6      	; 0x17fa <flow_sensor_handle_PROX+0xc8>
    17f4:	88 e0       	ldi	r24, 0x08	; 8
    17f6:	80 93 48 04 	sts	0x0448, r24
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <flow_sensor_handle_ACT>:
    1804:	6f ef       	ldi	r22, 0xFF	; 255
    1806:	74 e0       	ldi	r23, 0x04	; 4
    1808:	4d e0       	ldi	r20, 0x0D	; 13
	//determine which string it is
	
}
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	78 df       	rcall	.-272    	; 0x16fe <ram_prog_cmp>
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	19 f4       	brne	.+6      	; 0x1818 <flow_sensor_handle_ACT+0x14>
    1812:	81 e0       	ldi	r24, 0x01	; 1
DEFINE_PSTRING(iv_connected_str, "ARM_R_IV_CATH");
void flow_sensor_handle_ACT(char* data)
{
	//if ARM_R_IV_CATH is received, begin acknowledging IVs
	if (!ram_prog_cmp(data,(char*)&iv_connected_str,iv_connected_str.len)) {
		iv_connected = 1;
    1814:	80 93 35 06 	sts	0x0635, r24
    1818:	08 95       	ret

0000181a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    182e:	7b 01       	movw	r14, r22
    1830:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1832:	f0 d1       	rcall	.+992    	; 0x1c14 <Endpoint_WaitUntilReady>
    1834:	18 2f       	mov	r17, r24
    1836:	88 23       	and	r24, r24
    1838:	a9 f5       	brne	.+106    	; 0x18a4 <Endpoint_Write_Stream_LE+0x8a>
    183a:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    183c:	d1 04       	cpc	r13, r1
    183e:	39 f0       	breq	.+14     	; 0x184e <Endpoint_Write_Stream_LE+0x34>
    1840:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    1842:	20 81       	ld	r18, Z
    1844:	31 81       	ldd	r19, Z+1	; 0x01
    1846:	e2 1a       	sub	r14, r18
    1848:	f3 0a       	sbc	r15, r19
    184a:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    184c:	d3 1f       	adc	r29, r19
    184e:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1850:	bb 24       	eor	r11, r11
    1852:	23 c0       	rjmp	.+70     	; 0x189a <Endpoint_Write_Stream_LE+0x80>
    1854:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1858:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <Endpoint_Write_Stream_LE+0x6e>
    185c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1860:	8e 77       	andi	r24, 0x7E	; 126
    1862:	80 93 e8 00 	sts	0x00E8, r24
    1866:	98 d4       	rcall	.+2352   	; 0x2198 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1868:	c1 14       	cp	r12, r1
    186a:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    186c:	49 f0       	breq	.+18     	; 0x1880 <Endpoint_Write_Stream_LE+0x66>
    186e:	f6 01       	movw	r30, r12
    1870:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	8a 0d       	add	r24, r10
    1876:	9b 1d       	adc	r25, r11
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	15 e0       	ldi	r17, 0x05	; 5
    187e:	12 c0       	rjmp	.+36     	; 0x18a4 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1880:	c9 d1       	rcall	.+914    	; 0x1c14 <Endpoint_WaitUntilReady>
    1882:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1884:	51 f0       	breq	.+20     	; 0x189a <Endpoint_Write_Stream_LE+0x80>
    1886:	0d c0       	rjmp	.+26     	; 0x18a2 <Endpoint_Write_Stream_LE+0x88>
    1888:	89 91       	ld	r24, Y+
    188a:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    188e:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1890:	e1 08       	sbc	r14, r1
    1892:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1894:	08 94       	sec
    1896:	a1 1c       	adc	r10, r1
    1898:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    189a:	e1 14       	cp	r14, r1
    189c:	f1 04       	cpc	r15, r1
    189e:	d1 f6       	brne	.-76     	; 0x1854 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <Endpoint_Write_Stream_LE+0x8a>
    18a2:	18 2f       	mov	r17, r24
    18a4:	81 2f       	mov	r24, r17
    18a6:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18a8:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    18aa:	1f 91       	pop	r17
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	08 95       	ret

000018ba <Endpoint_Write_Control_Stream_LE>:
    18ba:	40 91 43 06 	lds	r20, 0x0643
    18be:	50 91 44 06 	lds	r21, 0x0644
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18c2:	46 17       	cp	r20, r22
    18c4:	57 07       	cpc	r21, r23
    18c6:	20 f4       	brcc	.+8      	; 0x18d0 <Endpoint_Write_Control_Stream_LE+0x16>
    18c8:	ba 01       	movw	r22, r20
    18ca:	fc 01       	movw	r30, r24
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	3d c0       	rjmp	.+122    	; 0x194a <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18d0:	61 15       	cp	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	d1 f7       	brne	.-12     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d6:	40 91 e8 00 	lds	r20, 0x00E8
    18da:	4e 77       	andi	r20, 0x7E	; 126
    18dc:	40 93 e8 00 	sts	0x00E8, r20
    18e0:	f4 cf       	rjmp	.-24     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e2:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e6:	88 23       	and	r24, r24
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x32>
    18ea:	47 c0       	rjmp	.+142    	; 0x197a <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ec:	85 30       	cpi	r24, 0x05	; 5
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <Endpoint_Write_Control_Stream_LE+0x38>
    18f0:	46 c0       	rjmp	.+140    	; 0x197e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f6:	83 fd       	sbrc	r24, 3
    18f8:	3e c0       	rjmp	.+124    	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18fe:	82 fd       	sbrc	r24, 2
    1900:	34 c0       	rjmp	.+104    	; 0x196a <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1902:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1906:	80 ff       	sbrs	r24, 0
    1908:	20 c0       	rjmp	.+64     	; 0x194a <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    190a:	90 91 f3 00 	lds	r25, 0x00F3
    190e:	80 91 f2 00 	lds	r24, 0x00F2
    1912:	39 2f       	mov	r19, r25
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	82 2b       	or	r24, r18
    191a:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    191c:	06 c0       	rjmp	.+12     	; 0x192a <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    191e:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1920:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1924:	61 50       	subi	r22, 0x01	; 1
    1926:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1928:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    192a:	61 15       	cp	r22, r1
    192c:	71 05       	cpc	r23, r1
    192e:	19 f0       	breq	.+6      	; 0x1936 <Endpoint_Write_Control_Stream_LE+0x7c>
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	91 05       	cpc	r25, r1
    1934:	a0 f3       	brcs	.-24     	; 0x191e <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	91 05       	cpc	r25, r1
    193c:	09 f0       	breq	.+2      	; 0x1940 <Endpoint_Write_Control_Stream_LE+0x86>
    193e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1940:	80 91 e8 00 	lds	r24, 0x00E8
    1944:	8e 77       	andi	r24, 0x7E	; 126
    1946:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    194a:	61 15       	cp	r22, r1
    194c:	71 05       	cpc	r23, r1
    194e:	49 f6       	brne	.-110    	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x28>
    1950:	44 23       	and	r20, r20
    1952:	39 f6       	brne	.-114    	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x28>
    1954:	0a c0       	rjmp	.+20     	; 0x196a <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1956:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195a:	88 23       	and	r24, r24
    195c:	71 f0       	breq	.+28     	; 0x197a <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    195e:	85 30       	cpi	r24, 0x05	; 5
    1960:	71 f0       	breq	.+28     	; 0x197e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1962:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1966:	83 fd       	sbrc	r24, 3
    1968:	0c c0       	rjmp	.+24     	; 0x1982 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    196a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    196e:	82 ff       	sbrs	r24, 2
    1970:	f2 cf       	rjmp	.-28     	; 0x1956 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1982:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1984:	08 95       	ret

00001986 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	29 f4       	brne	.+10     	; 0x1996 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    198c:	40 91 e8 00 	lds	r20, 0x00E8
    1990:	4b 77       	andi	r20, 0x7B	; 123
    1992:	40 93 e8 00 	sts	0x00E8, r20

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1996:	58 2f       	mov	r21, r24
    1998:	49 2f       	mov	r20, r25
    199a:	2b c0       	rjmp	.+86     	; 0x19f2 <Endpoint_Read_Control_Stream_LE+0x6c>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    199c:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19a0:	88 23       	and	r24, r24
    19a2:	d9 f1       	breq	.+118    	; 0x1a1a <Endpoint_Read_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	a9 f1       	breq	.+106    	; 0x1a12 <Endpoint_Read_Control_Stream_LE+0x8c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19ac:	83 fd       	sbrc	r24, 3
    19ae:	33 c0       	rjmp	.+102    	; 0x1a16 <Endpoint_Read_Control_Stream_LE+0x90>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    19b4:	82 ff       	sbrs	r24, 2
    19b6:	f2 cf       	rjmp	.-28     	; 0x199c <Endpoint_Read_Control_Stream_LE+0x16>
    19b8:	e5 2f       	mov	r30, r21
    19ba:	f4 2f       	mov	r31, r20
    19bc:	08 c0       	rjmp	.+16     	; 0x19ce <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    19be:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19c2:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19c4:	5e 2f       	mov	r21, r30
    19c6:	4f 2f       	mov	r20, r31
				Length--;
    19c8:	61 50       	subi	r22, 0x01	; 1
    19ca:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    19cc:	69 f0       	breq	.+26     	; 0x19e8 <Endpoint_Read_Control_Stream_LE+0x62>
    19ce:	5e 2f       	mov	r21, r30
    19d0:	4f 2f       	mov	r20, r31
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19d2:	90 91 f3 00 	lds	r25, 0x00F3
    19d6:	80 91 f2 00 	lds	r24, 0x00F2
    19da:	39 2f       	mov	r19, r25
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	82 2b       	or	r24, r18
    19e2:	93 2b       	or	r25, r19
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	59 f7       	brne	.-42     	; 0x19be <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19e8:	80 91 e8 00 	lds	r24, 0x00E8
    19ec:	8b 77       	andi	r24, 0x7B	; 123
    19ee:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    19f2:	61 15       	cp	r22, r1
    19f4:	71 05       	cpc	r23, r1
    19f6:	91 f6       	brne	.-92     	; 0x199c <Endpoint_Read_Control_Stream_LE+0x16>
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <Endpoint_Read_Control_Stream_LE+0x80>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19fa:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19fe:	88 23       	and	r24, r24
    1a00:	61 f0       	breq	.+24     	; 0x1a1a <Endpoint_Read_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a02:	85 30       	cpi	r24, 0x05	; 5
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <Endpoint_Read_Control_Stream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a06:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1a0a:	80 ff       	sbrs	r24, 0
    1a0c:	f6 cf       	rjmp	.-20     	; 0x19fa <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a20:	08 95       	ret

00001a22 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a22:	40 91 43 06 	lds	r20, 0x0643
    1a26:	50 91 44 06 	lds	r21, 0x0644
    1a2a:	46 17       	cp	r20, r22
    1a2c:	57 07       	cpc	r21, r23
    1a2e:	20 f4       	brcc	.+8      	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x16>
    1a30:	ba 01       	movw	r22, r20
    1a32:	fc 01       	movw	r30, r24
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	3e c0       	rjmp	.+124    	; 0x1ab4 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a38:	61 15       	cp	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	d1 f7       	brne	.-12     	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a3e:	40 91 e8 00 	lds	r20, 0x00E8
    1a42:	4e 77       	andi	r20, 0x7E	; 126
    1a44:	40 93 e8 00 	sts	0x00E8, r20
    1a48:	f4 cf       	rjmp	.-24     	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a4a:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a4e:	88 23       	and	r24, r24
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <Endpoint_Write_Control_PStream_LE+0x32>
    1a52:	48 c0       	rjmp	.+144    	; 0x1ae4 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a54:	85 30       	cpi	r24, 0x05	; 5
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0x38>
    1a58:	47 c0       	rjmp	.+142    	; 0x1ae8 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a5a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a5e:	83 fd       	sbrc	r24, 3
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a62:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a66:	82 fd       	sbrc	r24, 2
    1a68:	35 c0       	rjmp	.+106    	; 0x1ad4 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a6a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a6e:	80 ff       	sbrs	r24, 0
    1a70:	21 c0       	rjmp	.+66     	; 0x1ab4 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a72:	90 91 f3 00 	lds	r25, 0x00F3
    1a76:	80 91 f2 00 	lds	r24, 0x00F2
    1a7a:	39 2f       	mov	r19, r25
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	82 2b       	or	r24, r18
    1a82:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a84:	07 c0       	rjmp	.+14     	; 0x1a94 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a86:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a88:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a8c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a8e:	61 50       	subi	r22, 0x01	; 1
    1a90:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1a92:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a94:	61 15       	cp	r22, r1
    1a96:	71 05       	cpc	r23, r1
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <Endpoint_Write_Control_PStream_LE+0x7e>
    1a9a:	88 30       	cpi	r24, 0x08	; 8
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	98 f3       	brcs	.-26     	; 0x1a86 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	88 30       	cpi	r24, 0x08	; 8
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <Endpoint_Write_Control_PStream_LE+0x88>
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1aaa:	80 91 e8 00 	lds	r24, 0x00E8
    1aae:	8e 77       	andi	r24, 0x7E	; 126
    1ab0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ab4:	61 15       	cp	r22, r1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	41 f6       	brne	.-112    	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0x28>
    1aba:	44 23       	and	r20, r20
    1abc:	31 f6       	brne	.-116    	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0x28>
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ac0:	80 91 3c 06 	lds	r24, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ac4:	88 23       	and	r24, r24
    1ac6:	71 f0       	breq	.+28     	; 0x1ae4 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ac8:	85 30       	cpi	r24, 0x05	; 5
    1aca:	71 f0       	breq	.+28     	; 0x1ae8 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1acc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ad0:	83 fd       	sbrc	r24, 3
    1ad2:	0c c0       	rjmp	.+24     	; 0x1aec <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ad8:	82 ff       	sbrs	r24, 2
    1ada:	f2 cf       	rjmp	.-28     	; 0x1ac0 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aee:	08 95       	ret

00001af0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1af0:	98 2f       	mov	r25, r24
    1af2:	2a c0       	rjmp	.+84     	; 0x1b48 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1af4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1af8:	98 17       	cp	r25, r24
    1afa:	39 f0       	breq	.+14     	; 0x1b0a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1afc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b00:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b04:	50 91 f0 00 	lds	r21, 0x00F0
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b0a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b0c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b10:	21 ff       	sbrs	r18, 1
    1b12:	19 c0       	rjmp	.+50     	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1b14:	30 91 eb 00 	lds	r19, 0x00EB
    1b18:	3e 7f       	andi	r19, 0xFE	; 254
    1b1a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1b1e:	30 91 ed 00 	lds	r19, 0x00ED
    1b22:	3d 7f       	andi	r19, 0xFD	; 253
    1b24:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1b28:	30 91 eb 00 	lds	r19, 0x00EB
    1b2c:	31 60       	ori	r19, 0x01	; 1
    1b2e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1b32:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1b36:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1b3a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b3e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b42:	27 ff       	sbrs	r18, 7
    1b44:	08 c0       	rjmp	.+16     	; 0x1b56 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b46:	9f 5f       	subi	r25, 0xFF	; 255
    1b48:	97 30       	cpi	r25, 0x07	; 7
    1b4a:	a0 f2       	brcs	.-88     	; 0x1af4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b4c:	8f 70       	andi	r24, 0x0F	; 15
    1b4e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b58:	08 95       	ret

00001b5a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1b64:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	2a c0       	rjmp	.+84     	; 0x1bbe <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    1b6a:	98 81       	ld	r25, Y
    1b6c:	99 23       	and	r25, r25
    1b6e:	29 f1       	breq	.+74     	; 0x1bba <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1b70:	6b 81       	ldd	r22, Y+3	; 0x03
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1b78:	89 2f       	mov	r24, r25
    1b7a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1b7c:	87 30       	cpi	r24, 0x07	; 7
    1b7e:	18 f5       	brcc	.+70     	; 0x1bc6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1b80:	62 95       	swap	r22
    1b82:	66 0f       	add	r22, r22
    1b84:	66 0f       	add	r22, r22
    1b86:	60 7c       	andi	r22, 0xC0	; 192
    1b88:	99 1f       	adc	r25, r25
    1b8a:	99 27       	eor	r25, r25
    1b8c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b8e:	69 2b       	or	r22, r25
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	10 f0       	brcs	.+4      	; 0x1b98 <Endpoint_ConfigureEndpointTable+0x3e>
    1b94:	96 e0       	ldi	r25, 0x06	; 6
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <Endpoint_ConfigureEndpointTable+0x40>
    1b98:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1b9a:	28 e0       	ldi	r18, 0x08	; 8
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1ba2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ba8:	2e 17       	cp	r18, r30
    1baa:	3f 07       	cpc	r19, r31
    1bac:	d0 f3       	brcs	.-12     	; 0x1ba2 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1bae:	42 95       	swap	r20
    1bb0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bb2:	49 2b       	or	r20, r25
    1bb4:	9d df       	rcall	.-198    	; 0x1af0 <Endpoint_ConfigureEndpoint_Prv>
    1bb6:	88 23       	and	r24, r24
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <Endpoint_ConfigureEndpointTable+0x6c>
    1bba:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1bbc:	25 96       	adiw	r28, 0x05	; 5
    1bbe:	01 17       	cp	r16, r17
    1bc0:	a1 f6       	brne	.-88     	; 0x1b6a <Endpoint_ConfigureEndpointTable+0x10>
    1bc2:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <Endpoint_ConfigureEndpointTable+0x6e>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1bc8:	df 91       	pop	r29
	}

	return true;
}
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <Endpoint_ClearStatusStage>:
    1bd2:	80 91 3d 06 	lds	r24, 0x063D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1bd6:	87 ff       	sbrs	r24, 7
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <Endpoint_ClearStatusStage+0x2e>
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bdc:	80 91 3c 06 	lds	r24, 0x063C
    1be0:	88 23       	and	r24, r24
    1be2:	b9 f0       	breq	.+46     	; 0x1c12 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1be4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1be8:	82 ff       	sbrs	r24, 2
    1bea:	f8 cf       	rjmp	.-16     	; 0x1bdc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bec:	80 91 e8 00 	lds	r24, 0x00E8
    1bf0:	8b 77       	andi	r24, 0x7B	; 123
    1bf2:	80 93 e8 00 	sts	0x00E8, r24
    1bf6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bf8:	80 91 3c 06 	lds	r24, 0x063C
    1bfc:	88 23       	and	r24, r24
    1bfe:	49 f0       	breq	.+18     	; 0x1c12 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c00:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c04:	80 ff       	sbrs	r24, 0
    1c06:	f8 cf       	rjmp	.-16     	; 0x1bf8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c08:	80 91 e8 00 	lds	r24, 0x00E8
    1c0c:	8e 77       	andi	r24, 0x7E	; 126
    1c0e:	80 93 e8 00 	sts	0x00E8, r24
    1c12:	08 95       	ret

00001c14 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c14:	80 91 e4 00 	lds	r24, 0x00E4
    1c18:	90 91 e5 00 	lds	r25, 0x00E5
    1c1c:	45 e6       	ldi	r20, 0x65	; 101
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <Endpoint_WaitUntilReady+0xe>
    1c20:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c22:	20 91 ec 00 	lds	r18, 0x00EC
    1c26:	20 ff       	sbrs	r18, 0
    1c28:	23 c0       	rjmp	.+70     	; 0x1c70 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c2a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c2e:	20 fd       	sbrc	r18, 0
    1c30:	15 c0       	rjmp	.+42     	; 0x1c5c <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c32:	20 91 3c 06 	lds	r18, 0x063C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c36:	22 23       	and	r18, r18
    1c38:	99 f0       	breq	.+38     	; 0x1c60 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c3a:	25 30       	cpi	r18, 0x05	; 5
    1c3c:	99 f0       	breq	.+38     	; 0x1c64 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c3e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c42:	25 fd       	sbrc	r18, 5
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <Endpoint_WaitUntilReady+0x54>
    1c46:	20 91 e4 00 	lds	r18, 0x00E4
    1c4a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c4e:	28 17       	cp	r18, r24
    1c50:	39 07       	cpc	r19, r25
    1c52:	39 f3       	breq	.-50     	; 0x1c22 <Endpoint_WaitUntilReady+0xe>
    1c54:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c56:	21 f7       	brne	.-56     	; 0x1c20 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1c6c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c6e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c70:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c74:	22 ff       	sbrs	r18, 2
    1c76:	dd cf       	rjmp	.-70     	; 0x1c32 <Endpoint_WaitUntilReady+0x1e>
    1c78:	f9 cf       	rjmp	.-14     	; 0x1c6c <Endpoint_WaitUntilReady+0x58>

00001c7a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c82:	4b d0       	rcall	.+150    	; 0x1d1a <USB_INT_DisableAllInterrupts>
    1c84:	52 d0       	rcall	.+164    	; 0x1d2a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c86:	c8 ed       	ldi	r28, 0xD8	; 216
    1c88:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c8a:	88 81       	ld	r24, Y
    1c8c:	8f 77       	andi	r24, 0x7F	; 127
    1c8e:	88 83       	st	Y, r24
    1c90:	88 81       	ld	r24, Y
    1c92:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1c94:	88 83       	st	Y, r24
    1c96:	88 81       	ld	r24, Y
    1c98:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c9a:	88 83       	st	Y, r24
    1c9c:	19 bc       	out	0x29, r1	; 41
    1c9e:	10 92 3c 06 	sts	0x063C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ca2:	10 92 38 06 	sts	0x0638, r1
	USB_Device_ConfigurationNumber  = 0;
    1ca6:	10 92 3a 06 	sts	0x063A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1caa:	10 92 39 06 	sts	0x0639, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1cae:	00 ee       	ldi	r16, 0xE0	; 224
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8b 7f       	andi	r24, 0xFB	; 251
    1cb8:	80 83       	st	Z, r24
    1cba:	88 81       	ld	r24, Y
    1cbc:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1cbe:	88 83       	st	Y, r24
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cc4:	42 e0       	ldi	r20, 0x02	; 2
    1cc6:	14 df       	rcall	.-472    	; 0x1af0 <Endpoint_ConfigureEndpoint_Prv>
    1cc8:	e1 ee       	ldi	r30, 0xE1	; 225
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cce:	8e 7f       	andi	r24, 0xFE	; 254
    1cd0:	80 83       	st	Z, r24
    1cd2:	e2 ee       	ldi	r30, 0xE2	; 226
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	80 83       	st	Z, r24
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 60       	ori	r24, 0x08	; 8
    1ce0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1ce8:	80 83       	st	Z, r24
    1cea:	88 81       	ld	r24, Y
    1cec:	80 61       	ori	r24, 0x10	; 16
    1cee:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <USB_Init>:
    1cfa:	e8 ed       	ldi	r30, 0xD8	; 216
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d00:	8f 7e       	andi	r24, 0xEF	; 239
    1d02:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d04:	e7 ed       	ldi	r30, 0xD7	; 215
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 3b 06 	sts	0x063B, r24

	USB_ResetInterface();
    1d18:	b0 cf       	rjmp	.-160    	; 0x1c7a <USB_ResetInterface>

00001d1a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d1a:	e8 ed       	ldi	r30, 0xD8	; 216
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8e 7f       	andi	r24, 0xFE	; 254
    1d22:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d24:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1d28:	08 95       	ret

00001d2a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d2a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d2e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1d32:	08 95       	ret

00001d34 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	2f 93       	push	r18
    1d40:	3f 93       	push	r19
    1d42:	4f 93       	push	r20
    1d44:	5f 93       	push	r21
    1d46:	6f 93       	push	r22
    1d48:	7f 93       	push	r23
    1d4a:	8f 93       	push	r24
    1d4c:	9f 93       	push	r25
    1d4e:	af 93       	push	r26
    1d50:	bf 93       	push	r27
    1d52:	ef 93       	push	r30
    1d54:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d56:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d5a:	82 ff       	sbrs	r24, 2
    1d5c:	0b c0       	rjmp	.+22     	; 0x1d74 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d5e:	80 91 e2 00 	lds	r24, 0x00E2
    1d62:	82 ff       	sbrs	r24, 2
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d66:	80 91 e1 00 	lds	r24, 0x00E1
    1d6a:	8b 7f       	andi	r24, 0xFB	; 251
    1d6c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d70:	0e 94 3d 04 	call	0x87a	; 0x87a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d74:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d78:	80 ff       	sbrs	r24, 0
    1d7a:	1f c0       	rjmp	.+62     	; 0x1dba <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d7c:	80 91 d8 00 	lds	r24, 0x00D8
    1d80:	80 ff       	sbrs	r24, 0
    1d82:	1b c0       	rjmp	.+54     	; 0x1dba <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d84:	80 91 da 00 	lds	r24, 0x00DA
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d8e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d92:	80 ff       	sbrs	r24, 0
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d96:	80 e1       	ldi	r24, 0x10	; 16
    1d98:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d9a:	82 e1       	ldi	r24, 0x12	; 18
    1d9c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d9e:	09 b4       	in	r0, 0x29	; 41
    1da0:	00 fe       	sbrs	r0, 0
    1da2:	fd cf       	rjmp	.-6      	; 0x1d9e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 93 3c 06 	sts	0x063C, r24
			EVENT_USB_Device_Connect();
    1daa:	0e 94 26 04 	call	0x84c	; 0x84c <EVENT_USB_Device_Connect>
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1db0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1db2:	10 92 3c 06 	sts	0x063C, r1
			EVENT_USB_Device_Disconnect();
    1db6:	0e 94 28 04 	call	0x850	; 0x850 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1dba:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1dbe:	80 ff       	sbrs	r24, 0
    1dc0:	18 c0       	rjmp	.+48     	; 0x1df2 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1dc2:	80 91 e2 00 	lds	r24, 0x00E2
    1dc6:	80 ff       	sbrs	r24, 0
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dca:	80 91 e2 00 	lds	r24, 0x00E2
    1dce:	8e 7f       	andi	r24, 0xFE	; 254
    1dd0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1dd4:	80 91 e2 00 	lds	r24, 0x00E2
    1dd8:	80 61       	ori	r24, 0x10	; 16
    1dda:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1dde:	80 91 d8 00 	lds	r24, 0x00D8
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1de8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	80 93 3c 06 	sts	0x063C, r24
		EVENT_USB_Device_Suspend();
    1df0:	d2 d1       	rcall	.+932    	; 0x2196 <USB_Event_Stub>
    1df2:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1df6:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1df8:	2f c0       	rjmp	.+94     	; 0x1e58 <__vector_10+0x124>
    1dfa:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1dfe:	84 ff       	sbrs	r24, 4
    1e00:	2b c0       	rjmp	.+86     	; 0x1e58 <__vector_10+0x124>
    1e02:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e04:	89 bd       	out	0x29, r24	; 41
    1e06:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e08:	89 bd       	out	0x29, r24	; 41
    1e0a:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e0c:	00 fe       	sbrs	r0, 0
    1e0e:	fd cf       	rjmp	.-6      	; 0x1e0a <__vector_10+0xd6>
    1e10:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e14:	8f 7d       	andi	r24, 0xDF	; 223
    1e16:	80 93 d8 00 	sts	0x00D8, r24
    1e1a:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e1e:	8f 7e       	andi	r24, 0xEF	; 239
    1e20:	80 93 e1 00 	sts	0x00E1, r24
    1e24:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e28:	8f 7e       	andi	r24, 0xEF	; 239
    1e2a:	80 93 e2 00 	sts	0x00E2, r24
    1e2e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e32:	81 60       	ori	r24, 0x01	; 1
    1e34:	80 93 e2 00 	sts	0x00E2, r24
    1e38:	80 91 38 06 	lds	r24, 0x0638
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e3c:	88 23       	and	r24, r24
    1e3e:	11 f0       	breq	.+4      	; 0x1e44 <__vector_10+0x110>
    1e40:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e42:	07 c0       	rjmp	.+14     	; 0x1e52 <__vector_10+0x11e>
    1e44:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e48:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <__vector_10+0x11c>
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <__vector_10+0x11e>
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 3c 06 	sts	0x063C, r24
    1e56:	9f d1       	rcall	.+830    	; 0x2196 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e58:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e5c:	83 ff       	sbrs	r24, 3
    1e5e:	22 c0       	rjmp	.+68     	; 0x1ea4 <__vector_10+0x170>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e60:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e64:	83 ff       	sbrs	r24, 3
    1e66:	1e c0       	rjmp	.+60     	; 0x1ea4 <__vector_10+0x170>
    1e68:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e6c:	87 7f       	andi	r24, 0xF7	; 247
    1e6e:	80 93 e1 00 	sts	0x00E1, r24
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	80 93 3c 06 	sts	0x063C, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e78:	10 92 38 06 	sts	0x0638, r1
		USB_Device_ConfigurationNumber = 0;
    1e7c:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	80 93 e1 00 	sts	0x00E1, r24
    1e86:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e8a:	8e 7f       	andi	r24, 0xFE	; 254
    1e8c:	80 93 e2 00 	sts	0x00E2, r24
    1e90:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e94:	80 61       	ori	r24, 0x10	; 16
    1e96:	80 93 e2 00 	sts	0x00E2, r24
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e9e:	42 e0       	ldi	r20, 0x02	; 2
    1ea0:	27 de       	rcall	.-946    	; 0x1af0 <Endpoint_ConfigureEndpoint_Prv>
    1ea2:	79 d1       	rcall	.+754    	; 0x2196 <USB_Event_Stub>
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	ac 97       	sbiw	r28, 0x2c	; 44
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1edc:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1ede:	ed e3       	ldi	r30, 0x3D	; 61
    1ee0:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ee2:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ee6:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	88 30       	cpi	r24, 0x08	; 8
    1eec:	d1 f7       	brne	.-12     	; 0x1ee2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1eee:	0e 94 39 04 	call	0x872	; 0x872 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ef2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1ef6:	83 ff       	sbrs	r24, 3
    1ef8:	36 c1       	rjmp	.+620    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1efa:	80 91 3d 06 	lds	r24, 0x063D

		switch (USB_ControlRequest.bRequest)
    1efe:	20 91 3e 06 	lds	r18, 0x063E
    1f02:	25 30       	cpi	r18, 0x05	; 5
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <USB_Device_ProcessControlRequest+0x42>
    1f06:	84 c0       	rjmp	.+264    	; 0x2010 <USB_Device_ProcessControlRequest+0x14a>
    1f08:	26 30       	cpi	r18, 0x06	; 6
    1f0a:	40 f4       	brcc	.+16     	; 0x1f1c <USB_Device_ProcessControlRequest+0x56>
    1f0c:	21 30       	cpi	r18, 0x01	; 1
    1f0e:	a1 f1       	breq	.+104    	; 0x1f78 <USB_Device_ProcessControlRequest+0xb2>
    1f10:	21 30       	cpi	r18, 0x01	; 1
    1f12:	70 f0       	brcs	.+28     	; 0x1f30 <USB_Device_ProcessControlRequest+0x6a>
    1f14:	23 30       	cpi	r18, 0x03	; 3
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <USB_Device_ProcessControlRequest+0x54>
    1f18:	26 c1       	rjmp	.+588    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    1f1a:	2e c0       	rjmp	.+92     	; 0x1f78 <USB_Device_ProcessControlRequest+0xb2>
    1f1c:	28 30       	cpi	r18, 0x08	; 8
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <USB_Device_ProcessControlRequest+0x5c>
    1f20:	f3 c0       	rjmp	.+486    	; 0x2108 <USB_Device_ProcessControlRequest+0x242>
    1f22:	29 30       	cpi	r18, 0x09	; 9
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <USB_Device_ProcessControlRequest+0x62>
    1f26:	02 c1       	rjmp	.+516    	; 0x212c <USB_Device_ProcessControlRequest+0x266>
    1f28:	26 30       	cpi	r18, 0x06	; 6
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <USB_Device_ProcessControlRequest+0x68>
    1f2c:	1c c1       	rjmp	.+568    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    1f2e:	93 c0       	rjmp	.+294    	; 0x2056 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f30:	80 38       	cpi	r24, 0x80	; 128
    1f32:	21 f0       	breq	.+8      	; 0x1f3c <USB_Device_ProcessControlRequest+0x76>
    1f34:	82 38       	cpi	r24, 0x82	; 130
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <USB_Device_ProcessControlRequest+0x74>
    1f38:	16 c1       	rjmp	.+556    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f3c:	80 91 39 06 	lds	r24, 0x0639
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f40:	90 91 3a 06 	lds	r25, 0x063A
    1f44:	99 23       	and	r25, r25
    1f46:	71 f0       	breq	.+28     	; 0x1f64 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f48:	82 60       	ori	r24, 0x02	; 2
    1f4a:	0c c0       	rjmp	.+24     	; 0x1f64 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f4c:	80 91 41 06 	lds	r24, 0x0641
    1f50:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f52:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f56:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	95 ff       	sbrs	r25, 5
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f60:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f64:	90 91 e8 00 	lds	r25, 0x00E8
    1f68:	97 7f       	andi	r25, 0xF7	; 247
    1f6a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f6e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1f72:	10 92 f1 00 	sts	0x00F1, r1
    1f76:	d3 c0       	rjmp	.+422    	; 0x211e <USB_Device_ProcessControlRequest+0x258>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f78:	88 23       	and	r24, r24
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <USB_Device_ProcessControlRequest+0xbc>
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <USB_Device_ProcessControlRequest+0xbc>
    1f80:	f2 c0       	rjmp	.+484    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	8f 71       	andi	r24, 0x1F	; 31
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	29 f0       	breq	.+10     	; 0x1f96 <USB_Device_ProcessControlRequest+0xd0>
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	91 05       	cpc	r25, r1
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <USB_Device_ProcessControlRequest+0xce>
    1f92:	e9 c0       	rjmp	.+466    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    1f94:	0b c0       	rjmp	.+22     	; 0x1fac <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f96:	80 91 3f 06 	lds	r24, 0x063F
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <USB_Device_ProcessControlRequest+0xda>
    1f9e:	e3 c0       	rjmp	.+454    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1fa0:	23 30       	cpi	r18, 0x03	; 3
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <USB_Device_ProcessControlRequest+0xe0>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	80 93 3a 06 	sts	0x063A, r24
    1faa:	2c c0       	rjmp	.+88     	; 0x2004 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1fac:	80 91 3f 06 	lds	r24, 0x063F
    1fb0:	88 23       	and	r24, r24
    1fb2:	41 f5       	brne	.+80     	; 0x2004 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1fb4:	20 91 41 06 	lds	r18, 0x0641
    1fb8:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <USB_Device_ProcessControlRequest+0xf8>
    1fbc:	d4 c0       	rjmp	.+424    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fbe:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1fc2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1fc6:	80 ff       	sbrs	r24, 0
    1fc8:	1d c0       	rjmp	.+58     	; 0x2004 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1fca:	80 91 3e 06 	lds	r24, 0x063E
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fd2:	80 91 eb 00 	lds	r24, 0x00EB
    1fd6:	80 62       	ori	r24, 0x20	; 32
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fda:	80 91 eb 00 	lds	r24, 0x00EB
    1fde:	80 61       	ori	r24, 0x10	; 16
    1fe0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <USB_Device_ProcessControlRequest+0x128>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	2a 95       	dec	r18
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <USB_Device_ProcessControlRequest+0x124>
    1ff2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1ff6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ffa:	80 91 eb 00 	lds	r24, 0x00EB
    1ffe:	88 60       	ori	r24, 0x08	; 8
    2000:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2004:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2008:	80 91 e8 00 	lds	r24, 0x00E8
    200c:	87 7f       	andi	r24, 0xF7	; 247
    200e:	8a c0       	rjmp	.+276    	; 0x2124 <USB_Device_ProcessControlRequest+0x25e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2010:	88 23       	and	r24, r24
    2012:	09 f0       	breq	.+2      	; 0x2016 <USB_Device_ProcessControlRequest+0x150>
    2014:	a8 c0       	rjmp	.+336    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2016:	10 91 3f 06 	lds	r17, 0x063F
    201a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    201c:	80 91 e3 00 	lds	r24, 0x00E3
    2020:	80 78       	andi	r24, 0x80	; 128
    2022:	81 2b       	or	r24, r17
    2024:	80 93 e3 00 	sts	0x00E3, r24
    2028:	80 91 e8 00 	lds	r24, 0x00E8
    202c:	87 7f       	andi	r24, 0xF7	; 247
    202e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2032:	cf dd       	rcall	.-1122   	; 0x1bd2 <Endpoint_ClearStatusStage>
    2034:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2038:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    203a:	fc cf       	rjmp	.-8      	; 0x2034 <USB_Device_ProcessControlRequest+0x16e>
    203c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2040:	80 68       	ori	r24, 0x80	; 128
    2042:	80 93 e3 00 	sts	0x00E3, r24
    2046:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2048:	11 f0       	breq	.+4      	; 0x204e <USB_Device_ProcessControlRequest+0x188>
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <USB_Device_ProcessControlRequest+0x18a>
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	80 93 3c 06 	sts	0x063C, r24
    2054:	88 c0       	rjmp	.+272    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    2056:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	08 f0       	brcs	.+2      	; 0x205e <USB_Device_ProcessControlRequest+0x198>
    205c:	84 c0       	rjmp	.+264    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    205e:	80 91 3f 06 	lds	r24, 0x063F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2062:	90 91 40 06 	lds	r25, 0x0640
    2066:	23 e0       	ldi	r18, 0x03	; 3
    2068:	8c 3d       	cpi	r24, 0xDC	; 220
    206a:	92 07       	cpc	r25, r18
    206c:	a9 f5       	brne	.+106    	; 0x20d8 <USB_Device_ProcessControlRequest+0x212>
    206e:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2070:	8c 83       	std	Y+4, r24	; 0x04
    2072:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2078:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    207a:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    207c:	13 96       	adiw	r26, 0x03	; 3
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2084:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2086:	e4 2f       	mov	r30, r20
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	60 93 57 00 	sts	0x0057, r22
    208e:	e4 91       	lpm	r30, Z
    2090:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    2092:	03 c0       	rjmp	.+6      	; 0x209a <USB_Device_ProcessControlRequest+0x1d4>
    2094:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    2096:	ef 70       	andi	r30, 0x0F	; 15
    2098:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    209a:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    209c:	2e 2f       	mov	r18, r30
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    20a2:	18 f0       	brcs	.+6      	; 0x20aa <USB_Device_ProcessControlRequest+0x1e4>
    20a4:	29 5c       	subi	r18, 0xC9	; 201
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <USB_Device_ProcessControlRequest+0x1e8>
    20aa:	20 5d       	subi	r18, 0xD0	; 208
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	13 96       	adiw	r26, 0x03	; 3
    20b0:	3c 93       	st	X, r19
    20b2:	2e 93       	st	-X, r18
    20b4:	12 97       	sbiw	r26, 0x02	; 2
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	12 96       	adiw	r26, 0x02	; 2
    20ba:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    20bc:	91 05       	cpc	r25, r1
    20be:	19 f7       	brne	.-58     	; 0x2086 <USB_Device_ProcessControlRequest+0x1c0>
    20c0:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    20c2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c6:	87 7f       	andi	r24, 0xF7	; 247
    20c8:	80 93 e8 00 	sts	0x00E8, r24
    20cc:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    20ce:	03 96       	adiw	r24, 0x03	; 3
    20d0:	6a e2       	ldi	r22, 0x2A	; 42
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	f2 db       	rcall	.-2076   	; 0x18ba <Endpoint_Write_Control_Stream_LE>
    20d6:	12 c0       	rjmp	.+36     	; 0x20fc <USB_Device_ProcessControlRequest+0x236>
    20d8:	60 91 41 06 	lds	r22, 0x0641
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    20dc:	ae 01       	movw	r20, r28
    20de:	4f 5f       	subi	r20, 0xFF	; 255
    20e0:	5f 4f       	sbci	r21, 0xFF	; 255
    20e2:	27 d8       	rcall	.-4018   	; 0x1132 <CALLBACK_USB_GetDescriptor>
    20e4:	bc 01       	movw	r22, r24
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	09 f4       	brne	.+2      	; 0x20ec <USB_Device_ProcessControlRequest+0x226>
    20ea:	3d c0       	rjmp	.+122    	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    20ec:	80 91 e8 00 	lds	r24, 0x00E8
    20f0:	87 7f       	andi	r24, 0xF7	; 247
    20f2:	80 93 e8 00 	sts	0x00E8, r24
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	93 dc       	rcall	.-1754   	; 0x1a22 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20fc:	80 91 e8 00 	lds	r24, 0x00E8
    2100:	8b 77       	andi	r24, 0x7B	; 123
    2102:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2106:	2f c0       	rjmp	.+94     	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    2108:	80 38       	cpi	r24, 0x80	; 128
    210a:	69 f5       	brne	.+90     	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    210c:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2110:	87 7f       	andi	r24, 0xF7	; 247
    2112:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2116:	80 91 38 06 	lds	r24, 0x0638
    211a:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    211e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2122:	8e 77       	andi	r24, 0x7E	; 126
    2124:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2128:	54 dd       	rcall	.-1368   	; 0x1bd2 <Endpoint_ClearStatusStage>
    212a:	1d c0       	rjmp	.+58     	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    212c:	88 23       	and	r24, r24
    212e:	d9 f4       	brne	.+54     	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2130:	90 91 3f 06 	lds	r25, 0x063F
    2134:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2136:	b8 f4       	brcc	.+46     	; 0x2166 <USB_Device_ProcessControlRequest+0x2a0>
    2138:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    213c:	87 7f       	andi	r24, 0xF7	; 247
    213e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2142:	90 93 38 06 	sts	0x0638, r25
    2146:	45 dd       	rcall	.-1398   	; 0x1bd2 <Endpoint_ClearStatusStage>
    2148:	80 91 38 06 	lds	r24, 0x0638
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    214c:	88 23       	and	r24, r24
    214e:	21 f4       	brne	.+8      	; 0x2158 <USB_Device_ProcessControlRequest+0x292>

	Endpoint_ClearStatusStage();
    2150:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    2154:	87 ff       	sbrs	r24, 7
    2156:	02 c0       	rjmp	.+4      	; 0x215c <USB_Device_ProcessControlRequest+0x296>
    2158:	84 e0       	ldi	r24, 0x04	; 4
    215a:	01 c0       	rjmp	.+2      	; 0x215e <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 3c 06 	sts	0x063C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2162:	0e 94 2a 04 	call	0x854	; 0x854 <EVENT_USB_Device_ConfigurationChanged>
    2166:	80 91 e8 00 	lds	r24, 0x00E8
    216a:	83 ff       	sbrs	r24, 3
    216c:	0a c0       	rjmp	.+20     	; 0x2182 <USB_Device_ProcessControlRequest+0x2bc>

	EVENT_USB_Device_ConfigurationChanged();
    216e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2172:	87 7f       	andi	r24, 0xF7	; 247
    2174:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2178:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    217c:	80 62       	ori	r24, 0x20	; 32
    217e:	80 93 eb 00 	sts	0x00EB, r24
    2182:	ac 96       	adiw	r28, 0x2c	; 44
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	08 95       	ret

00002196 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2196:	08 95       	ret

00002198 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2198:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    219a:	80 91 3c 06 	lds	r24, 0x063C
    219e:	88 23       	and	r24, r24
    21a0:	a9 f0       	breq	.+42     	; 0x21cc <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    21a2:	80 91 e9 00 	lds	r24, 0x00E9
    21a6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    21a8:	90 91 ec 00 	lds	r25, 0x00EC
    21ac:	90 ff       	sbrs	r25, 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <USB_USBTask+0x1c>
    21b0:	c0 e8       	ldi	r28, 0x80	; 128
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <USB_USBTask+0x1e>
    21b4:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    21b6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21b8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21bc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    21c0:	83 ff       	sbrs	r24, 3
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    21c4:	80 de       	rcall	.-768    	; 0x1ec6 <USB_Device_ProcessControlRequest>
    21c6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21c8:	c0 93 e9 00 	sts	0x00E9, r28
    21cc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    21ce:	08 95       	ret

000021d0 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    21d0:	6f 92       	push	r6
    21d2:	7f 92       	push	r7
    21d4:	8f 92       	push	r8
    21d6:	9f 92       	push	r9
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <HID_Device_ProcessControlRequest+0x1e>
    21ee:	0f 92       	push	r0
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    21f6:	6d b6       	in	r6, 0x3d	; 61
    21f8:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21fa:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    21fe:	83 ff       	sbrs	r24, 3
    2200:	0a c1       	rjmp	.+532    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    2202:	f7 01       	movw	r30, r14
    2204:	80 81       	ld	r24, Z
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	20 91 41 06 	lds	r18, 0x0641
    220c:	30 91 42 06 	lds	r19, 0x0642
    2210:	28 17       	cp	r18, r24
    2212:	39 07       	cpc	r19, r25
    2214:	09 f0       	breq	.+2      	; 0x2218 <HID_Device_ProcessControlRequest+0x48>
    2216:	ff c0       	rjmp	.+510    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
    2218:	80 91 3e 06 	lds	r24, 0x063E
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	09 f4       	brne	.+2      	; 0x2222 <HID_Device_ProcessControlRequest+0x52>
    2220:	a1 c0       	rjmp	.+322    	; 0x2364 <HID_Device_ProcessControlRequest+0x194>
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	30 f4       	brcc	.+12     	; 0x2232 <HID_Device_ProcessControlRequest+0x62>
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	71 f0       	breq	.+28     	; 0x2246 <HID_Device_ProcessControlRequest+0x76>
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	09 f0       	breq	.+2      	; 0x2230 <HID_Device_ProcessControlRequest+0x60>
    222e:	f3 c0       	rjmp	.+486    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    2230:	d6 c0       	rjmp	.+428    	; 0x23de <HID_Device_ProcessControlRequest+0x20e>
    2232:	8a 30       	cpi	r24, 0x0A	; 10
    2234:	09 f4       	brne	.+2      	; 0x2238 <HID_Device_ProcessControlRequest+0x68>
    2236:	bb c0       	rjmp	.+374    	; 0x23ae <HID_Device_ProcessControlRequest+0x1de>
    2238:	8b 30       	cpi	r24, 0x0B	; 11
    223a:	09 f4       	brne	.+2      	; 0x223e <HID_Device_ProcessControlRequest+0x6e>
    223c:	a4 c0       	rjmp	.+328    	; 0x2386 <HID_Device_ProcessControlRequest+0x1b6>
    223e:	89 30       	cpi	r24, 0x09	; 9
    2240:	09 f0       	breq	.+2      	; 0x2244 <HID_Device_ProcessControlRequest+0x74>
    2242:	e9 c0       	rjmp	.+466    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    2244:	51 c0       	rjmp	.+162    	; 0x22e8 <HID_Device_ProcessControlRequest+0x118>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2246:	80 91 3d 06 	lds	r24, 0x063D
    224a:	81 3a       	cpi	r24, 0xA1	; 161
    224c:	09 f0       	breq	.+2      	; 0x2250 <HID_Device_ProcessControlRequest+0x80>
    224e:	e3 c0       	rjmp	.+454    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    2250:	9d b6       	in	r9, 0x3d	; 61
    2252:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2254:	1b 82       	std	Y+3, r1	; 0x03
    2256:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2258:	80 91 3f 06 	lds	r24, 0x063F
    225c:	00 91 40 06 	lds	r16, 0x0640
    2260:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2262:	f7 01       	movw	r30, r14
    2264:	40 85       	ldd	r20, Z+8	; 0x08
    2266:	8d b7       	in	r24, 0x3d	; 61
    2268:	9e b7       	in	r25, 0x3e	; 62
    226a:	84 1b       	sub	r24, r20
    226c:	91 09       	sbc	r25, r1
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	9e bf       	out	0x3e, r25	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	8d bf       	out	0x3d, r24	; 61
    2278:	cd b6       	in	r12, 0x3d	; 61
    227a:	de b6       	in	r13, 0x3e	; 62
    227c:	08 94       	sec
    227e:	c1 1c       	adc	r12, r1
    2280:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    2282:	bc 2c       	mov	r11, r12
    2284:	ad 2c       	mov	r10, r13
    2286:	c6 01       	movw	r24, r12
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	31 d3       	rcall	.+1634   	; 0x28f2 <memset>
    2290:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2292:	41 50       	subi	r20, 0x01	; 1
    2294:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    2296:	be 01       	movw	r22, r28
    2298:	6f 5f       	subi	r22, 0xFF	; 255
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	96 01       	movw	r18, r12
    229e:	8e 01       	movw	r16, r28
    22a0:	0e 5f       	subi	r16, 0xFE	; 254
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	0e 94 49 04 	call	0x892	; 0x892 <CALLBACK_HID_Device_CreateHIDReport>
    22a8:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    22aa:	86 81       	ldd	r24, Z+6	; 0x06
    22ac:	97 81       	ldd	r25, Z+7	; 0x07
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	21 f0       	breq	.+8      	; 0x22ba <HID_Device_ProcessControlRequest+0xea>
    22b2:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    22b4:	b6 01       	movw	r22, r12
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	13 d3       	rcall	.+1574   	; 0x28e0 <memcpy>
    22ba:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22be:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22c2:	87 7f       	andi	r24, 0xF7	; 247
    22c4:	80 93 e8 00 	sts	0x00E8, r24
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	88 23       	and	r24, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <HID_Device_ProcessControlRequest+0x102>
    22ce:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22d2:	6a 81       	ldd	r22, Y+2	; 0x02
    22d4:	7b 81       	ldd	r23, Y+3	; 0x03
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    22d6:	8b 2d       	mov	r24, r11
    22d8:	9a 2d       	mov	r25, r10
    22da:	ef da       	rcall	.-2594   	; 0x18ba <Endpoint_Write_Control_Stream_LE>
    22dc:	80 91 e8 00 	lds	r24, 0x00E8
    22e0:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22e2:	80 93 e8 00 	sts	0x00E8, r24
    22e6:	3b c0       	rjmp	.+118    	; 0x235e <HID_Device_ProcessControlRequest+0x18e>
    22e8:	80 91 3d 06 	lds	r24, 0x063D
    22ec:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <HID_Device_ProcessControlRequest+0x122>
    22f0:	92 c0       	rjmp	.+292    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    22f2:	9d b6       	in	r9, 0x3d	; 61
    22f4:	8e b6       	in	r8, 0x3e	; 62
    22f6:	00 91 43 06 	lds	r16, 0x0643
    22fa:	10 91 44 06 	lds	r17, 0x0644
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    22fe:	c0 90 3f 06 	lds	r12, 0x063F
    2302:	d0 90 40 06 	lds	r13, 0x0640
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2306:	8d b7       	in	r24, 0x3d	; 61
    2308:	9e b7       	in	r25, 0x3e	; 62
    230a:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    230c:	91 0b       	sbc	r25, r17
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	9e bf       	out	0x3e, r25	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	8d bf       	out	0x3d, r24	; 61
    2318:	ad b6       	in	r10, 0x3d	; 61
    231a:	be b6       	in	r11, 0x3e	; 62
    231c:	08 94       	sec
    231e:	a1 1c       	adc	r10, r1
    2320:	b1 1c       	adc	r11, r1
    2322:	80 91 e8 00 	lds	r24, 0x00E8
    2326:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2328:	80 93 e8 00 	sts	0x00E8, r24
    232c:	c5 01       	movw	r24, r10
    232e:	b8 01       	movw	r22, r16
    2330:	2a db       	rcall	.-2476   	; 0x1986 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2332:	80 91 e8 00 	lds	r24, 0x00E8
    2336:	8e 77       	andi	r24, 0x7E	; 126
    2338:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	cc 20       	and	r12, r12
    2342:	11 f4       	brne	.+4      	; 0x2348 <HID_Device_ProcessControlRequest+0x178>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	4d 2d       	mov	r20, r13
    234a:	41 50       	subi	r20, 0x01	; 1
    234c:	95 01       	movw	r18, r10
    234e:	28 0f       	add	r18, r24
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2350:	39 1f       	adc	r19, r25
    2352:	08 1b       	sub	r16, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2354:	19 0b       	sbc	r17, r25
    2356:	c7 01       	movw	r24, r14
    2358:	6c 2d       	mov	r22, r12
    235a:	0e 94 fc 07 	call	0xff8	; 0xff8 <CALLBACK_HID_Device_ProcessHIDReport>
    235e:	9d be       	out	0x3d, r9	; 61
    2360:	8e be       	out	0x3e, r8	; 62
    2362:	59 c0       	rjmp	.+178    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    2364:	80 91 3d 06 	lds	r24, 0x063D
    2368:	81 3a       	cpi	r24, 0xA1	; 161
    236a:	09 f0       	breq	.+2      	; 0x236e <HID_Device_ProcessControlRequest+0x19e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    236c:	54 c0       	rjmp	.+168    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    236e:	80 91 e8 00 	lds	r24, 0x00E8
    2372:	87 7f       	andi	r24, 0xF7	; 247
    2374:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2378:	80 91 e8 00 	lds	r24, 0x00E8
    237c:	80 ff       	sbrs	r24, 0
    237e:	fc cf       	rjmp	.-8      	; 0x2378 <HID_Device_ProcessControlRequest+0x1a8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2380:	f7 01       	movw	r30, r14
    2382:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2384:	40 c0       	rjmp	.+128    	; 0x2406 <HID_Device_ProcessControlRequest+0x236>
    2386:	80 91 3d 06 	lds	r24, 0x063D
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    238a:	81 32       	cpi	r24, 0x21	; 33
    238c:	09 f0       	breq	.+2      	; 0x2390 <HID_Device_ProcessControlRequest+0x1c0>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    238e:	43 c0       	rjmp	.+134    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    2390:	80 91 e8 00 	lds	r24, 0x00E8
    2394:	87 7f       	andi	r24, 0xF7	; 247
    2396:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    239a:	1b dc       	rcall	.-1994   	; 0x1bd2 <Endpoint_ClearStatusStage>
    239c:	90 91 3f 06 	lds	r25, 0x063F
    23a0:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    23a2:	99 23       	and	r25, r25
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <HID_Device_ProcessControlRequest+0x1d8>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	f7 01       	movw	r30, r14
    23aa:	81 87       	std	Z+9, r24	; 0x09
    23ac:	34 c0       	rjmp	.+104    	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    23ae:	80 91 3d 06 	lds	r24, 0x063D
    23b2:	81 32       	cpi	r24, 0x21	; 33
    23b4:	81 f5       	brne	.+96     	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    23b6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    23ba:	87 7f       	andi	r24, 0xF7	; 247
    23bc:	80 93 e8 00 	sts	0x00E8, r24
    23c0:	08 dc       	rcall	.-2032   	; 0x1bd2 <Endpoint_ClearStatusStage>
    23c2:	80 91 3f 06 	lds	r24, 0x063F
    23c6:	90 91 40 06 	lds	r25, 0x0640
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    23ca:	80 70       	andi	r24, 0x00	; 0
    23cc:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    23ce:	96 95       	lsr	r25
    23d0:	87 95       	ror	r24
    23d2:	3a 95       	dec	r19
    23d4:	e1 f7       	brne	.-8      	; 0x23ce <HID_Device_ProcessControlRequest+0x1fe>
    23d6:	f7 01       	movw	r30, r14
    23d8:	95 87       	std	Z+13, r25	; 0x0d
    23da:	84 87       	std	Z+12, r24	; 0x0c
    23dc:	1c c0       	rjmp	.+56     	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    23de:	80 91 3d 06 	lds	r24, 0x063D
    23e2:	81 3a       	cpi	r24, 0xA1	; 161
    23e4:	c1 f4       	brne	.+48     	; 0x2416 <HID_Device_ProcessControlRequest+0x246>
    23e6:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    23ea:	87 7f       	andi	r24, 0xF7	; 247
    23ec:	80 93 e8 00 	sts	0x00E8, r24
    23f0:	80 91 e8 00 	lds	r24, 0x00E8
    23f4:	80 ff       	sbrs	r24, 0
    23f6:	fc cf       	rjmp	.-8      	; 0x23f0 <HID_Device_ProcessControlRequest+0x220>
    23f8:	f7 01       	movw	r30, r14
    23fa:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23fc:	95 85       	ldd	r25, Z+13	; 0x0d
    23fe:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2400:	87 95       	ror	r24
    2402:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2404:	87 95       	ror	r24
    2406:	80 93 f1 00 	sts	0x00F1, r24
    240a:	80 91 e8 00 	lds	r24, 0x00E8
    240e:	8e 77       	andi	r24, 0x7E	; 126
    2410:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2414:	de db       	rcall	.-2116   	; 0x1bd2 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	7e be       	out	0x3e, r7	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	6d be       	out	0x3d, r6	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
			}

			break;
	}
}
    2424:	0f 90       	pop	r0
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	8f 90       	pop	r8
    243e:	7f 90       	pop	r7
    2440:	6f 90       	pop	r6
    2442:	08 95       	ret

00002444 <HID_Device_ConfigureEndpoints>:
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	fc 01       	movw	r30, r24
    244a:	09 96       	adiw	r24, 0x09	; 9
    244c:	dc 01       	movw	r26, r24
    244e:	87 e0       	ldi	r24, 0x07	; 7
    2450:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2452:	19 92       	st	Y+, r1
    2454:	8a 95       	dec	r24
    2456:	e9 f7       	brne	.-6      	; 0x2452 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    245c:	84 ef       	ldi	r24, 0xF4	; 244
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	95 87       	std	Z+13, r25	; 0x0d
    2462:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2468:	cf 01       	movw	r24, r30
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	75 db       	rcall	.-2326   	; 0x1b5a <Endpoint_ConfigureEndpointTable>
    2470:	df 91       	pop	r29
	  return false;

	return true;
}
    2472:	cf 91       	pop	r28
    2474:	08 95       	ret

00002476 <HID_Device_USBTask>:
    2476:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <HID_Device_USBTask+0x22>
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    24a0:	4d b6       	in	r4, 0x3d	; 61
    24a2:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    24a4:	80 91 3c 06 	lds	r24, 0x063C
    24a8:	84 30       	cpi	r24, 0x04	; 4
    24aa:	09 f0       	breq	.+2      	; 0x24ae <HID_Device_USBTask+0x38>
    24ac:	92 c0       	rjmp	.+292    	; 0x25d2 <HID_Device_USBTask+0x15c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    24ae:	80 91 e4 00 	lds	r24, 0x00E4
    24b2:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    24b6:	f7 01       	movw	r30, r14
    24b8:	22 85       	ldd	r18, Z+10	; 0x0a
    24ba:	33 85       	ldd	r19, Z+11	; 0x0b
    24bc:	28 17       	cp	r18, r24
    24be:	39 07       	cpc	r19, r25
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <HID_Device_USBTask+0x4e>
    24c2:	87 c0       	rjmp	.+270    	; 0x25d2 <HID_Device_USBTask+0x15c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24c4:	81 81       	ldd	r24, Z+1	; 0x01
    24c6:	8f 70       	andi	r24, 0x0F	; 15
    24c8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    24cc:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    24d0:	85 ff       	sbrs	r24, 5
    24d2:	7f c0       	rjmp	.+254    	; 0x25d2 <HID_Device_USBTask+0x15c>
    24d4:	7d b6       	in	r7, 0x3d	; 61
    24d6:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    24d8:	40 85       	ldd	r20, Z+8	; 0x08
    24da:	8d b7       	in	r24, 0x3d	; 61
    24dc:	9e b7       	in	r25, 0x3e	; 62
    24de:	84 1b       	sub	r24, r20
    24e0:	91 09       	sbc	r25, r1
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	9e bf       	out	0x3e, r25	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	8d bf       	out	0x3d, r24	; 61
    24ec:	0d b7       	in	r16, 0x3d	; 61
    24ee:	1e b7       	in	r17, 0x3e	; 62
    24f0:	0f 5f       	subi	r16, 0xFF	; 255
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    24f4:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    24f6:	1b 82       	std	Y+3, r1	; 0x03
    24f8:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    24fa:	b0 2e       	mov	r11, r16
    24fc:	a1 2e       	mov	r10, r17
    24fe:	c8 01       	movw	r24, r16
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	f5 d1       	rcall	.+1002   	; 0x28f2 <memset>
    2508:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    250a:	be 01       	movw	r22, r28
    250c:	6f 5f       	subi	r22, 0xFF	; 255
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	98 01       	movw	r18, r16
    2514:	8e 01       	movw	r16, r28
    2516:	0e 5f       	subi	r16, 0xFE	; 254
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	0e 94 49 04 	call	0x892	; 0x892 <CALLBACK_HID_Device_CreateHIDReport>
    251e:	18 2f       	mov	r17, r24
    2520:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2522:	84 85       	ldd	r24, Z+12	; 0x0c
    2524:	95 85       	ldd	r25, Z+13	; 0x0d
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	59 f0       	breq	.+22     	; 0x2540 <HID_Device_USBTask+0xca>
    252a:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	26 85       	ldd	r18, Z+14	; 0x0e
    2530:	37 85       	ldd	r19, Z+15	; 0x0f
    2532:	21 15       	cp	r18, r1
    2534:	31 05       	cpc	r19, r1
    2536:	11 f0       	breq	.+4      	; 0x253c <HID_Device_USBTask+0xc6>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <HID_Device_USBTask+0xce>
    2540:	88 24       	eor	r8, r8
    2542:	99 24       	eor	r9, r9
    2544:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2546:	c6 80       	ldd	r12, Z+6	; 0x06
    2548:	d7 80       	ldd	r13, Z+7	; 0x07
    254a:	c1 14       	cp	r12, r1
    254c:	d1 04       	cpc	r13, r1
    254e:	91 f0       	breq	.+36     	; 0x2574 <HID_Device_USBTask+0xfe>
    2550:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2552:	5b 81       	ldd	r21, Y+3	; 0x03
    2554:	8b 2d       	mov	r24, r11
    2556:	9a 2d       	mov	r25, r10
    2558:	b6 01       	movw	r22, r12
    255a:	b5 d1       	rcall	.+874    	; 0x28c6 <memcmp>
    255c:	01 e0       	ldi	r16, 0x01	; 1
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	09 f4       	brne	.+2      	; 0x2564 <HID_Device_USBTask+0xee>
    2562:	00 e0       	ldi	r16, 0x00	; 0
    2564:	f7 01       	movw	r30, r14
    2566:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2568:	c6 01       	movw	r24, r12
    256a:	6b 2d       	mov	r22, r11
    256c:	7a 2d       	mov	r23, r10
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	b7 d1       	rcall	.+878    	; 0x28e0 <memcpy>
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <HID_Device_USBTask+0x100>
    2574:	00 e0       	ldi	r16, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    257a:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    257c:	09 f1       	breq	.+66     	; 0x25c0 <HID_Device_USBTask+0x14a>
    257e:	11 23       	and	r17, r17
    2580:	29 f4       	brne	.+10     	; 0x258c <HID_Device_USBTask+0x116>
    2582:	00 23       	and	r16, r16
    2584:	19 f4       	brne	.+6      	; 0x258c <HID_Device_USBTask+0x116>
    2586:	81 14       	cp	r8, r1
    2588:	91 04       	cpc	r9, r1
    258a:	d1 f0       	breq	.+52     	; 0x25c0 <HID_Device_USBTask+0x14a>
    258c:	f7 01       	movw	r30, r14
    258e:	84 85       	ldd	r24, Z+12	; 0x0c
    2590:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2592:	97 87       	std	Z+15, r25	; 0x0f
    2594:	86 87       	std	Z+14, r24	; 0x0e
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	8f 70       	andi	r24, 0x0F	; 15
    259a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	88 23       	and	r24, r24
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <HID_Device_USBTask+0x132>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    25a4:	80 93 f1 00 	sts	0x00F1, r24
    25a8:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    25aa:	7b 81       	ldd	r23, Y+3	; 0x03
    25ac:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    25ae:	9a 2d       	mov	r25, r10
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	32 d9       	rcall	.-3484   	; 0x181a <Endpoint_Write_Stream_LE>
    25b6:	80 91 e8 00 	lds	r24, 0x00E8
    25ba:	8e 77       	andi	r24, 0x7E	; 126
    25bc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25c0:	80 91 e4 00 	lds	r24, 0x00E4
    25c4:	90 91 e5 00 	lds	r25, 0x00E5
    25c8:	f7 01       	movw	r30, r14
    25ca:	93 87       	std	Z+11, r25	; 0x0b
    25cc:	82 87       	std	Z+10, r24	; 0x0a
    25ce:	7d be       	out	0x3d, r7	; 61

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    25d0:	6e be       	out	0x3e, r6	; 62
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	5e be       	out	0x3e, r5	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
	}
}
    25da:	4d be       	out	0x3d, r4	; 61
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
    25f2:	bf 90       	pop	r11
    25f4:	af 90       	pop	r10
    25f6:	9f 90       	pop	r9
    25f8:	8f 90       	pop	r8
    25fa:	7f 90       	pop	r7
    25fc:	6f 90       	pop	r6
    25fe:	5f 90       	pop	r5
    2600:	4f 90       	pop	r4
    2602:	08 95       	ret

00002604 <__divsf3>:
    2604:	0c d0       	rcall	.+24     	; 0x261e <__divsf3x>
    2606:	ae c0       	rjmp	.+348    	; 0x2764 <__fp_round>
    2608:	a6 d0       	rcall	.+332    	; 0x2756 <__fp_pscB>
    260a:	40 f0       	brcs	.+16     	; 0x261c <__divsf3+0x18>
    260c:	9d d0       	rcall	.+314    	; 0x2748 <__fp_pscA>
    260e:	30 f0       	brcs	.+12     	; 0x261c <__divsf3+0x18>
    2610:	21 f4       	brne	.+8      	; 0x261a <__divsf3+0x16>
    2612:	5f 3f       	cpi	r21, 0xFF	; 255
    2614:	19 f0       	breq	.+6      	; 0x261c <__divsf3+0x18>
    2616:	8f c0       	rjmp	.+286    	; 0x2736 <__fp_inf>
    2618:	51 11       	cpse	r21, r1
    261a:	d8 c0       	rjmp	.+432    	; 0x27cc <__fp_szero>
    261c:	92 c0       	rjmp	.+292    	; 0x2742 <__fp_nan>

0000261e <__divsf3x>:
    261e:	b3 d0       	rcall	.+358    	; 0x2786 <__fp_split3>
    2620:	98 f3       	brcs	.-26     	; 0x2608 <__divsf3+0x4>

00002622 <__divsf3_pse>:
    2622:	99 23       	and	r25, r25
    2624:	c9 f3       	breq	.-14     	; 0x2618 <__divsf3+0x14>
    2626:	55 23       	and	r21, r21
    2628:	b1 f3       	breq	.-20     	; 0x2616 <__divsf3+0x12>
    262a:	95 1b       	sub	r25, r21
    262c:	55 0b       	sbc	r21, r21
    262e:	bb 27       	eor	r27, r27
    2630:	aa 27       	eor	r26, r26
    2632:	62 17       	cp	r22, r18
    2634:	73 07       	cpc	r23, r19
    2636:	84 07       	cpc	r24, r20
    2638:	38 f0       	brcs	.+14     	; 0x2648 <__divsf3_pse+0x26>
    263a:	9f 5f       	subi	r25, 0xFF	; 255
    263c:	5f 4f       	sbci	r21, 0xFF	; 255
    263e:	22 0f       	add	r18, r18
    2640:	33 1f       	adc	r19, r19
    2642:	44 1f       	adc	r20, r20
    2644:	aa 1f       	adc	r26, r26
    2646:	a9 f3       	breq	.-22     	; 0x2632 <__divsf3_pse+0x10>
    2648:	33 d0       	rcall	.+102    	; 0x26b0 <__divsf3_pse+0x8e>
    264a:	0e 2e       	mov	r0, r30
    264c:	3a f0       	brmi	.+14     	; 0x265c <__divsf3_pse+0x3a>
    264e:	e0 e8       	ldi	r30, 0x80	; 128
    2650:	30 d0       	rcall	.+96     	; 0x26b2 <__divsf3_pse+0x90>
    2652:	91 50       	subi	r25, 0x01	; 1
    2654:	50 40       	sbci	r21, 0x00	; 0
    2656:	e6 95       	lsr	r30
    2658:	00 1c       	adc	r0, r0
    265a:	ca f7       	brpl	.-14     	; 0x264e <__divsf3_pse+0x2c>
    265c:	29 d0       	rcall	.+82     	; 0x26b0 <__divsf3_pse+0x8e>
    265e:	fe 2f       	mov	r31, r30
    2660:	27 d0       	rcall	.+78     	; 0x26b0 <__divsf3_pse+0x8e>
    2662:	66 0f       	add	r22, r22
    2664:	77 1f       	adc	r23, r23
    2666:	88 1f       	adc	r24, r24
    2668:	bb 1f       	adc	r27, r27
    266a:	26 17       	cp	r18, r22
    266c:	37 07       	cpc	r19, r23
    266e:	48 07       	cpc	r20, r24
    2670:	ab 07       	cpc	r26, r27
    2672:	b0 e8       	ldi	r27, 0x80	; 128
    2674:	09 f0       	breq	.+2      	; 0x2678 <__divsf3_pse+0x56>
    2676:	bb 0b       	sbc	r27, r27
    2678:	80 2d       	mov	r24, r0
    267a:	bf 01       	movw	r22, r30
    267c:	ff 27       	eor	r31, r31
    267e:	93 58       	subi	r25, 0x83	; 131
    2680:	5f 4f       	sbci	r21, 0xFF	; 255
    2682:	2a f0       	brmi	.+10     	; 0x268e <__divsf3_pse+0x6c>
    2684:	9e 3f       	cpi	r25, 0xFE	; 254
    2686:	51 05       	cpc	r21, r1
    2688:	68 f0       	brcs	.+26     	; 0x26a4 <__divsf3_pse+0x82>
    268a:	55 c0       	rjmp	.+170    	; 0x2736 <__fp_inf>
    268c:	9f c0       	rjmp	.+318    	; 0x27cc <__fp_szero>
    268e:	5f 3f       	cpi	r21, 0xFF	; 255
    2690:	ec f3       	brlt	.-6      	; 0x268c <__divsf3_pse+0x6a>
    2692:	98 3e       	cpi	r25, 0xE8	; 232
    2694:	dc f3       	brlt	.-10     	; 0x268c <__divsf3_pse+0x6a>
    2696:	86 95       	lsr	r24
    2698:	77 95       	ror	r23
    269a:	67 95       	ror	r22
    269c:	b7 95       	ror	r27
    269e:	f7 95       	ror	r31
    26a0:	9f 5f       	subi	r25, 0xFF	; 255
    26a2:	c9 f7       	brne	.-14     	; 0x2696 <__divsf3_pse+0x74>
    26a4:	88 0f       	add	r24, r24
    26a6:	91 1d       	adc	r25, r1
    26a8:	96 95       	lsr	r25
    26aa:	87 95       	ror	r24
    26ac:	97 f9       	bld	r25, 7
    26ae:	08 95       	ret
    26b0:	e1 e0       	ldi	r30, 0x01	; 1
    26b2:	66 0f       	add	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	bb 1f       	adc	r27, r27
    26ba:	62 17       	cp	r22, r18
    26bc:	73 07       	cpc	r23, r19
    26be:	84 07       	cpc	r24, r20
    26c0:	ba 07       	cpc	r27, r26
    26c2:	20 f0       	brcs	.+8      	; 0x26cc <__divsf3_pse+0xaa>
    26c4:	62 1b       	sub	r22, r18
    26c6:	73 0b       	sbc	r23, r19
    26c8:	84 0b       	sbc	r24, r20
    26ca:	ba 0b       	sbc	r27, r26
    26cc:	ee 1f       	adc	r30, r30
    26ce:	88 f7       	brcc	.-30     	; 0x26b2 <__divsf3_pse+0x90>
    26d0:	e0 95       	com	r30
    26d2:	08 95       	ret

000026d4 <__fixsfsi>:
    26d4:	04 d0       	rcall	.+8      	; 0x26de <__fixunssfsi>
    26d6:	68 94       	set
    26d8:	b1 11       	cpse	r27, r1
    26da:	78 c0       	rjmp	.+240    	; 0x27cc <__fp_szero>
    26dc:	08 95       	ret

000026de <__fixunssfsi>:
    26de:	5b d0       	rcall	.+182    	; 0x2796 <__fp_splitA>
    26e0:	88 f0       	brcs	.+34     	; 0x2704 <__fixunssfsi+0x26>
    26e2:	9f 57       	subi	r25, 0x7F	; 127
    26e4:	90 f0       	brcs	.+36     	; 0x270a <__fixunssfsi+0x2c>
    26e6:	b9 2f       	mov	r27, r25
    26e8:	99 27       	eor	r25, r25
    26ea:	b7 51       	subi	r27, 0x17	; 23
    26ec:	a0 f0       	brcs	.+40     	; 0x2716 <__fixunssfsi+0x38>
    26ee:	d1 f0       	breq	.+52     	; 0x2724 <__fixunssfsi+0x46>
    26f0:	66 0f       	add	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	88 1f       	adc	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	1a f0       	brmi	.+6      	; 0x2700 <__fixunssfsi+0x22>
    26fa:	ba 95       	dec	r27
    26fc:	c9 f7       	brne	.-14     	; 0x26f0 <__fixunssfsi+0x12>
    26fe:	12 c0       	rjmp	.+36     	; 0x2724 <__fixunssfsi+0x46>
    2700:	b1 30       	cpi	r27, 0x01	; 1
    2702:	81 f0       	breq	.+32     	; 0x2724 <__fixunssfsi+0x46>
    2704:	62 d0       	rcall	.+196    	; 0x27ca <__fp_zero>
    2706:	b1 e0       	ldi	r27, 0x01	; 1
    2708:	08 95       	ret
    270a:	5f c0       	rjmp	.+190    	; 0x27ca <__fp_zero>
    270c:	67 2f       	mov	r22, r23
    270e:	78 2f       	mov	r23, r24
    2710:	88 27       	eor	r24, r24
    2712:	b8 5f       	subi	r27, 0xF8	; 248
    2714:	39 f0       	breq	.+14     	; 0x2724 <__fixunssfsi+0x46>
    2716:	b9 3f       	cpi	r27, 0xF9	; 249
    2718:	cc f3       	brlt	.-14     	; 0x270c <__fixunssfsi+0x2e>
    271a:	86 95       	lsr	r24
    271c:	77 95       	ror	r23
    271e:	67 95       	ror	r22
    2720:	b3 95       	inc	r27
    2722:	d9 f7       	brne	.-10     	; 0x271a <__fixunssfsi+0x3c>
    2724:	3e f4       	brtc	.+14     	; 0x2734 <__fixunssfsi+0x56>
    2726:	90 95       	com	r25
    2728:	80 95       	com	r24
    272a:	70 95       	com	r23
    272c:	61 95       	neg	r22
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	8f 4f       	sbci	r24, 0xFF	; 255
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	08 95       	ret

00002736 <__fp_inf>:
    2736:	97 f9       	bld	r25, 7
    2738:	9f 67       	ori	r25, 0x7F	; 127
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	08 95       	ret

00002742 <__fp_nan>:
    2742:	9f ef       	ldi	r25, 0xFF	; 255
    2744:	80 ec       	ldi	r24, 0xC0	; 192
    2746:	08 95       	ret

00002748 <__fp_pscA>:
    2748:	00 24       	eor	r0, r0
    274a:	0a 94       	dec	r0
    274c:	16 16       	cp	r1, r22
    274e:	17 06       	cpc	r1, r23
    2750:	18 06       	cpc	r1, r24
    2752:	09 06       	cpc	r0, r25
    2754:	08 95       	ret

00002756 <__fp_pscB>:
    2756:	00 24       	eor	r0, r0
    2758:	0a 94       	dec	r0
    275a:	12 16       	cp	r1, r18
    275c:	13 06       	cpc	r1, r19
    275e:	14 06       	cpc	r1, r20
    2760:	05 06       	cpc	r0, r21
    2762:	08 95       	ret

00002764 <__fp_round>:
    2764:	09 2e       	mov	r0, r25
    2766:	03 94       	inc	r0
    2768:	00 0c       	add	r0, r0
    276a:	11 f4       	brne	.+4      	; 0x2770 <__fp_round+0xc>
    276c:	88 23       	and	r24, r24
    276e:	52 f0       	brmi	.+20     	; 0x2784 <__fp_round+0x20>
    2770:	bb 0f       	add	r27, r27
    2772:	40 f4       	brcc	.+16     	; 0x2784 <__fp_round+0x20>
    2774:	bf 2b       	or	r27, r31
    2776:	11 f4       	brne	.+4      	; 0x277c <__fp_round+0x18>
    2778:	60 ff       	sbrs	r22, 0
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <__fp_round+0x20>
    277c:	6f 5f       	subi	r22, 0xFF	; 255
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	8f 4f       	sbci	r24, 0xFF	; 255
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	08 95       	ret

00002786 <__fp_split3>:
    2786:	57 fd       	sbrc	r21, 7
    2788:	90 58       	subi	r25, 0x80	; 128
    278a:	44 0f       	add	r20, r20
    278c:	55 1f       	adc	r21, r21
    278e:	59 f0       	breq	.+22     	; 0x27a6 <__fp_splitA+0x10>
    2790:	5f 3f       	cpi	r21, 0xFF	; 255
    2792:	71 f0       	breq	.+28     	; 0x27b0 <__fp_splitA+0x1a>
    2794:	47 95       	ror	r20

00002796 <__fp_splitA>:
    2796:	88 0f       	add	r24, r24
    2798:	97 fb       	bst	r25, 7
    279a:	99 1f       	adc	r25, r25
    279c:	61 f0       	breq	.+24     	; 0x27b6 <__fp_splitA+0x20>
    279e:	9f 3f       	cpi	r25, 0xFF	; 255
    27a0:	79 f0       	breq	.+30     	; 0x27c0 <__fp_splitA+0x2a>
    27a2:	87 95       	ror	r24
    27a4:	08 95       	ret
    27a6:	12 16       	cp	r1, r18
    27a8:	13 06       	cpc	r1, r19
    27aa:	14 06       	cpc	r1, r20
    27ac:	55 1f       	adc	r21, r21
    27ae:	f2 cf       	rjmp	.-28     	; 0x2794 <__fp_split3+0xe>
    27b0:	46 95       	lsr	r20
    27b2:	f1 df       	rcall	.-30     	; 0x2796 <__fp_splitA>
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <__fp_splitA+0x30>
    27b6:	16 16       	cp	r1, r22
    27b8:	17 06       	cpc	r1, r23
    27ba:	18 06       	cpc	r1, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	f1 cf       	rjmp	.-30     	; 0x27a2 <__fp_splitA+0xc>
    27c0:	86 95       	lsr	r24
    27c2:	71 05       	cpc	r23, r1
    27c4:	61 05       	cpc	r22, r1
    27c6:	08 94       	sec
    27c8:	08 95       	ret

000027ca <__fp_zero>:
    27ca:	e8 94       	clt

000027cc <__fp_szero>:
    27cc:	bb 27       	eor	r27, r27
    27ce:	66 27       	eor	r22, r22
    27d0:	77 27       	eor	r23, r23
    27d2:	cb 01       	movw	r24, r22
    27d4:	97 f9       	bld	r25, 7
    27d6:	08 95       	ret

000027d8 <__mulsf3>:
    27d8:	0b d0       	rcall	.+22     	; 0x27f0 <__mulsf3x>
    27da:	c4 cf       	rjmp	.-120    	; 0x2764 <__fp_round>
    27dc:	b5 df       	rcall	.-150    	; 0x2748 <__fp_pscA>
    27de:	28 f0       	brcs	.+10     	; 0x27ea <__mulsf3+0x12>
    27e0:	ba df       	rcall	.-140    	; 0x2756 <__fp_pscB>
    27e2:	18 f0       	brcs	.+6      	; 0x27ea <__mulsf3+0x12>
    27e4:	95 23       	and	r25, r21
    27e6:	09 f0       	breq	.+2      	; 0x27ea <__mulsf3+0x12>
    27e8:	a6 cf       	rjmp	.-180    	; 0x2736 <__fp_inf>
    27ea:	ab cf       	rjmp	.-170    	; 0x2742 <__fp_nan>
    27ec:	11 24       	eor	r1, r1
    27ee:	ee cf       	rjmp	.-36     	; 0x27cc <__fp_szero>

000027f0 <__mulsf3x>:
    27f0:	ca df       	rcall	.-108    	; 0x2786 <__fp_split3>
    27f2:	a0 f3       	brcs	.-24     	; 0x27dc <__mulsf3+0x4>

000027f4 <__mulsf3_pse>:
    27f4:	95 9f       	mul	r25, r21
    27f6:	d1 f3       	breq	.-12     	; 0x27ec <__mulsf3+0x14>
    27f8:	95 0f       	add	r25, r21
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	55 1f       	adc	r21, r21
    27fe:	62 9f       	mul	r22, r18
    2800:	f0 01       	movw	r30, r0
    2802:	72 9f       	mul	r23, r18
    2804:	bb 27       	eor	r27, r27
    2806:	f0 0d       	add	r31, r0
    2808:	b1 1d       	adc	r27, r1
    280a:	63 9f       	mul	r22, r19
    280c:	aa 27       	eor	r26, r26
    280e:	f0 0d       	add	r31, r0
    2810:	b1 1d       	adc	r27, r1
    2812:	aa 1f       	adc	r26, r26
    2814:	64 9f       	mul	r22, r20
    2816:	66 27       	eor	r22, r22
    2818:	b0 0d       	add	r27, r0
    281a:	a1 1d       	adc	r26, r1
    281c:	66 1f       	adc	r22, r22
    281e:	82 9f       	mul	r24, r18
    2820:	22 27       	eor	r18, r18
    2822:	b0 0d       	add	r27, r0
    2824:	a1 1d       	adc	r26, r1
    2826:	62 1f       	adc	r22, r18
    2828:	73 9f       	mul	r23, r19
    282a:	b0 0d       	add	r27, r0
    282c:	a1 1d       	adc	r26, r1
    282e:	62 1f       	adc	r22, r18
    2830:	83 9f       	mul	r24, r19
    2832:	a0 0d       	add	r26, r0
    2834:	61 1d       	adc	r22, r1
    2836:	22 1f       	adc	r18, r18
    2838:	74 9f       	mul	r23, r20
    283a:	33 27       	eor	r19, r19
    283c:	a0 0d       	add	r26, r0
    283e:	61 1d       	adc	r22, r1
    2840:	23 1f       	adc	r18, r19
    2842:	84 9f       	mul	r24, r20
    2844:	60 0d       	add	r22, r0
    2846:	21 1d       	adc	r18, r1
    2848:	82 2f       	mov	r24, r18
    284a:	76 2f       	mov	r23, r22
    284c:	6a 2f       	mov	r22, r26
    284e:	11 24       	eor	r1, r1
    2850:	9f 57       	subi	r25, 0x7F	; 127
    2852:	50 40       	sbci	r21, 0x00	; 0
    2854:	8a f0       	brmi	.+34     	; 0x2878 <__mulsf3_pse+0x84>
    2856:	e1 f0       	breq	.+56     	; 0x2890 <__mulsf3_pse+0x9c>
    2858:	88 23       	and	r24, r24
    285a:	4a f0       	brmi	.+18     	; 0x286e <__mulsf3_pse+0x7a>
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	bb 1f       	adc	r27, r27
    2862:	66 1f       	adc	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	88 1f       	adc	r24, r24
    2868:	91 50       	subi	r25, 0x01	; 1
    286a:	50 40       	sbci	r21, 0x00	; 0
    286c:	a9 f7       	brne	.-22     	; 0x2858 <__mulsf3_pse+0x64>
    286e:	9e 3f       	cpi	r25, 0xFE	; 254
    2870:	51 05       	cpc	r21, r1
    2872:	70 f0       	brcs	.+28     	; 0x2890 <__mulsf3_pse+0x9c>
    2874:	60 cf       	rjmp	.-320    	; 0x2736 <__fp_inf>
    2876:	aa cf       	rjmp	.-172    	; 0x27cc <__fp_szero>
    2878:	5f 3f       	cpi	r21, 0xFF	; 255
    287a:	ec f3       	brlt	.-6      	; 0x2876 <__mulsf3_pse+0x82>
    287c:	98 3e       	cpi	r25, 0xE8	; 232
    287e:	dc f3       	brlt	.-10     	; 0x2876 <__mulsf3_pse+0x82>
    2880:	86 95       	lsr	r24
    2882:	77 95       	ror	r23
    2884:	67 95       	ror	r22
    2886:	b7 95       	ror	r27
    2888:	f7 95       	ror	r31
    288a:	e7 95       	ror	r30
    288c:	9f 5f       	subi	r25, 0xFF	; 255
    288e:	c1 f7       	brne	.-16     	; 0x2880 <__mulsf3_pse+0x8c>
    2890:	fe 2b       	or	r31, r30
    2892:	88 0f       	add	r24, r24
    2894:	91 1d       	adc	r25, r1
    2896:	96 95       	lsr	r25
    2898:	87 95       	ror	r24
    289a:	97 f9       	bld	r25, 7
    289c:	08 95       	ret

0000289e <__udivmodhi4>:
    289e:	aa 1b       	sub	r26, r26
    28a0:	bb 1b       	sub	r27, r27
    28a2:	51 e1       	ldi	r21, 0x11	; 17
    28a4:	07 c0       	rjmp	.+14     	; 0x28b4 <__udivmodhi4_ep>

000028a6 <__udivmodhi4_loop>:
    28a6:	aa 1f       	adc	r26, r26
    28a8:	bb 1f       	adc	r27, r27
    28aa:	a6 17       	cp	r26, r22
    28ac:	b7 07       	cpc	r27, r23
    28ae:	10 f0       	brcs	.+4      	; 0x28b4 <__udivmodhi4_ep>
    28b0:	a6 1b       	sub	r26, r22
    28b2:	b7 0b       	sbc	r27, r23

000028b4 <__udivmodhi4_ep>:
    28b4:	88 1f       	adc	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	5a 95       	dec	r21
    28ba:	a9 f7       	brne	.-22     	; 0x28a6 <__udivmodhi4_loop>
    28bc:	80 95       	com	r24
    28be:	90 95       	com	r25
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	08 95       	ret

000028c6 <memcmp>:
    28c6:	fb 01       	movw	r30, r22
    28c8:	dc 01       	movw	r26, r24
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <memcmp+0xe>
    28cc:	8d 91       	ld	r24, X+
    28ce:	01 90       	ld	r0, Z+
    28d0:	80 19       	sub	r24, r0
    28d2:	21 f4       	brne	.+8      	; 0x28dc <memcmp+0x16>
    28d4:	41 50       	subi	r20, 0x01	; 1
    28d6:	50 40       	sbci	r21, 0x00	; 0
    28d8:	c8 f7       	brcc	.-14     	; 0x28cc <memcmp+0x6>
    28da:	88 1b       	sub	r24, r24
    28dc:	99 0b       	sbc	r25, r25
    28de:	08 95       	ret

000028e0 <memcpy>:
    28e0:	fb 01       	movw	r30, r22
    28e2:	dc 01       	movw	r26, r24
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <memcpy+0xa>
    28e6:	01 90       	ld	r0, Z+
    28e8:	0d 92       	st	X+, r0
    28ea:	41 50       	subi	r20, 0x01	; 1
    28ec:	50 40       	sbci	r21, 0x00	; 0
    28ee:	d8 f7       	brcc	.-10     	; 0x28e6 <memcpy+0x6>
    28f0:	08 95       	ret

000028f2 <memset>:
    28f2:	dc 01       	movw	r26, r24
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <memset+0x6>
    28f6:	6d 93       	st	X+, r22
    28f8:	41 50       	subi	r20, 0x01	; 1
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	e0 f7       	brcc	.-8      	; 0x28f6 <memset+0x4>
    28fe:	08 95       	ret

00002900 <_exit>:
    2900:	f8 94       	cli

00002902 <__stop_program>:
    2902:	ff cf       	rjmp	.-2      	; 0x2902 <__stop_program>
