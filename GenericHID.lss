
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00002988  00002a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000320  0080033a  0080033a  00002c56  2**0
                  ALLOC
  3 .noinit       00000004  0080065a  0080065a  00002c56  2**0
                  ALLOC
  4 .stab         00002808  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000096f  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000007e8  00000000  00000000  00005dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cfb1  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e49  00000000  00000000  00013569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000052e8  00000000  00000000  000163b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001634  00000000  00000000  0001b69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000047e2  00000000  00000000  0001ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000081b5  00000000  00000000  000214b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000db0  00000000  00000000  00029667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b7 c2       	rjmp	.+1390   	; 0x570 <__ctors_end>
       2:	00 00       	nop
       4:	ef c2       	rjmp	.+1502   	; 0x5e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	ed c2       	rjmp	.+1498   	; 0x5e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	eb c2       	rjmp	.+1494   	; 0x5e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	e9 c2       	rjmp	.+1490   	; 0x5e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	e7 c2       	rjmp	.+1486   	; 0x5e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	e5 c2       	rjmp	.+1482   	; 0x5e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e3 c2       	rjmp	.+1478   	; 0x5e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e1 c2       	rjmp	.+1474   	; 0x5e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	df c2       	rjmp	.+1470   	; 0x5e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__vector_10>
      2c:	db c2       	rjmp	.+1462   	; 0x5e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d9 c2       	rjmp	.+1458   	; 0x5e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	d7 c2       	rjmp	.+1454   	; 0x5e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	d5 c2       	rjmp	.+1450   	; 0x5e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d3 c2       	rjmp	.+1446   	; 0x5e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d1 c2       	rjmp	.+1442   	; 0x5e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	cf c2       	rjmp	.+1438   	; 0x5e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	cd c2       	rjmp	.+1434   	; 0x5e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cb c2       	rjmp	.+1430   	; 0x5e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c9 c2       	rjmp	.+1426   	; 0x5e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_21>
      58:	c5 c2       	rjmp	.+1418   	; 0x5e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c3 c2       	rjmp	.+1414   	; 0x5e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c1 c2       	rjmp	.+1410   	; 0x5e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	bf c2       	rjmp	.+1406   	; 0x5e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	bd c2       	rjmp	.+1402   	; 0x5e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bb c2       	rjmp	.+1398   	; 0x5e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b9 c2       	rjmp	.+1394   	; 0x5e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	b7 c2       	rjmp	.+1390   	; 0x5e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	b5 c2       	rjmp	.+1386   	; 0x5e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b3 c2       	rjmp	.+1382   	; 0x5e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b1 c2       	rjmp	.+1378   	; 0x5e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	af c2       	rjmp	.+1374   	; 0x5e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	ad c2       	rjmp	.+1370   	; 0x5e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ab c2       	rjmp	.+1366   	; 0x5e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a9 c2       	rjmp	.+1362   	; 0x5e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	a7 c2       	rjmp	.+1358   	; 0x5e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	a5 c2       	rjmp	.+1354   	; 0x5e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a3 c2       	rjmp	.+1350   	; 0x5e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a1 c2       	rjmp	.+1346   	; 0x5e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9f c2       	rjmp	.+1342   	; 0x5e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9d c2       	rjmp	.+1338   	; 0x5e4 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <pstr_ROC>:
      ac:	08 47 49 56 45 5f 52 4f 43 00                       .GIVE_ROC.

000000b6 <pstr_LIDOCANE>:
      b6:	0d 47 49 56 45 5f 4c 49 44 4f 43 41 4e 45 00        .GIVE_LIDOCANE.

000000c5 <pstr_PROPOFOL>:
      c5:	0d 47 49 56 45 5f 50 52 4f 50 4f 46 4f 4c 00        .GIVE_PROPOFOL.

000000d4 <pstr_ANTIBIOTICS>:
      d4:	10 47 49 56 45 5f 41 4e 54 49 42 49 4f 54 49 43     .GIVE_ANTIBIOTIC
      e4:	53 00                                               S.

000000e6 <pstr_KETAMINE>:
      e6:	0d 47 49 56 45 5f 4b 45 54 41 4d 49 4e 45 00        .GIVE_KETAMINE.

000000f5 <pstr_FENTANYL>:
      f5:	0d 47 49 56 45 5f 46 45 4e 54 41 4e 59 4c 00        .GIVE_FENTANYL.

00000104 <pstr_MORPHINE>:
     104:	0d 47 49 56 45 5f 4d 4f 52 50 48 49 4e 45 00        .GIVE_MORPHINE.

00000113 <pstr_ETOMIDATE>:
     113:	0e 47 49 56 45 5f 45 54 4f 4d 49 44 41 54 45 00     .GIVE_ETOMIDATE.

00000123 <heat_str>:
     123:	04 48 45 41 54 00                                   .HEAT.

00000129 <blip_str>:
     129:	04 42 4c 49 50 00                                   .BLIP.

0000012f <device_name_string>:
     12f:	0d 41 4d 4d 5f 50 72 6f 78 69 6d 69 74 79 00        .AMM_Proximity.

0000013e <iv_arm_msg>:
     13e:	0d 41 52 4d 5f 52 5f 49 56 5f 43 41 54 48 00        .ARM_R_IV_CATH.

0000014d <eschar_msg_5>:
     14d:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 35 00     .ARM_L_ESCHAR_5.

0000015d <eschar_msg_4>:
     15d:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 34 00     .ARM_L_ESCHAR_4.

0000016d <eschar_msg_3>:
     16d:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 33 00     .ARM_L_ESCHAR_3.

0000017d <eschar_msg_2>:
     17d:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 32 00     .ARM_L_ESCHAR_2.

0000018d <eschar_msg_1>:
     18d:	0e 41 52 4d 5f 4c 5f 45 53 43 48 41 52 5f 31 00     .ARM_L_ESCHAR_1.

0000019d <o2_msg_str>:
     19d:	02 4f 32 00                                         .O2.

000001a1 <hypervent_msg_str>:
     1a1:	16 4d 41 53 4b 5f 48 59 50 45 52 56 45 4e 54 49     .MASK_HYPERVENTI
     1b1:	4c 41 54 45 5f 50 54 00                             LATE_PT.

000001b9 <mainstem_msg_str>:
     1b9:	1c 4d 41 49 4e 53 54 45 4d 5f 56 45 4e 54 49 4c     .MAINSTEM_VENTIL
     1c9:	41 54 49 4f 4e 5f 45 54 5f 54 55 42 45 00           ATION_ET_TUBE.

000001d7 <bvm_off_msg_str>:
     1d7:	07 42 56 4d 5f 4f 46 46 00                          .BVM_OFF.

000001e0 <vent_msg_str>:
     1e0:	13 56 45 4e 54 49 4c 41 54 49 4f 4e 5f 45 54 5f     .VENTILATION_ET_
     1f0:	54 55 42 45 00                                      TUBE.

000001f5 <esophageal_msg_str>:
     1f5:	1e 45 53 4f 50 48 41 47 45 41 4c 5f 56 45 4e 54     .ESOPHAGEAL_VENT
     205:	49 4c 41 54 49 4f 4e 5f 45 54 5f 54 55 42 45 00     ILATION_ET_TUBE.

00000215 <bio_report_string>:
     215:	20 48 45 41 52 54 5f 52 41 54 45 3d 31 33 66 2c      HEART_RATE=13f,
     225:	41 43 54 3d 31 38 73 2c 50 52 4f 58 3d 31 39 73     ACT=18s,PROX=19s
     235:	2c 00                                               ,.

00000237 <ProductString>:
     237:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
     247:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
     257:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

00000265 <ManufacturerString>:
     265:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     275:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000027f <LanguageString>:
     27f:	04 03 09 04                                         ....

00000283 <ConfigurationDescriptor>:
     283:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     293:	00 00 09 21 11 01 00 01 22 ca 01 07 05 81 03 08     ...!....".......
     2a3:	00 05                                               ..

000002a5 <DeviceDescriptor>:
     2a5:	12 01 10 01 00 00 00 08 eb 03 40 20 01 00 01 02     ..........@ ....
     2b5:	00 01                                               ..

000002b7 <GenericReport>:
     2b7:	06 00 ff 09 01 a1 01 85 01 09 02 15 00 26 ff 00     .............&..
     2c7:	75 08 95 fe b1 02 85 02 09 02 15 00 26 ff 00 75     u...........&..u
     2d7:	08 95 ff b1 02 85 03 09 05 15 00 26 ff 00 75 08     ...........&..u.
     2e7:	95 06 81 00 85 04 09 06 15 00 26 ff 00 75 08 95     ..........&..u..
     2f7:	08 b1 02 85 05 09 07 15 00 26 ff 00 75 08 95 0c     .........&..u...
     307:	81 02 85 06 09 08 15 00 26 ff 00 75 08 95 10 b1     ........&..u....
     317:	02 85 07 09 09 15 00 26 ff 00 75 08 95 0d 81 02     .......&..u.....
     327:	85 ff 09 0a 15 00 26 ff 00 75 08 95 08 b1 02 85     ......&..u......
     337:	fe 09 0b 15 00 26 ff 00 75 08 95 08 b1 02 85 08     .....&..u.......
     347:	09 0c 15 00 26 ff 00 75 08 95 04 81 02 85 08 09     ....&..u........
     357:	0c 15 00 26 ff 00 75 08 95 04 91 02 85 09 09 0c     ...&..u.........
     367:	15 00 26 ff 00 75 08 95 04 81 02 85 09 09 0c 15     ..&..u..........
     377:	00 26 ff 00 75 08 95 04 91 02 85 0a 09 0c 15 00     .&..u...........
     387:	26 ff 00 75 08 95 04 81 02 85 0a 09 0c 15 00 26     &..u...........&
     397:	ff 00 75 08 95 04 91 02 85 0b 09 0c 15 00 26 ff     ..u...........&.
     3a7:	00 75 08 95 04 81 02 85 0b 09 0c 15 00 26 ff 00     .u...........&..
     3b7:	75 08 95 04 91 02 85 0c 09 0c 15 00 26 ff 00 75     u...........&..u
     3c7:	08 95 04 81 02 85 0c 09 0c 15 00 26 ff 00 75 08     ...........&..u.
     3d7:	95 04 91 02 85 0d 09 0c 15 00 26 ff 00 75 08 95     ..........&..u..
     3e7:	04 81 02 85 0d 09 0c 15 00 26 ff 00 75 08 95 04     .........&..u...
     3f7:	91 02 85 0e 09 0c 15 00 26 ff 00 75 08 95 04 81     ........&..u....
     407:	02 85 0e 09 0c 15 00 26 ff 00 75 08 95 04 91 02     .......&..u.....
     417:	85 0f 09 00 15 00 26 ff 00 75 08 95 04 b1 02 85     ......&..u......
     427:	10 09 0d 15 00 26 ff 00 75 08 95 40 81 02 85 11     .....&..u..@....
     437:	09 0d 15 00 26 ff 00 75 08 95 01 91 02 85 12 09     ....&..u........
     447:	0e 15 00 26 ff 00 75 08 95 ff 81 02 85 12 09 0e     ...&..u.........
     457:	15 00 26 ff 00 75 08 95 ff 91 02 85 13 09 0f 15     ..&..u..........
     467:	00 26 ff 00 75 08 95 ff 81 02 85 13 09 0f 15 00     .&..u...........
     477:	26 ff 00 75 08 95 ff 91 02 c0                       &..u......

00000481 <o2_str>:
     481:	02 4f 32 00                                         .O2.

00000485 <temp_probe_str>:
     485:	0a 54 45 4d 50 5f 50 52 4f 42 45 00                 .TEMP_PROBE.

00000491 <pulse_ox_str>:
     491:	08 50 55 4c 53 45 5f 4f 58 00                       .PULSE_OX.

0000049b <bp_cuff_str>:
     49b:	07 42 50 5f 43 55 46 46 00                          .BP_CUFF.

000004a4 <ecg_str>:
     4a4:	03 45 43 47 00                                      .ECG.

000004a9 <fluids_str>:
     4a9:	06 46 4c 55 49 44 53 00                             .FLUIDS.

000004b1 <roc_str>:
     4b1:	03 52 4f 43 00                                      .ROC.

000004b6 <lidocane_str>:
     4b6:	08 4c 49 44 4f 43 41 4e 45 00                       .LIDOCANE.

000004c0 <propofol_str>:
     4c0:	08 50 52 4f 50 4f 46 4f 4c 00                       .PROPOFOL.

000004ca <antibiotics_str>:
     4ca:	0b 41 4e 54 49 42 49 4f 54 49 43 53 00              .ANTIBIOTICS.

000004d7 <ketamine_str>:
     4d7:	08 4b 45 54 41 4d 49 4e 45 00                       .KETAMINE.

000004e1 <fentanyl_str>:
     4e1:	08 46 45 4e 54 41 4e 59 4c 00                       .FENTANYL.

000004eb <morphine_str>:
     4eb:	08 4d 4f 52 50 48 49 4e 45 00                       .MORPHINE.

000004f5 <succs_str>:
     4f5:	05 53 55 43 43 53 00                                .SUCCS.

000004fc <etomidate_str>:
     4fc:	09 45 54 4f 4d 49 44 41 54 45 00                    .ETOMIDATE.

00000507 <vent_str>:
     507:	04 56 45 4e 54 00                                   .VENT.

0000050d <bvm_str>:
     50d:	03 42 56 4d 00                                      .BVM.

00000512 <iv_connected_str>:
     512:	0d 41 52 4d 5f 52 5f 49 56 5f 43 41 54 48 00        .ARM_R_IV_CATH.

00000521 <pstr_rcv_ROC>:
     521:	03 52 4f 43 00                                      .ROC.

00000526 <pstr_rcv_LIDOCANE>:
     526:	08 4c 49 44 4f 43 41 4e 45 00                       .LIDOCANE.

00000530 <pstr_rcv_PROPOFOL>:
     530:	08 50 52 4f 50 4f 46 4f 4c 00                       .PROPOFOL.

0000053a <pstr_rcv_ANTIBIOTICS>:
     53a:	0b 41 4e 54 49 42 49 4f 54 49 43 53 00              .ANTIBIOTICS.

00000547 <pstr_rcv_KETAMINE>:
     547:	08 4b 45 54 41 4d 49 4e 45 00                       .KETAMINE.

00000551 <pstr_rcv_FENTANYL>:
     551:	08 46 45 4e 54 41 4e 59 4c 00                       .FENTANYL.

0000055b <pstr_rcv_MORPHINE>:
     55b:	08 4d 4f 52 50 48 49 4e 45 00                       .MORPHINE.

00000565 <pstr_rcv_ETOMIDATE>:
     565:	09 45 54 4f 4d 49 44 41 54 45 00                    .ETOMIDATE.

00000570 <__ctors_end>:
     570:	11 24       	eor	r1, r1
     572:	1f be       	out	0x3f, r1	; 63
     574:	cf ef       	ldi	r28, 0xFF	; 255
     576:	da e0       	ldi	r29, 0x0A	; 10
     578:	de bf       	out	0x3e, r29	; 62
     57a:	cd bf       	out	0x3d, r28	; 61

0000057c <Bootloader_Jump_Check>:
/* the bootloader stuff */
uint32_t Boot_Key ATTR_NO_INIT;
void Bootloader_Jump_Check(void)
{
    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))
     57c:	04 b6       	in	r0, 0x34	; 52
     57e:	03 fe       	sbrs	r0, 3
     580:	1b c0       	rjmp	.+54     	; 0x5b8 <__do_copy_data>
     582:	80 91 5a 06 	lds	r24, 0x065A
     586:	90 91 5b 06 	lds	r25, 0x065B
     58a:	a0 91 5c 06 	lds	r26, 0x065C
     58e:	b0 91 5d 06 	lds	r27, 0x065D
     592:	8a 3c       	cpi	r24, 0xCA	; 202
     594:	2c ea       	ldi	r18, 0xAC	; 172
     596:	92 07       	cpc	r25, r18
     598:	22 e4       	ldi	r18, 0x42	; 66
     59a:	a2 07       	cpc	r26, r18
     59c:	2c ed       	ldi	r18, 0xDC	; 220
     59e:	b2 07       	cpc	r27, r18
     5a0:	59 f4       	brne	.+22     	; 0x5b8 <__do_copy_data>
    {
		//overwrite boot key so that if the code that's loaded used the same location and value it will not re-bootload.
		//MCUSR &= 0 ; //~(1 << WDRF);
        Boot_Key = 0;
     5a2:	10 92 5a 06 	sts	0x065A, r1
     5a6:	10 92 5b 06 	sts	0x065B, r1
     5aa:	10 92 5c 06 	sts	0x065C, r1
     5ae:	10 92 5d 06 	sts	0x065D, r1
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     5b2:	e0 e0       	ldi	r30, 0x00	; 0
     5b4:	f8 e3       	ldi	r31, 0x38	; 56
     5b6:	09 95       	icall

000005b8 <__do_copy_data>:
     5b8:	13 e0       	ldi	r17, 0x03	; 3
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b1 e0       	ldi	r27, 0x01	; 1
     5be:	e8 e8       	ldi	r30, 0x88	; 136
     5c0:	f9 e2       	ldi	r31, 0x29	; 41
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__do_copy_data+0x10>
     5c4:	05 90       	lpm	r0, Z+
     5c6:	0d 92       	st	X+, r0
     5c8:	aa 33       	cpi	r26, 0x3A	; 58
     5ca:	b1 07       	cpc	r27, r17
     5cc:	d9 f7       	brne	.-10     	; 0x5c4 <__do_copy_data+0xc>

000005ce <__do_clear_bss>:
     5ce:	16 e0       	ldi	r17, 0x06	; 6
     5d0:	aa e3       	ldi	r26, 0x3A	; 58
     5d2:	b3 e0       	ldi	r27, 0x03	; 3
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <.do_clear_bss_start>

000005d6 <.do_clear_bss_loop>:
     5d6:	1d 92       	st	X+, r1

000005d8 <.do_clear_bss_start>:
     5d8:	aa 35       	cpi	r26, 0x5A	; 90
     5da:	b1 07       	cpc	r27, r17
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <.do_clear_bss_loop>
     5de:	ac d0       	rcall	.+344    	; 0x738 <main>
     5e0:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <_exit>

000005e4 <__bad_interrupt>:
     5e4:	0d cd       	rjmp	.-1510   	; 0x0 <__vectors>

000005e6 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     5e6:	25 b1       	in	r18, 0x05	; 5
     5e8:	98 2f       	mov	r25, r24
     5ea:	91 70       	andi	r25, 0x01	; 1
     5ec:	90 95       	com	r25
     5ee:	21 60       	ori	r18, 0x01	; 1
     5f0:	92 23       	and	r25, r18
     5f2:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     5f4:	2b b1       	in	r18, 0x0b	; 11
     5f6:	98 2f       	mov	r25, r24
     5f8:	90 72       	andi	r25, 0x20	; 32
     5fa:	90 95       	com	r25
     5fc:	20 62       	ori	r18, 0x20	; 32
     5fe:	92 23       	and	r25, r18
     600:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     602:	98 b1       	in	r25, 0x08	; 8
     604:	80 78       	andi	r24, 0x80	; 128
     606:	9f 77       	andi	r25, 0x7F	; 127
     608:	89 2b       	or	r24, r25
     60a:	88 b9       	out	0x08, r24	; 8
			}
     60c:	08 95       	ret

0000060e <Jump_To_Bootloader>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     60e:	80 91 e0 00 	lds	r24, 0x00E0
     612:	81 60       	ori	r24, 0x01	; 1
     614:	80 93 e0 00 	sts	0x00E0, r24
{
    // If USB is used, detach from the bus and reset it
    //USB_Disable();
	USB_Detach();
    // Disable all interrupts
    cli();
     618:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9d e3       	ldi	r25, 0x3D	; 61
     61e:	a9 e4       	ldi	r26, 0x49	; 73
     620:	81 50       	subi	r24, 0x01	; 1
     622:	90 40       	sbci	r25, 0x00	; 0
     624:	a0 40       	sbci	r26, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <Jump_To_Bootloader+0x12>
     628:	00 c0       	rjmp	.+0      	; 0x62a <Jump_To_Bootloader+0x1c>
     62a:	00 00       	nop
    // Wait two seconds for the USB detachment to register on the host
    Delay_MS(1500);
    // Set the bootloader key to the magic value and force a reset
    Boot_Key = MAGIC_BOOT_KEY;
     62c:	8a ec       	ldi	r24, 0xCA	; 202
     62e:	9c ea       	ldi	r25, 0xAC	; 172
     630:	a2 e4       	ldi	r26, 0x42	; 66
     632:	bc ed       	ldi	r27, 0xDC	; 220
     634:	80 93 5a 06 	sts	0x065A, r24
     638:	90 93 5b 06 	sts	0x065B, r25
     63c:	a0 93 5c 06 	sts	0x065C, r26
     640:	b0 93 5d 06 	sts	0x065D, r27
    wdt_enable(WDTO_500MS);
     644:	2d e0       	ldi	r18, 0x0D	; 13
     646:	88 e1       	ldi	r24, 0x18	; 24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	a8 95       	wdr
     650:	80 93 60 00 	sts	0x0060, r24
     654:	0f be       	out	0x3f, r0	; 63
     656:	20 93 60 00 	sts	0x0060, r18
     65a:	ff cf       	rjmp	.-2      	; 0x65a <Jump_To_Bootloader+0x4c>

0000065c <adc_read>:

uint16_t adc_values[12];

uint16_t adc_read(int pin) {
	uint8_t lo, hi;
	uint8_t pinlo = pin & 0x1f;
     65c:	98 2f       	mov	r25, r24
     65e:	9f 71       	andi	r25, 0x1F	; 31
	
	bool pinhi = pin & 0x20;
	if (pinhi) { //TODO optimize away the if
     660:	85 ff       	sbrs	r24, 5
     662:	04 c0       	rjmp	.+8      	; 0x66c <adc_read+0x10>
		ADCSRB |= (1<<MUX5);
     664:	80 91 7b 00 	lds	r24, 0x007B
     668:	80 62       	ori	r24, 0x20	; 32
     66a:	03 c0       	rjmp	.+6      	; 0x672 <adc_read+0x16>
	} else {
		ADCSRB &= ~(1<<MUX5);
     66c:	80 91 7b 00 	lds	r24, 0x007B
     670:	8f 7d       	andi	r24, 0xDF	; 223
     672:	80 93 7b 00 	sts	0x007B, r24
	}
	
	//ADMUX &= 0xf8; //clear low pins
	//ADMUX |= pinlo;
	ADMUX = (ADMUX & 0xe0) | pinlo; //clear low pins
     676:	80 91 7c 00 	lds	r24, 0x007C
     67a:	80 7e       	andi	r24, 0xE0	; 224
     67c:	89 2b       	or	r24, r25
     67e:	80 93 7c 00 	sts	0x007C, r24
	
	ADCSRA |= (1<<ADSC); //get an adc value
     682:	80 91 7a 00 	lds	r24, 0x007A
     686:	80 64       	ori	r24, 0x40	; 64
     688:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1<<ADSC)); //Wait for it to do the adc
     68c:	80 91 7a 00 	lds	r24, 0x007A
     690:	86 fd       	sbrc	r24, 6
     692:	fc cf       	rjmp	.-8      	; 0x68c <adc_read+0x30>
	lo = ADCL;
     694:	80 91 78 00 	lds	r24, 0x0078
	hi = ADCH;
     698:	90 91 79 00 	lds	r25, 0x0079
	return (hi << 8) | lo;
     69c:	39 2f       	mov	r19, r25
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	82 2b       	or	r24, r18
     6a4:	93 2b       	or	r25, r19
}
     6a6:	08 95       	ret

000006a8 <adc_task>:

void adc_task(void) {
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	int i;
	for (i = 0; i < 9; i++) {
     6b0:	04 ea       	ldi	r16, 0xA4	; 164
     6b2:	15 e0       	ldi	r17, 0x05	; 5
     6b4:	c0 e0       	ldi	r28, 0x00	; 0
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
		adc_values[i] = adc_read(i);
     6b8:	ce 01       	movw	r24, r28
     6ba:	d0 df       	rcall	.-96     	; 0x65c <adc_read>
     6bc:	f8 01       	movw	r30, r16
     6be:	81 93       	st	Z+, r24
     6c0:	91 93       	st	Z+, r25
     6c2:	8f 01       	movw	r16, r30
     6c4:	21 96       	adiw	r28, 0x01	; 1
	return (hi << 8) | lo;
}

void adc_task(void) {
	int i;
	for (i = 0; i < 9; i++) {
     6c6:	c9 30       	cpi	r28, 0x09	; 9
     6c8:	d1 05       	cpc	r29, r1
     6ca:	b1 f7       	brne	.-20     	; 0x6b8 <adc_task+0x10>
     6cc:	df 91       	pop	r29
		adc_values[i] = adc_read(i);
	}
}
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <SetupHardware>:
     6d6:	84 b7       	in	r24, 0x34	; 52
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     6d8:	87 7f       	andi	r24, 0xF7	; 247
     6da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     6dc:	88 e1       	ldi	r24, 0x18	; 24
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	80 93 60 00 	sts	0x0060, r24
     6e6:	10 92 60 00 	sts	0x0060, r1
     6ea:	0f be       	out	0x3f, r0	; 63
	/* disable digital input buffer */
	DIDR1 &= ~(1<<AIN0D);
	DIDR0 |= 0xff;
#endif
	/* enable and configure ADC */
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); /* sets clock division */ 
     6ec:	ea e7       	ldi	r30, 0x7A	; 122
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	87 60       	ori	r24, 0x07	; 7
     6f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); /*enable*/
     6f6:	80 81       	ld	r24, Z
     6f8:	80 68       	ori	r24, 0x80	; 128
     6fa:	80 83       	st	Z, r24
	/* to select channel, write to ADMUX */
	//ADCSRB |= MUX5;
	//ADMUX = 2; /* ADC channel 10? */

	ADMUX = (1<<REFS0) /*| (1<<REFS1)*/; /* set ref, arduino uses 1<<6 */
     6fc:	80 e4       	ldi	r24, 0x40	; 64
     6fe:	80 93 7c 00 	sts	0x007C, r24
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	80 93 61 00 	sts	0x0061, r24
     70e:	90 93 61 00 	sts	0x0061, r25
     712:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
	ADCSRA |= (1<<ADSC); /* do the longer first conversion */
     714:	80 81       	ld	r24, Z
     716:	80 64       	ori	r24, 0x40	; 64
     718:	80 83       	st	Z, r24
	
	/* set pin 7 (on schematic: D7 = PE6) as input */
	/* all pins are input by default */
	/* enable pullup resistor */
	PORTE |= (1<<PE6);
     71a:	76 9a       	sbi	0x0e, 6	; 14
	
	/* enable pins as output */
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB3);
     71c:	84 b1       	in	r24, 0x04	; 4
     71e:	8e 60       	ori	r24, 0x0E	; 14
     720:	84 b9       	out	0x04, r24	; 4
	//DDRC |= (1<<PC6) | (1<<PC7); 
	
	//from e arm, ove later
	DDRB |= (1<<PB6) | (1<<PB7);
     722:	84 b1       	in	r24, 0x04	; 4
     724:	80 6c       	ori	r24, 0xC0	; 192
     726:	84 b9       	out	0x04, r24	; 4

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     728:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     72a:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     72c:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     72e:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     730:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     732:	47 98       	cbi	0x08, 7	; 8
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     734:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <USB_Init>

00000738 <main>:
}
     738:	ce df       	rcall	.-100    	; 0x6d6 <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     73a:	8c d5       	rcall	.+2840   	; 0x1254 <setup_timer>
	setup_timer();
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	53 df       	rcall	.-346    	; 0x5e6 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     740:	78 94       	sei
     742:	84 ea       	ldi	r24, 0xA4	; 164
     744:	91 e0       	ldi	r25, 0x01	; 1
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     746:	0e 94 7d 12 	call	0x24fa	; 0x24fa <HID_Device_USBTask>
	//pulse_init(); // moved, so that pulse does not start immediately
	//rfid_init();

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
     74a:	0e 94 0e 11 	call	0x221c	; 0x221c <USB_USBTask>
     74e:	ac df       	rcall	.-168    	; 0x6a8 <adc_task>
		USB_USBTask();
     750:	84 ea       	ldi	r24, 0xA4	; 164
     752:	95 e0       	ldi	r25, 0x05	; 5
		adc_task();
     754:	c5 d7       	rcall	.+3978   	; 0x16e0 <flowsensor_task>
     756:	f5 cf       	rjmp	.-22     	; 0x742 <main+0xa>

00000758 <EVENT_USB_Device_Connect>:
		//eschar_task(adc_values);
		//pulse_task();
		//rfid_task();
		//parsed_rfid_ready = try_parse_message();
		
		flowsensor_task(adc_values);
     758:	80 ea       	ldi	r24, 0xA0	; 160
     75a:	45 cf       	rjmp	.-374    	; 0x5e6 <LEDs_SetAllLEDs>

0000075c <EVENT_USB_Device_Disconnect>:
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	43 cf       	rjmp	.-378    	; 0x5e6 <LEDs_SetAllLEDs>

00000760 <EVENT_USB_Device_ConfigurationChanged>:
     760:	84 ea       	ldi	r24, 0xA4	; 164

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     762:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     764:	0e 94 64 12 	call	0x24c8	; 0x24c8 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     768:	90 91 e2 00 	lds	r25, 0x00E2
     76c:	94 60       	ori	r25, 0x04	; 4
     76e:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <EVENT_USB_Device_ConfigurationChanged+0x1a>
     776:	80 e2       	ldi	r24, 0x20	; 32
     778:	01 c0       	rjmp	.+2      	; 0x77c <EVENT_USB_Device_ConfigurationChanged+0x1c>
     77a:	81 e8       	ldi	r24, 0x81	; 129
     77c:	34 cf       	rjmp	.-408    	; 0x5e6 <LEDs_SetAllLEDs>

0000077e <EVENT_USB_Device_ControlRequest>:
     77e:	84 ea       	ldi	r24, 0xA4	; 164
}
     780:	91 e0       	ldi	r25, 0x01	; 1

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     782:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <HID_Device_ProcessControlRequest>

00000786 <EVENT_USB_Device_StartOfFrame>:
}
     786:	80 91 b2 01 	lds	r24, 0x01B2
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     78a:	90 91 b3 01 	lds	r25, 0x01B3
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	29 f0       	breq	.+10     	; 0x79c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	90 93 b3 01 	sts	0x01B3, r25
     798:	80 93 b2 01 	sts	0x01B2, r24
     79c:	08 95       	ret

0000079e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     79e:	4f 92       	push	r4
     7a0:	5f 92       	push	r5
     7a2:	6f 92       	push	r6
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	2b 97       	sbiw	r28, 0x0b	; 11
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	3b 01       	movw	r6, r22
     7d0:	79 01       	movw	r14, r18
     7d2:	28 01       	movw	r4, r16
	//uint16_t cb_strlen;
	//uint16_t strlen_rem;
	TIME_t ms;
	UNUSED(HIDInterfaceInfo);
	const event_t* nextevt;
	switch (ReportType) {
     7d4:	44 23       	and	r20, r20
     7d6:	09 f4       	brne	.+2      	; 0x7da <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     7d8:	5a c0       	rjmp	.+180    	; 0x88e <CALLBACK_HID_Device_CreateHIDReport+0xf0>
     7da:	42 30       	cpi	r20, 0x02	; 2
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <CALLBACK_HID_Device_CreateHIDReport+0x42>
     7de:	ae c3       	rjmp	.+1884   	; 0xf3c <__stack+0x43d>
				
				*ReportSize = STRING_DESC_REPORT_HACK_SIZE;
				stm_state = STRINGSTM_STATE_BASE;
				return true;
			} else */
			if (*ReportID == TIMESTAMP_OFFSET_FR_ID) {
     7e0:	db 01       	movw	r26, r22
     7e2:	8c 91       	ld	r24, X
     7e4:	84 30       	cpi	r24, 0x04	; 4
     7e6:	31 f4       	brne	.+12     	; 0x7f4 <CALLBACK_HID_Device_CreateHIDReport+0x56>
				//return the current timestamp
				ms = host_millis();
     7e8:	77 d5       	rcall	.+2798   	; 0x12d8 <host_millis>
     7ea:	87 01       	movw	r16, r14
				time_to_wire(ms, Data);
     7ec:	5e d6       	rcall	.+3260   	; 0x14aa <time_to_wire>
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	90 e0       	ldi	r25, 0x00	; 0
				*ReportSize = TIMESTAMP_FR_SIZE;
     7f2:	18 c0       	rjmp	.+48     	; 0x824 <CALLBACK_HID_Device_CreateHIDReport+0x86>
     7f4:	86 30       	cpi	r24, 0x06	; 6
     7f6:	d9 f4       	brne	.+54     	; 0x82e <CALLBACK_HID_Device_CreateHIDReport+0x90>
				return true;
			} else if (*ReportID == SET_SENS_THRESH_REPORT_ID) {
     7f8:	54 e9       	ldi	r21, 0x94	; 148
     7fa:	c5 2e       	mov	r12, r21
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	d5 2e       	mov	r13, r21
     800:	89 01       	movw	r16, r18
     802:	d6 01       	movw	r26, r12
     804:	6d 91       	ld	r22, X+
				for (int i = 0; i < 4; i++) {
					float_to_wire(sensor_evt_thresh[i], Data + 4*i);
     806:	7d 91       	ld	r23, X+
     808:	8d 91       	ld	r24, X+
     80a:	9d 91       	ld	r25, X+
     80c:	6d 01       	movw	r12, r26
     80e:	a8 01       	movw	r20, r16
     810:	e1 d4       	rcall	.+2498   	; 0x11d4 <float_to_wire>
     812:	0c 5f       	subi	r16, 0xFC	; 252
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	b4 ea       	ldi	r27, 0xA4	; 164
     818:	cb 16       	cp	r12, r27
     81a:	b1 e0       	ldi	r27, 0x01	; 1
				ms = host_millis();
				time_to_wire(ms, Data);
				*ReportSize = TIMESTAMP_FR_SIZE;
				return true;
			} else if (*ReportID == SET_SENS_THRESH_REPORT_ID) {
				for (int i = 0; i < 4; i++) {
     81c:	db 06       	cpc	r13, r27
     81e:	89 f7       	brne	.-30     	; 0x802 <CALLBACK_HID_Device_CreateHIDReport+0x64>
     820:	80 e1       	ldi	r24, 0x10	; 16
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	f2 01       	movw	r30, r4
					float_to_wire(sensor_evt_thresh[i], Data + 4*i);
				}
				*ReportSize = SET_SENS_THRESH_REPORT_SIZE;
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	88 c3       	rjmp	.+1808   	; 0xf3e <__stack+0x43f>
     82e:	81 30       	cpi	r24, 0x01	; 1
				return true;
     830:	89 f4       	brne	.+34     	; 0x854 <CALLBACK_HID_Device_CreateHIDReport+0xb6>
     832:	d9 01       	movw	r26, r18
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
     834:	80 e2       	ldi	r24, 0x20	; 32
     836:	8d 93       	st	X+, r24
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	01 96       	adiw	r24, 0x01	; 1
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     83e:	fc 01       	movw	r30, r24
     840:	eb 5e       	subi	r30, 0xEB	; 235
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
					Data[1+i] = pgm_read_byte(bio_report_string.content + i);
     842:	fd 4f       	sbci	r31, 0xFD	; 253
     844:	e4 91       	lpm	r30, Z
     846:	ed 93       	st	X+, r30
     848:	80 32       	cpi	r24, 0x20	; 32
     84a:	91 05       	cpc	r25, r1
     84c:	b9 f7       	brne	.-18     	; 0x83c <CALLBACK_HID_Device_CreateHIDReport+0x9e>
				return true;
			} else if (*ReportID == REPORT_MAP_STRING_ID) {
				int len = bio_report_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
     84e:	8e ef       	ldi	r24, 0xFE	; 254
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	6f c3       	rjmp	.+1758   	; 0xf32 <__stack+0x433>
					Data[1+i] = pgm_read_byte(bio_report_string.content + i);
				}
				*ReportSize = REPORT_MAP_STRING_SIZE;
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	89 f4       	brne	.+34     	; 0x87a <CALLBACK_HID_Device_CreateHIDReport+0xdc>
     858:	d9 01       	movw	r26, r18
				return true;
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
     85a:	8d e0       	ldi	r24, 0x0D	; 13
     85c:	8d 93       	st	X+, r24
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	01 96       	adiw	r24, 0x01	; 1
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     864:	fc 01       	movw	r30, r24
     866:	e1 5d       	subi	r30, 0xD1	; 209
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
					Data[1+i] = pgm_read_byte(device_name_string.content + i);
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	e4 91       	lpm	r30, Z
     86c:	ed 93       	st	X+, r30
     86e:	8d 30       	cpi	r24, 0x0D	; 13
     870:	91 05       	cpc	r25, r1
     872:	b9 f7       	brne	.-18     	; 0x862 <CALLBACK_HID_Device_CreateHIDReport+0xc4>
				return true;
			} else if (*ReportID == DEVICE_NAME_REPORT_ID) {
				int len = device_name_string.len;
				len = len > 0xfe ? 0xfe : len;
				Data[0] = len;
				for (int i = 0; i < len; i++) {
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	d5 cf       	rjmp	.-86     	; 0x824 <CALLBACK_HID_Device_CreateHIDReport+0x86>
					Data[1+i] = pgm_read_byte(device_name_string.content + i);
				}
				*ReportSize = DEVICE_NAME_REPORT_SIZE;
     87a:	8f 30       	cpi	r24, 0x0F	; 15
     87c:	09 f0       	breq	.+2      	; 0x880 <CALLBACK_HID_Device_CreateHIDReport+0xe2>
     87e:	5e c3       	rjmp	.+1724   	; 0xf3c <__stack+0x43d>
				return true;
			} else if (*ReportID == NO_DATA_REPORT_ID) {
     880:	80 91 7a 05 	lds	r24, 0x057A
     884:	d9 01       	movw	r26, r18
				Data[0] = lung_st;
     886:	8c 93       	st	X, r24
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	cb cf       	rjmp	.-106    	; 0x824 <CALLBACK_HID_Device_CreateHIDReport+0x86>
				*ReportSize = NO_DATA_REPORT_SIZE;
     88e:	db 01       	movw	r26, r22
     890:	0c 91       	ld	r16, X
     892:	07 30       	cpi	r16, 0x07	; 7
		However, every report id must also have a clause for if it is specicifically requested. 
		*/
		//TODO use a table of functions that might set the report, call each in turn
		//this will allow better operation with multiple reports, and allow each module's variables to be encapsulated in their files
			
			if ((*ReportID == GET_SENSOR_EVENT_REPORT_ID) /*(*ReportID == 0)*/) {
     894:	a1 f4       	brne	.+40     	; 0x8be <CALLBACK_HID_Device_CreateHIDReport+0x120>
     896:	80 91 10 01 	lds	r24, 0x0110
     89a:	90 91 11 01 	lds	r25, 0x0111
				//FIXME duplicated code here. Not sure how to handle this duplication as this code must be on the control path when this specific report is requested.
				if (event_buffer.occupancy) { // nextevt != NULL) {
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <CALLBACK_HID_Device_CreateHIDReport+0x106>
     8a2:	4c c3       	rjmp	.+1688   	; 0xf3c <__stack+0x43d>
     8a4:	8a e0       	ldi	r24, 0x0A	; 10
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	43 d4       	rcall	.+2182   	; 0x1130 <deq_event>
					
					nextevt = deq_event(&event_buffer);
     8aa:	b7 01       	movw	r22, r14
     8ac:	6f d4       	rcall	.+2270   	; 0x118c <event_to_wire>
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	90 e0       	ldi	r25, 0x00	; 0
					event_to_wire(nextevt, Data);
     8b2:	f2 01       	movw	r30, r4
     8b4:	91 83       	std	Z+1, r25	; 0x01
     8b6:	80 83       	st	Z, r24
					*ReportSize = GET_SENSOR_EVENT_REPORT_SIZE;
     8b8:	d3 01       	movw	r26, r6
     8ba:	0c 93       	st	X, r16
     8bc:	b6 cf       	rjmp	.-148    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     8be:	03 30       	cpi	r16, 0x03	; 3
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <CALLBACK_HID_Device_CreateHIDReport+0x126>
					*ReportID = GET_SENSOR_EVENT_REPORT_ID;
     8c2:	3f c0       	rjmp	.+126    	; 0x942 <CALLBACK_HID_Device_CreateHIDReport+0x1a4>
     8c4:	fe 01       	movw	r30, r28
     8c6:	34 96       	adiw	r30, 0x04	; 4
					return true;
				} else {
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b1 e0       	ldi	r27, 0x01	; 1
     8cc:	88 e0       	ldi	r24, 0x08	; 8
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
     8ce:	0d 90       	ld	r0, X+
     8d0:	01 92       	st	Z+, r0
     8d2:	81 50       	subi	r24, 0x01	; 1
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <CALLBACK_HID_Device_CreateHIDReport+0x130>
     8d6:	ce 01       	movw	r24, r28
     8d8:	04 96       	adiw	r24, 0x04	; 4
     8da:	b7 01       	movw	r22, r14
     8dc:	9e 01       	movw	r18, r28
     8de:	24 5f       	subi	r18, 0xF4	; 244
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	dc 01       	movw	r26, r24
     8e4:	ed 91       	ld	r30, X+
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     8e6:	fd 91       	ld	r31, X+
     8e8:	cd 01       	movw	r24, r26
     8ea:	ee 0f       	add	r30, r30
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ec 55       	subi	r30, 0x5C	; 92
     8f0:	fa 4f       	sbci	r31, 0xFA	; 250
     8f2:	41 81       	ldd	r20, Z+1	; 0x01
     8f4:	db 01       	movw	r26, r22
     8f6:	11 96       	adiw	r26, 0x01	; 1
     8f8:	4c 93       	st	X, r20
     8fa:	11 97       	sbiw	r26, 0x01	; 1
     8fc:	40 81       	ld	r20, Z
     8fe:	4c 93       	st	X, r20
     900:	6e 5f       	subi	r22, 0xFE	; 254
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	82 17       	cp	r24, r18
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
     906:	93 07       	cpc	r25, r19
     908:	61 f7       	brne	.-40     	; 0x8e2 <CALLBACK_HID_Device_CreateHIDReport+0x144>
     90a:	89 e5       	ldi	r24, 0x59	; 89
     90c:	c8 2e       	mov	r12, r24
				} else {
					return false;
				}
			} else if ((*ReportID == 3) /*|| (*ReportID == 0)*/) { //show adc output
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	d8 2e       	mov	r13, r24
     912:	87 01       	movw	r16, r14
     914:	08 5f       	subi	r16, 0xF8	; 248
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	f6 01       	movw	r30, r12
     91a:	61 91       	ld	r22, Z+
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     91c:	71 91       	ld	r23, Z+
     91e:	81 91       	ld	r24, Z+
     920:	91 91       	ld	r25, Z+
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
				}
				for (int i = 0; i < 4; i ++) {
					float_to_wire(sensor_varnces[i],Data+8+4*i);
     922:	6f 01       	movw	r12, r30
     924:	a8 01       	movw	r20, r16
     926:	56 d4       	rcall	.+2220   	; 0x11d4 <float_to_wire>
     928:	0c 5f       	subi	r16, 0xFC	; 252
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	f9 e6       	ldi	r31, 0x69	; 105
     92e:	cf 16       	cp	r12, r31
     930:	f5 e0       	ldi	r31, 0x05	; 5
     932:	df 06       	cpc	r13, r31
     934:	89 f7       	brne	.-30     	; 0x918 <CALLBACK_HID_Device_CreateHIDReport+0x17a>
     936:	83 e0       	ldi	r24, 0x03	; 3
				int desired[] = {1, 4, 6, 7}; // 1467 is real, use bogus only for checking
				for (int adcix = 0; adcix < 4; adcix++) {
					Data[2*adcix + 1] = (adc_values[desired[adcix]] >> 8);
					Data[2*adcix] = adc_values[desired[adcix]] & 0xff;
				}
				for (int i = 0; i < 4; i ++) {
     938:	d3 01       	movw	r26, r6
     93a:	8c 93       	st	X, r24
     93c:	88 e1       	ldi	r24, 0x18	; 24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	71 cf       	rjmp	.-286    	; 0x824 <CALLBACK_HID_Device_CreateHIDReport+0x86>
					float_to_wire(sensor_varnces[i],Data+8+4*i);
				}
				*ReportID = 3;
     942:	00 23       	and	r16, r16
     944:	09 f0       	breq	.+2      	; 0x948 <CALLBACK_HID_Device_CreateHIDReport+0x1aa>
     946:	fa c2       	rjmp	.+1524   	; 0xf3c <__stack+0x43d>
				*ReportSize = 24;
     948:	80 91 6e 05 	lds	r24, 0x056E
     94c:	88 23       	and	r24, r24
				return true;
			} else  if (*ReportID == 0) {
     94e:	09 f4       	brne	.+2      	; 0x952 <CALLBACK_HID_Device_CreateHIDReport+0x1b4>
     950:	3a c0       	rjmp	.+116    	; 0x9c6 <CALLBACK_HID_Device_CreateHIDReport+0x228>
     952:	e0 91 e2 02 	lds	r30, 0x02E2
				
				if (rfid_usable_to_send) {
     956:	f0 91 e3 02 	lds	r31, 0x02E3
     95a:	80 81       	ld	r24, Z
     95c:	84 34       	cpi	r24, 0x44	; 68
					char *msgbuf;
					msgbuf = *usable_message;
     95e:	09 f0       	breq	.+2      	; 0x962 <CALLBACK_HID_Device_CreateHIDReport+0x1c4>
     960:	ed c2       	rjmp	.+1498   	; 0xf3c <__stack+0x43d>
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	86 31       	cpi	r24, 0x16	; 22
					if (msgbuf[0] == 0x44 && msgbuf[1] == 0x16) {
     966:	09 f0       	breq	.+2      	; 0x96a <CALLBACK_HID_Device_CreateHIDReport+0x1cc>
     968:	e9 c2       	rjmp	.+1490   	; 0xf3c <__stack+0x43d>
     96a:	1b 82       	std	Y+3, r1	; 0x03
     96c:	1a 82       	std	Y+2, r1	; 0x02
     96e:	cf 01       	movw	r24, r30
     970:	0a 96       	adiw	r24, 0x0a	; 10
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
						unsigned char* tagstart = (unsigned char*) msgbuf+10;
						unsigned char pstr_len;
						const char* pstr_msg = NULL;
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	ae 01       	movw	r20, r28
						
						if (classify_tag(tagstart, &pstr_len, &pstr_msg)) {
     97a:	4e 5f       	subi	r20, 0xFE	; 254
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	fb d5       	rcall	.+3062   	; 0x1576 <classify_tag>
     980:	88 23       	and	r24, r24
     982:	09 f4       	brne	.+2      	; 0x986 <CALLBACK_HID_Device_CreateHIDReport+0x1e8>
     984:	db c2       	rjmp	.+1462   	; 0xf3c <__stack+0x43d>
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	09 f4       	brne	.+2      	; 0x990 <CALLBACK_HID_Device_CreateHIDReport+0x1f2>
     98e:	d6 c2       	rjmp	.+1452   	; 0xf3c <__stack+0x43d>
     990:	59 d6       	rcall	.+3250   	; 0x1644 <rfid_enable_buzzer>
     992:	99 81       	ldd	r25, Y+1	; 0x01
							if (pstr_msg == NULL) {
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	2b 81       	ldd	r18, Y+3	; 0x03
     998:	d7 01       	movw	r26, r14
     99a:	9d 93       	st	X+, r25
     99c:	e8 2f       	mov	r30, r24
								//Recognized, but sent recently. take no action.
								return false;
							} else {
								rfid_enable_buzzer();
     99e:	f2 2f       	mov	r31, r18
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <CALLBACK_HID_Device_CreateHIDReport+0x20a>
								SEND_PROX_UGLY_HACK(pstr_len,pstr_msg);
     9a2:	24 91       	lpm	r18, Z
     9a4:	2d 93       	st	X+, r18
     9a6:	31 96       	adiw	r30, 0x01	; 1
     9a8:	2e 2f       	mov	r18, r30
     9aa:	28 1b       	sub	r18, r24
     9ac:	29 17       	cp	r18, r25
     9ae:	c8 f3       	brcs	.-14     	; 0x9a2 <CALLBACK_HID_Device_CreateHIDReport+0x204>
     9b0:	83 e1       	ldi	r24, 0x13	; 19
     9b2:	d3 01       	movw	r26, r6
     9b4:	8c 93       	st	X, r24
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	f2 01       	movw	r30, r4
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
     9c0:	10 92 6e 05 	sts	0x056E, r1
     9c4:	32 cf       	rjmp	.-412    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     9c6:	80 91 4e 04 	lds	r24, 0x044E
     9ca:	88 23       	and	r24, r24
     9cc:	c9 f0       	breq	.+50     	; 0xa00 <CALLBACK_HID_Device_CreateHIDReport+0x262>
     9ce:	d9 01       	movw	r26, r18
								rfid_usable_to_send = 0;
     9d0:	8e e1       	ldi	r24, 0x1E	; 30
     9d2:	8d 93       	st	X+, r24
     9d4:	80 e0       	ldi	r24, 0x00	; 0
					*ReportSize = BIO_EVENT_REPORT_SIZE;
					prox2act_msg_waiting = 0;
					return true;
				}
#endif
				else if (esophageal_msg_waiting) {
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	fc 01       	movw	r30, r24
     9dc:	eb 50       	subi	r30, 0x0B	; 11
					SEND_ACT(esophageal_msg_str);
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	e4 91       	lpm	r30, Z
     9e2:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     9e4:	8e 31       	cpi	r24, 0x1E	; 30
     9e6:	91 05       	cpc	r25, r1
					prox2act_msg_waiting = 0;
					return true;
				}
#endif
				else if (esophageal_msg_waiting) {
					SEND_ACT(esophageal_msg_str);
     9e8:	b9 f7       	brne	.-18     	; 0x9d8 <CALLBACK_HID_Device_CreateHIDReport+0x23a>
     9ea:	82 e1       	ldi	r24, 0x12	; 18
     9ec:	d3 01       	movw	r26, r6
     9ee:	8c 93       	st	X, r24
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	f2 01       	movw	r30, r4
     9f6:	91 83       	std	Z+1, r25	; 0x01
     9f8:	80 83       	st	Z, r24
     9fa:	10 92 4e 04 	sts	0x044E, r1
     9fe:	15 cf       	rjmp	.-470    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     a00:	80 91 93 05 	lds	r24, 0x0593
     a04:	88 23       	and	r24, r24
     a06:	c9 f0       	breq	.+50     	; 0xa3a <CALLBACK_HID_Device_CreateHIDReport+0x29c>
     a08:	d9 01       	movw	r26, r18
					esophageal_msg_waiting = 0;
     a0a:	83 e1       	ldi	r24, 0x13	; 19
     a0c:	8d 93       	st	X+, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (vent_msg_waiting) {
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	fc 01       	movw	r30, r24
     a16:	e0 52       	subi	r30, 0x20	; 32
					SEND_ACT(vent_msg_str);
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	e4 91       	lpm	r30, Z
     a1c:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     a1e:	83 31       	cpi	r24, 0x13	; 19
     a20:	91 05       	cpc	r25, r1
				else if (esophageal_msg_waiting) {
					SEND_ACT(esophageal_msg_str);
					esophageal_msg_waiting = 0;
					return true;
				} else if (vent_msg_waiting) {
					SEND_ACT(vent_msg_str);
     a22:	b9 f7       	brne	.-18     	; 0xa12 <CALLBACK_HID_Device_CreateHIDReport+0x274>
     a24:	82 e1       	ldi	r24, 0x12	; 18
     a26:	d3 01       	movw	r26, r6
     a28:	8c 93       	st	X, r24
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	f2 01       	movw	r30, r4
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
     a34:	10 92 93 05 	sts	0x0593, r1
     a38:	f8 ce       	rjmp	.-528    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     a3a:	80 91 6a 05 	lds	r24, 0x056A
     a3e:	88 23       	and	r24, r24
     a40:	c9 f0       	breq	.+50     	; 0xa74 <CALLBACK_HID_Device_CreateHIDReport+0x2d6>
     a42:	d9 01       	movw	r26, r18
					vent_msg_waiting = 0;
     a44:	87 e0       	ldi	r24, 0x07	; 7
     a46:	8d 93       	st	X+, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (bvm_off_msg_waiting) {
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	fc 01       	movw	r30, r24
     a50:	e9 52       	subi	r30, 0x29	; 41
					SEND_ACT(bvm_off_msg_str);
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	e4 91       	lpm	r30, Z
     a56:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     a58:	87 30       	cpi	r24, 0x07	; 7
     a5a:	91 05       	cpc	r25, r1
				} else if (vent_msg_waiting) {
					SEND_ACT(vent_msg_str);
					vent_msg_waiting = 0;
					return true;
				} else if (bvm_off_msg_waiting) {
					SEND_ACT(bvm_off_msg_str);
     a5c:	b9 f7       	brne	.-18     	; 0xa4c <CALLBACK_HID_Device_CreateHIDReport+0x2ae>
     a5e:	82 e1       	ldi	r24, 0x12	; 18
     a60:	d3 01       	movw	r26, r6
     a62:	8c 93       	st	X, r24
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	f2 01       	movw	r30, r4
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	80 83       	st	Z, r24
     a6e:	10 92 6a 05 	sts	0x056A, r1
     a72:	db ce       	rjmp	.-586    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     a74:	80 91 a2 05 	lds	r24, 0x05A2
     a78:	88 23       	and	r24, r24
     a7a:	c9 f0       	breq	.+50     	; 0xaae <CALLBACK_HID_Device_CreateHIDReport+0x310>
     a7c:	d9 01       	movw	r26, r18
					bvm_off_msg_waiting = 0;
     a7e:	8c e1       	ldi	r24, 0x1C	; 28
     a80:	8d 93       	st	X+, r24
     a82:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (mainstem_msg_waiting) {
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	fc 01       	movw	r30, r24
     a8a:	e7 54       	subi	r30, 0x47	; 71
					SEND_ACT(mainstem_msg_str);
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	e4 91       	lpm	r30, Z
     a90:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     a92:	8c 31       	cpi	r24, 0x1C	; 28
     a94:	91 05       	cpc	r25, r1
				} else if (bvm_off_msg_waiting) {
					SEND_ACT(bvm_off_msg_str);
					bvm_off_msg_waiting = 0;
					return true;
				} else if (mainstem_msg_waiting) {
					SEND_ACT(mainstem_msg_str);
     a96:	b9 f7       	brne	.-18     	; 0xa86 <CALLBACK_HID_Device_CreateHIDReport+0x2e8>
     a98:	82 e1       	ldi	r24, 0x12	; 18
     a9a:	d3 01       	movw	r26, r6
     a9c:	8c 93       	st	X, r24
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	f2 01       	movw	r30, r4
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
     aa8:	10 92 a2 05 	sts	0x05A2, r1
     aac:	be ce       	rjmp	.-644    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     aae:	80 91 58 05 	lds	r24, 0x0558
     ab2:	88 23       	and	r24, r24
     ab4:	c9 f0       	breq	.+50     	; 0xae8 <CALLBACK_HID_Device_CreateHIDReport+0x34a>
     ab6:	d9 01       	movw	r26, r18
					mainstem_msg_waiting = 0;
     ab8:	86 e1       	ldi	r24, 0x16	; 22
     aba:	8d 93       	st	X+, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (hypervent_msg_waiting) {
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	fc 01       	movw	r30, r24
     ac4:	ef 55       	subi	r30, 0x5F	; 95
					SEND_ACT(hypervent_msg_str);
     ac6:	fe 4f       	sbci	r31, 0xFE	; 254
     ac8:	e4 91       	lpm	r30, Z
     aca:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     acc:	86 31       	cpi	r24, 0x16	; 22
     ace:	91 05       	cpc	r25, r1
				} else if (mainstem_msg_waiting) {
					SEND_ACT(mainstem_msg_str);
					mainstem_msg_waiting = 0;
					return true;
				} else if (hypervent_msg_waiting) {
					SEND_ACT(hypervent_msg_str);
     ad0:	b9 f7       	brne	.-18     	; 0xac0 <CALLBACK_HID_Device_CreateHIDReport+0x322>
     ad2:	82 e1       	ldi	r24, 0x12	; 18
     ad4:	d3 01       	movw	r26, r6
     ad6:	8c 93       	st	X, r24
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	f2 01       	movw	r30, r4
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
     ae2:	10 92 58 05 	sts	0x0558, r1
     ae6:	a1 ce       	rjmp	.-702    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     ae8:	80 91 a0 05 	lds	r24, 0x05A0
     aec:	88 23       	and	r24, r24
     aee:	c9 f0       	breq	.+50     	; 0xb22 <__stack+0x23>
     af0:	82 e0       	ldi	r24, 0x02	; 2
					hypervent_msg_waiting = 0;
     af2:	d9 01       	movw	r26, r18
     af4:	8c 93       	st	X, r24
     af6:	ee e9       	ldi	r30, 0x9E	; 158
					return true;
				} else if (o2_msg_waiting) {
     af8:	f1 e0       	ldi	r31, 0x01	; 1
     afa:	84 91       	lpm	r24, Z
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	8c 93       	st	X, r24
					SEND_ACT(o2_msg_str);
     b00:	11 97       	sbiw	r26, 0x01	; 1
     b02:	31 96       	adiw	r30, 0x01	; 1
     b04:	e4 91       	lpm	r30, Z
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	ec 93       	st	X, r30
     b0a:	82 e1       	ldi	r24, 0x12	; 18
     b0c:	fb 01       	movw	r30, r22
     b0e:	80 83       	st	Z, r24
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	d2 01       	movw	r26, r4
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	10 92 a0 05 	sts	0x05A0, r1
     b20:	84 ce       	rjmp	.-760    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     b22:	80 91 81 05 	lds	r24, 0x0581
     b26:	88 23       	and	r24, r24
     b28:	d1 f0       	breq	.+52     	; 0xb5e <__stack+0x5f>
     b2a:	d9 01       	movw	r26, r18
					o2_msg_waiting = 0;
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	8d 93       	st	X+, r24
     b30:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (blip_msg_waiting) {
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	fc 01       	movw	r30, r24
     b38:	e7 5d       	subi	r30, 0xD7	; 215
					SEND_ACT(blip_str);
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	e4 91       	lpm	r30, Z
     b3e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     b40:	84 30       	cpi	r24, 0x04	; 4
     b42:	91 05       	cpc	r25, r1
				} else if (o2_msg_waiting) {
					SEND_ACT(o2_msg_str);
					o2_msg_waiting = 0;
					return true;
				} else if (blip_msg_waiting) {
					SEND_ACT(blip_str);
     b44:	b9 f7       	brne	.-18     	; 0xb34 <__stack+0x35>
     b46:	82 e1       	ldi	r24, 0x12	; 18
     b48:	f3 01       	movw	r30, r6
     b4a:	80 83       	st	Z, r24
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	d2 01       	movw	r26, r4
     b52:	11 96       	adiw	r26, 0x01	; 1
     b54:	9c 93       	st	X, r25
     b56:	8e 93       	st	-X, r24
     b58:	10 92 81 05 	sts	0x0581, r1
     b5c:	66 ce       	rjmp	.-820    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     b5e:	80 91 6d 05 	lds	r24, 0x056D
     b62:	88 23       	and	r24, r24
     b64:	d1 f0       	breq	.+52     	; 0xb9a <__stack+0x9b>
     b66:	d9 01       	movw	r26, r18
					blip_msg_waiting = 0;
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	8d 93       	st	X+, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
					return true;
				} else if (heat_msg_waiting) {
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	fc 01       	movw	r30, r24
     b74:	ed 5d       	subi	r30, 0xDD	; 221
					SEND_ACT(heat_str);
     b76:	fe 4f       	sbci	r31, 0xFE	; 254
     b78:	e4 91       	lpm	r30, Z
     b7a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     b7c:	84 30       	cpi	r24, 0x04	; 4
     b7e:	91 05       	cpc	r25, r1
				} else if (blip_msg_waiting) {
					SEND_ACT(blip_str);
					blip_msg_waiting = 0;
					return true;
				} else if (heat_msg_waiting) {
					SEND_ACT(heat_str);
     b80:	b9 f7       	brne	.-18     	; 0xb70 <__stack+0x71>
     b82:	82 e1       	ldi	r24, 0x12	; 18
     b84:	f3 01       	movw	r30, r6
     b86:	80 83       	st	Z, r24
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	d2 01       	movw	r26, r4
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	9c 93       	st	X, r25
     b92:	8e 93       	st	-X, r24
     b94:	10 92 6d 05 	sts	0x056D, r1
     b98:	48 ce       	rjmp	.-880    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     b9a:	80 91 77 05 	lds	r24, 0x0577
     b9e:	88 23       	and	r24, r24
     ba0:	d1 f0       	breq	.+52     	; 0xbd6 <__stack+0xd7>
     ba2:	d9 01       	movw	r26, r18
					heat_msg_waiting = 0;
     ba4:	8e e0       	ldi	r24, 0x0E	; 14
     ba6:	8d 93       	st	X+, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	ed 5e       	subi	r30, 0xED	; 237
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	e4 91       	lpm	r30, Z
     bb6:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     bb8:	8e 30       	cpi	r24, 0x0E	; 14
     bba:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     bbc:	b9 f7       	brne	.-18     	; 0xbac <__stack+0xad>
     bbe:	82 e1       	ldi	r24, 0x12	; 18
     bc0:	f3 01       	movw	r30, r6
     bc2:	80 83       	st	Z, r24
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	d2 01       	movw	r26, r4
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
     bd0:	10 92 77 05 	sts	0x0577, r1
     bd4:	2a ce       	rjmp	.-940    	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     bd6:	80 91 7c 05 	lds	r24, 0x057C
     bda:	88 23       	and	r24, r24
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <__stack+0x113>
     bde:	d9 01       	movw	r26, r18
     be0:	8d e0       	ldi	r24, 0x0D	; 13
     be2:	8d 93       	st	X+, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	fc 01       	movw	r30, r24
     bec:	ec 5f       	subi	r30, 0xFC	; 252
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	e4 91       	lpm	r30, Z
     bf2:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     bf4:	8d 30       	cpi	r24, 0x0D	; 13
     bf6:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     bf8:	b9 f7       	brne	.-18     	; 0xbe8 <__stack+0xe9>
     bfa:	82 e1       	ldi	r24, 0x12	; 18
     bfc:	f3 01       	movw	r30, r6
     bfe:	80 83       	st	Z, r24
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	d2 01       	movw	r26, r4
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	9c 93       	st	X, r25
     c0a:	8e 93       	st	-X, r24
     c0c:	10 92 7c 05 	sts	0x057C, r1
     c10:	0c ce       	rjmp	.-1000   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     c12:	80 91 9f 05 	lds	r24, 0x059F
     c16:	88 23       	and	r24, r24
     c18:	d1 f0       	breq	.+52     	; 0xc4e <__stack+0x14f>
     c1a:	d9 01       	movw	r26, r18
     c1c:	8d e0       	ldi	r24, 0x0D	; 13
     c1e:	8d 93       	st	X+, r24
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	fc 01       	movw	r30, r24
     c28:	eb 50       	subi	r30, 0x0B	; 11
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	e4 91       	lpm	r30, Z
     c2e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     c30:	8d 30       	cpi	r24, 0x0D	; 13
     c32:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     c34:	b9 f7       	brne	.-18     	; 0xc24 <__stack+0x125>
     c36:	82 e1       	ldi	r24, 0x12	; 18
     c38:	f3 01       	movw	r30, r6
     c3a:	80 83       	st	Z, r24
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	d2 01       	movw	r26, r4
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	9c 93       	st	X, r25
     c46:	8e 93       	st	-X, r24
     c48:	10 92 9f 05 	sts	0x059F, r1
     c4c:	ee cd       	rjmp	.-1060   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     c4e:	80 91 69 05 	lds	r24, 0x0569
     c52:	88 23       	and	r24, r24
     c54:	d1 f0       	breq	.+52     	; 0xc8a <__stack+0x18b>
     c56:	d9 01       	movw	r26, r18
     c58:	8d e0       	ldi	r24, 0x0D	; 13
     c5a:	8d 93       	st	X+, r24
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	fc 01       	movw	r30, r24
     c64:	ea 51       	subi	r30, 0x1A	; 26
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	e4 91       	lpm	r30, Z
     c6a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     c6c:	8d 30       	cpi	r24, 0x0D	; 13
     c6e:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     c70:	b9 f7       	brne	.-18     	; 0xc60 <__stack+0x161>
     c72:	82 e1       	ldi	r24, 0x12	; 18
     c74:	f3 01       	movw	r30, r6
     c76:	80 83       	st	Z, r24
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	d2 01       	movw	r26, r4
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
     c84:	10 92 69 05 	sts	0x0569, r1
     c88:	d0 cd       	rjmp	.-1120   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     c8a:	80 91 a1 05 	lds	r24, 0x05A1
     c8e:	88 23       	and	r24, r24
     c90:	d1 f0       	breq	.+52     	; 0xcc6 <__stack+0x1c7>
     c92:	d9 01       	movw	r26, r18
     c94:	80 e1       	ldi	r24, 0x10	; 16
     c96:	8d 93       	st	X+, r24
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	fc 01       	movw	r30, r24
     ca0:	ec 52       	subi	r30, 0x2C	; 44
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	e4 91       	lpm	r30, Z
     ca6:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     ca8:	80 31       	cpi	r24, 0x10	; 16
     caa:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     cac:	b9 f7       	brne	.-18     	; 0xc9c <__stack+0x19d>
     cae:	82 e1       	ldi	r24, 0x12	; 18
     cb0:	f3 01       	movw	r30, r6
     cb2:	80 83       	st	Z, r24
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	d2 01       	movw	r26, r4
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	9c 93       	st	X, r25
     cbe:	8e 93       	st	-X, r24
     cc0:	10 92 a1 05 	sts	0x05A1, r1
     cc4:	b2 cd       	rjmp	.-1180   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     cc6:	80 91 91 05 	lds	r24, 0x0591
     cca:	88 23       	and	r24, r24
     ccc:	d1 f0       	breq	.+52     	; 0xd02 <__stack+0x203>
     cce:	d9 01       	movw	r26, r18
     cd0:	8d e0       	ldi	r24, 0x0D	; 13
     cd2:	8d 93       	st	X+, r24
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	fc 01       	movw	r30, r24
     cdc:	eb 53       	subi	r30, 0x3B	; 59
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	e4 91       	lpm	r30, Z
     ce2:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     ce4:	8d 30       	cpi	r24, 0x0D	; 13
     ce6:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     ce8:	b9 f7       	brne	.-18     	; 0xcd8 <__stack+0x1d9>
     cea:	82 e1       	ldi	r24, 0x12	; 18
     cec:	f3 01       	movw	r30, r6
     cee:	80 83       	st	Z, r24
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	d2 01       	movw	r26, r4
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	9c 93       	st	X, r25
     cfa:	8e 93       	st	-X, r24
     cfc:	10 92 91 05 	sts	0x0591, r1
     d00:	94 cd       	rjmp	.-1240   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     d02:	80 91 a3 05 	lds	r24, 0x05A3
     d06:	88 23       	and	r24, r24
     d08:	d1 f0       	breq	.+52     	; 0xd3e <__stack+0x23f>
     d0a:	d9 01       	movw	r26, r18
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	8d 93       	st	X+, r24
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	fc 01       	movw	r30, r24
     d18:	ea 54       	subi	r30, 0x4A	; 74
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	e4 91       	lpm	r30, Z
     d1e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d20:	8d 30       	cpi	r24, 0x0D	; 13
     d22:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     d24:	b9 f7       	brne	.-18     	; 0xd14 <__stack+0x215>
     d26:	82 e1       	ldi	r24, 0x12	; 18
     d28:	f3 01       	movw	r30, r6
     d2a:	80 83       	st	Z, r24
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	d2 01       	movw	r26, r4
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	10 92 a3 05 	sts	0x05A3, r1
     d3c:	76 cd       	rjmp	.-1300   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     d3e:	80 91 90 05 	lds	r24, 0x0590
     d42:	88 23       	and	r24, r24
     d44:	d1 f0       	breq	.+52     	; 0xd7a <__stack+0x27b>
     d46:	d9 01       	movw	r26, r18
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	8d 93       	st	X+, r24
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	fc 01       	movw	r30, r24
     d54:	e4 55       	subi	r30, 0x54	; 84
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	e4 91       	lpm	r30, Z
     d5a:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d5c:	88 30       	cpi	r24, 0x08	; 8
     d5e:	91 05       	cpc	r25, r1
	if (s##_msg_waiting) {\
		SEND_ACT(pstr_##s);\
		s##_msg_waiting = 0;\
		return true;\
	}
				FLOW_ACT_MESSAGE_TABLE(AS_ACT_SENDER);
     d60:	b9 f7       	brne	.-18     	; 0xd50 <__stack+0x251>
     d62:	82 e1       	ldi	r24, 0x12	; 18
     d64:	f3 01       	movw	r30, r6
     d66:	80 83       	st	Z, r24
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	d2 01       	movw	r26, r4
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	9c 93       	st	X, r25
     d72:	8e 93       	st	-X, r24
     d74:	10 92 90 05 	sts	0x0590, r1
     d78:	58 cd       	rjmp	.-1360   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     d7a:	80 91 6c 05 	lds	r24, 0x056C
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	d9 f4       	brne	.+54     	; 0xdb8 <__stack+0x2b9>
     d82:	d9 01       	movw	r26, r18
     d84:	8e e0       	ldi	r24, 0x0E	; 14
     d86:	8d 93       	st	X+, r24
     d88:	80 e0       	ldi	r24, 0x00	; 0
#define ESCHAR_RESPONSE_MACRO(x) if (eschar_msg_state_##x == ESCHAR_MSG_WAITING) {\
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	fc 01       	movw	r30, r24
     d90:	e3 57       	subi	r30, 0x73	; 115
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	e4 91       	lpm	r30, Z
     d96:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     d98:	8e 30       	cpi	r24, 0x0E	; 14
     d9a:	91 05       	cpc	r25, r1
#define ESCHAR_RESPONSE_MACRO(x) if (eschar_msg_state_##x == ESCHAR_MSG_WAITING) {\
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
     d9c:	b9 f7       	brne	.-18     	; 0xd8c <__stack+0x28d>
     d9e:	82 e1       	ldi	r24, 0x12	; 18
     da0:	f3 01       	movw	r30, r6
     da2:	80 83       	st	Z, r24
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	d2 01       	movw	r26, r4
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	9c 93       	st	X, r25
     dae:	8e 93       	st	-X, r24
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	80 93 6c 05 	sts	0x056C, r24
     db6:	39 cd       	rjmp	.-1422   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     db8:	80 91 9c 05 	lds	r24, 0x059C
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	d9 f4       	brne	.+54     	; 0xdf6 <__stack+0x2f7>
     dc0:	d9 01       	movw	r26, r18
     dc2:	8e e0       	ldi	r24, 0x0E	; 14
     dc4:	8d 93       	st	X+, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(2)
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	fc 01       	movw	r30, r24
     dce:	e3 58       	subi	r30, 0x83	; 131
     dd0:	fe 4f       	sbci	r31, 0xFE	; 254
     dd2:	e4 91       	lpm	r30, Z
     dd4:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     dd6:	8e 30       	cpi	r24, 0x0E	; 14
     dd8:	91 05       	cpc	r25, r1
					SEND_ACT(eschar_msg_##x);\
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
     dda:	b9 f7       	brne	.-18     	; 0xdca <__stack+0x2cb>
     ddc:	82 e1       	ldi	r24, 0x12	; 18
     dde:	f3 01       	movw	r30, r6
     de0:	80 83       	st	Z, r24
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	d2 01       	movw	r26, r4
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	9c 93       	st	X, r25
     dec:	8e 93       	st	-X, r24
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 93 9c 05 	sts	0x059C, r24
     df4:	1a cd       	rjmp	.-1484   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     df6:	80 91 92 05 	lds	r24, 0x0592
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	d9 f4       	brne	.+54     	; 0xe34 <__stack+0x335>
     dfe:	d9 01       	movw	r26, r18
     e00:	8e e0       	ldi	r24, 0x0E	; 14
     e02:	8d 93       	st	X+, r24
     e04:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(3)
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	fc 01       	movw	r30, r24
     e0c:	e3 59       	subi	r30, 0x93	; 147
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	e4 91       	lpm	r30, Z
     e12:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e14:	8e 30       	cpi	r24, 0x0E	; 14
     e16:	91 05       	cpc	r25, r1
					eschar_msg_state_##x = ESCHAR_MSG_SENT;\
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
     e18:	b9 f7       	brne	.-18     	; 0xe08 <__stack+0x309>
     e1a:	82 e1       	ldi	r24, 0x12	; 18
     e1c:	f3 01       	movw	r30, r6
     e1e:	80 83       	st	Z, r24
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	d2 01       	movw	r26, r4
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	9c 93       	st	X, r25
     e2a:	8e 93       	st	-X, r24
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	80 93 92 05 	sts	0x0592, r24
     e32:	fb cc       	rjmp	.-1546   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     e34:	80 91 4f 04 	lds	r24, 0x044F
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	d9 f4       	brne	.+54     	; 0xe72 <__stack+0x373>
     e3c:	d9 01       	movw	r26, r18
     e3e:	8e e0       	ldi	r24, 0x0E	; 14
     e40:	8d 93       	st	X+, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(4)
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	fc 01       	movw	r30, r24
     e4a:	e3 5a       	subi	r30, 0xA3	; 163
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	e4 91       	lpm	r30, Z
     e50:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e52:	8e 30       	cpi	r24, 0x0E	; 14
     e54:	91 05       	cpc	r25, r1
					return true;\
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
				ESCHAR_RESPONSE_MACRO(4)
     e56:	b9 f7       	brne	.-18     	; 0xe46 <__stack+0x347>
     e58:	82 e1       	ldi	r24, 0x12	; 18
     e5a:	f3 01       	movw	r30, r6
     e5c:	80 83       	st	Z, r24
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	d2 01       	movw	r26, r4
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	9c 93       	st	X, r25
     e68:	8e 93       	st	-X, r24
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	80 93 4f 04 	sts	0x044F, r24
     e70:	dc cc       	rjmp	.-1608   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     e72:	80 91 83 05 	lds	r24, 0x0583
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__stack+0x3b1>
     e7a:	d9 01       	movw	r26, r18
     e7c:	8e e0       	ldi	r24, 0x0E	; 14
     e7e:	8d 93       	st	X+, r24
     e80:	80 e0       	ldi	r24, 0x00	; 0
				ESCHAR_RESPONSE_MACRO(5)
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	fc 01       	movw	r30, r24
     e88:	e3 5b       	subi	r30, 0xB3	; 179
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	e4 91       	lpm	r30, Z
     e8e:	ed 93       	st	X+, r30
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     e90:	8e 30       	cpi	r24, 0x0E	; 14
     e92:	91 05       	cpc	r25, r1
				}
				ESCHAR_RESPONSE_MACRO(1)
				ESCHAR_RESPONSE_MACRO(2)
				ESCHAR_RESPONSE_MACRO(3)
				ESCHAR_RESPONSE_MACRO(4)
				ESCHAR_RESPONSE_MACRO(5)
     e94:	b9 f7       	brne	.-18     	; 0xe84 <__stack+0x385>
     e96:	82 e1       	ldi	r24, 0x12	; 18
     e98:	f3 01       	movw	r30, r6
     e9a:	80 83       	st	Z, r24
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	d2 01       	movw	r26, r4
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	9c 93       	st	X, r25
     ea6:	8e 93       	st	-X, r24
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	80 93 83 05 	sts	0x0583, r24
     eae:	bd cc       	rjmp	.-1670   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     eb0:	80 91 10 01 	lds	r24, 0x0110
     eb4:	90 91 11 01 	lds	r25, 0x0111
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	81 f0       	breq	.+32     	; 0xedc <__stack+0x3dd>
     ebc:	8a e0       	ldi	r24, 0x0A	; 10
     ebe:	91 e0       	ldi	r25, 0x01	; 1
				
				//send the sensor spike event
				if (event_buffer.occupancy) {
     ec0:	37 d1       	rcall	.+622    	; 0x1130 <deq_event>
     ec2:	b7 01       	movw	r22, r14
     ec4:	63 d1       	rcall	.+710    	; 0x118c <event_to_wire>
     ec6:	8d e0       	ldi	r24, 0x0D	; 13
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	f2 01       	movw	r30, r4
					if (RV_IS_IV_ARM) {
						deq_event(&event_buffer); //intentionally discard
						SEND_ACT(iv_arm_msg);
						return true;
					} else { // some other thing that uses the rv code FIXME list them
						nextevt = deq_event(&event_buffer);
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	d3 01       	movw	r26, r6
						event_to_wire(nextevt, Data);
     ed4:	8c 93       	st	X, r24
     ed6:	81 e8       	ldi	r24, 0x81	; 129
     ed8:	86 db       	rcall	.-2292   	; 0x5e6 <LEDs_SetAllLEDs>
						*ReportSize = GET_SENSOR_EVENT_REPORT_SIZE;
     eda:	a7 cc       	rjmp	.-1714   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     edc:	80 91 bc 05 	lds	r24, 0x05BC
     ee0:	88 23       	and	r24, r24
     ee2:	61 f1       	breq	.+88     	; 0xf3c <__stack+0x43d>
						*ReportID = GET_SENSOR_EVENT_REPORT_ID;
     ee4:	80 90 84 05 	lds	r8, 0x0584
     ee8:	90 90 85 05 	lds	r9, 0x0585
						LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     eec:	a0 90 86 05 	lds	r10, 0x0586
     ef0:	b0 90 87 05 	lds	r11, 0x0587
						return true;
					}
				//pin touch event
				} else if (pin7_evt_avail) {
     ef4:	20 91 94 05 	lds	r18, 0x0594
     ef8:	30 91 95 05 	lds	r19, 0x0595
					ms_time_t evt_dur = pin7_evt_dur;
     efc:	40 91 96 05 	lds	r20, 0x0596
     f00:	50 91 97 05 	lds	r21, 0x0597
     f04:	60 91 98 05 	lds	r22, 0x0598
     f08:	70 91 99 05 	lds	r23, 0x0599
					ms = pin7_evt_start_host;
					time_to_wire(ms, Data);
     f0c:	80 91 9a 05 	lds	r24, 0x059A
     f10:	90 91 9b 05 	lds	r25, 0x059B
     f14:	87 01       	movw	r16, r14
     f16:	c9 d2       	rcall	.+1426   	; 0x14aa <time_to_wire>
     f18:	a7 01       	movw	r20, r14
     f1a:	48 5f       	subi	r20, 0xF8	; 248
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	c5 01       	movw	r24, r10
     f20:	b4 01       	movw	r22, r8
     f22:	2e d1       	rcall	.+604    	; 0x1180 <uint32_to_wire>
     f24:	10 92 bc 05 	sts	0x05BC, r1
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	f3 01       	movw	r30, r6
     f2c:	80 83       	st	Z, r24
     f2e:	8c e0       	ldi	r24, 0x0C	; 12
					uint32_to_wire(evt_dur,Data+8);
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	d2 01       	movw	r26, r4
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	9c 93       	st	X, r25
     f38:	8e 93       	st	-X, r24
     f3a:	77 cc       	rjmp	.-1810   	; 0x82a <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
					pin7_evt_avail = 0;
     f3e:	2b 96       	adiw	r28, 0x0b	; 11
     f40:	0f b6       	in	r0, 0x3f	; 63
					*ReportID = WIRE_CONTACT_REPORT_ID;
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
					*ReportSize = WIRE_CONTACT_REPORT_SIZE;
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
					return true;
				}
				*/
			}
	}
	return false;
     f56:	df 90       	pop	r13
}
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
     f64:	6f 90       	pop	r6
     f66:	5f 90       	pop	r5
     f68:	4f 90       	pop	r4
     f6a:	08 95       	ret

00000f6c <CALLBACK_HID_Device_ProcessHIDReport>:
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	e9 01       	movw	r28, r18
     f76:	41 30       	cpi	r20, 0x01	; 1
     f78:	b1 f1       	breq	.+108    	; 0xfe6 <CALLBACK_HID_Device_ProcessHIDReport+0x7a>
     f7a:	42 30       	cpi	r20, 0x02	; 2
     f7c:	09 f0       	breq	.+2      	; 0xf80 <CALLBACK_HID_Device_ProcessHIDReport+0x14>
     f7e:	96 c0       	rjmp	.+300    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
     f80:	62 30       	cpi	r22, 0x02	; 2
     f82:	51 f4       	brne	.+20     	; 0xf98 <CALLBACK_HID_Device_ProcessHIDReport+0x2c>
     f84:	81 e0       	ldi	r24, 0x01	; 1
	switch (ReportType) {
		case HID_REPORT_ITEM_Feature:
		//store string id and offset in alotted bytes
		//use the getDescriptor callback to get the string pointer and length
			if (ReportID == STRING_DESC_HACK_REPORT_ID) {
				stm_state = STRINGSTM_STRING_REQUESTED;
     f86:	80 93 3d 03 	sts	0x033D, r24
				stm_reqd_stringid = Data[0];
     f8a:	88 81       	ld	r24, Y
     f8c:	80 93 3c 03 	sts	0x033C, r24
				stm_reqd_offset = Data[1];
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	80 93 3b 03 	sts	0x033B, r24
     f96:	8a c0       	rjmp	.+276    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
			} else if (ReportID == TIMESTAMP_OFFSET_FR_ID) {
     f98:	64 30       	cpi	r22, 0x04	; 4
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <CALLBACK_HID_Device_ProcessHIDReport+0x38>
				TIME_t oset;
				oset = time_from_wire(Data);
     f9c:	c9 01       	movw	r24, r18
     f9e:	ae d2       	rcall	.+1372   	; 0x14fc <time_from_wire>
     fa0:	14 d2       	rcall	.+1064   	; 0x13ca <set_time_oset>
				set_time_oset(oset);
     fa2:	84 c0       	rjmp	.+264    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
     fa4:	66 30       	cpi	r22, 0x06	; 6
     fa6:	91 f4       	brne	.+36     	; 0xfcc <CALLBACK_HID_Device_ProcessHIDReport+0x60>
			} else if (ReportID == SET_SENS_THRESH_REPORT_ID) {
     fa8:	04 e9       	ldi	r16, 0x94	; 148
     faa:	11 e0       	ldi	r17, 0x01	; 1
     fac:	ce 01       	movw	r24, r28
     fae:	30 d1       	rcall	.+608    	; 0x1210 <float_from_wire>
				for (int i=0; i < 4; i++) {
					sensor_evt_thresh[i] = float_from_wire(Data + 4*i);
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	f8 01       	movw	r30, r16
     fb6:	81 93       	st	Z+, r24
     fb8:	91 93       	st	Z+, r25
     fba:	a1 93       	st	Z+, r26
     fbc:	b1 93       	st	Z+, r27
     fbe:	8f 01       	movw	r16, r30
     fc0:	24 96       	adiw	r28, 0x04	; 4
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	04 3a       	cpi	r16, 0xA4	; 164
     fc6:	1f 07       	cpc	r17, r31
			} else if (ReportID == TIMESTAMP_OFFSET_FR_ID) {
				TIME_t oset;
				oset = time_from_wire(Data);
				set_time_oset(oset);
			} else if (ReportID == SET_SENS_THRESH_REPORT_ID) {
				for (int i=0; i < 4; i++) {
     fc8:	89 f7       	brne	.-30     	; 0xfac <CALLBACK_HID_Device_ProcessHIDReport+0x40>
     fca:	70 c0       	rjmp	.+224    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
     fcc:	6f 3f       	cpi	r22, 0xFF	; 255
     fce:	19 f4       	brne	.+6      	; 0xfd6 <CALLBACK_HID_Device_ProcessHIDReport+0x6a>
     fd0:	81 ea       	ldi	r24, 0xA1	; 161
					sensor_evt_thresh[i] = float_from_wire(Data + 4*i);
				}
			} else if (ReportID == START_BOOTLOADER_REPORT_ID) {
     fd2:	09 db       	rcall	.-2542   	; 0x5e6 <LEDs_SetAllLEDs>
     fd4:	1c db       	rcall	.-2504   	; 0x60e <Jump_To_Bootloader>
				//check that proper code was supplied
				//FIXME lol always succeed
				//start bootloader
				LEDs_SetAllLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
     fd6:	6f 30       	cpi	r22, 0x0F	; 15
     fd8:	09 f0       	breq	.+2      	; 0xfdc <CALLBACK_HID_Device_ProcessHIDReport+0x70>
     fda:	68 c0       	rjmp	.+208    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
				Jump_To_Bootloader();
     fdc:	40 d3       	rcall	.+1664   	; 0x165e <heat_enable>
     fde:	81 e0       	ldi	r24, 0x01	; 1
			} else if (ReportID == NO_DATA_REPORT_ID) {
     fe0:	80 93 6d 05 	sts	0x056D, r24
     fe4:	63 c0       	rjmp	.+198    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
				heat_enable();
     fe6:	61 31       	cpi	r22, 0x11	; 17
     fe8:	61 f0       	breq	.+24     	; 0x1002 <CALLBACK_HID_Device_ProcessHIDReport+0x96>
				heat_msg_waiting = 1;
     fea:	62 31       	cpi	r22, 0x12	; 18
     fec:	20 f4       	brcc	.+8      	; 0xff6 <CALLBACK_HID_Device_ProcessHIDReport+0x8a>
     fee:	6d 30       	cpi	r22, 0x0D	; 13
     ff0:	09 f0       	breq	.+2      	; 0xff4 <CALLBACK_HID_Device_ProcessHIDReport+0x88>
			}
			break;
		case HID_REPORT_ITEM_Out:
		//TODO have these handlers update the value sent on the corresponding INPUT reports.
		
		switch (ReportID) {
     ff2:	5c c0       	rjmp	.+184    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
     ff6:	62 31       	cpi	r22, 0x12	; 18
     ff8:	71 f1       	breq	.+92     	; 0x1056 <CALLBACK_HID_Device_ProcessHIDReport+0xea>
     ffa:	63 31       	cpi	r22, 0x13	; 19
     ffc:	09 f0       	breq	.+2      	; 0x1000 <CALLBACK_HID_Device_ProcessHIDReport+0x94>
     ffe:	56 c0       	rjmp	.+172    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
    1000:	06 c0       	rjmp	.+12     	; 0x100e <CALLBACK_HID_Device_ProcessHIDReport+0xa2>
    1002:	88 81       	ld	r24, Y
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <CALLBACK_HID_Device_ProcessHIDReport+0x9e>
    1008:	51 c0       	rjmp	.+162    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
    100a:	9f d2       	rcall	.+1342   	; 0x154a <rfid_sendcommand_readtags>
    100c:	4f c0       	rjmp	.+158    	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
			
			case RFID_TAG_SCAN_COMMAND_REPORT_ID:
			//rfid_parser_clearbuffers();
			if (Data[0] == 0) {
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	86 35       	cpi	r24, 0x56	; 86
    1012:	61 f4       	brne	.+24     	; 0x102c <CALLBACK_HID_Device_ProcessHIDReport+0xc0>
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
				rfid_sendcommand_readtags();
    1016:	85 34       	cpi	r24, 0x45	; 69
    1018:	d9 f4       	brne	.+54     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
			for (int i = 0; i <= len; i++) {
				prox2act[i] = Data[i];
			}
			prox2act_msg_waiting = 1;
#endif
			if (Data[1] == 'V' && Data[2] == 'E' && Data[3] == 'N' && Data[4] == 'T') { // VENT
    101c:	8e 34       	cpi	r24, 0x4E	; 78
    101e:	c1 f4       	brne	.+48     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	84 35       	cpi	r24, 0x54	; 84
    1024:	a9 f4       	brne	.+42     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    1026:	40 93 6b 05 	sts	0x056B, r20
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    102c:	82 34       	cpi	r24, 0x42	; 66
    102e:	49 f4       	brne	.+18     	; 0x1042 <CALLBACK_HID_Device_ProcessHIDReport+0xd6>
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	86 35       	cpi	r24, 0x56	; 86
				//TODO what is the appropriate action here
				vent_sitch = ACT_MSG_ST_RCVD;
    1034:	69 f4       	brne	.+26     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	8d 34       	cpi	r24, 0x4D	; 77
			} else if (Data[1] == 'B' && Data[2] == 'V' && Data[3] == 'M') { // BVM
    103a:	51 f4       	brne	.+20     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    103c:	40 93 57 05 	sts	0x0557, r20
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    1042:	8f 34       	cpi	r24, 0x4F	; 79
    1044:	29 f4       	brne	.+10     	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	82 33       	cpi	r24, 0x32	; 50
				//TODO what is the appropriate action here
				//do not send any airway messages if the BVM message has not been received
				bvm_sitch = ACT_MSG_ST_RCVD;
    104a:	11 f4       	brne	.+4      	; 0x1050 <CALLBACK_HID_Device_ProcessHIDReport+0xe4>
    104c:	40 93 a0 05 	sts	0x05A0, r20
				//debug_msg_waiting = 1;
			} else if (Data[1] == 'O' && Data[2] == '2') {
    1050:	ce 01       	movw	r24, r28
    1052:	b0 d3       	rcall	.+1888   	; 0x17b4 <flow_sensor_handle_PROX>
    1054:	2b c0       	rjmp	.+86     	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	83 35       	cpi	r24, 0x53	; 83
				//airway emits an O2 message on ACT, echoing it
				//makes rfid code simpler
				o2_msg_waiting = 1;
    105a:	51 f4       	brne	.+20     	; 0x1070 <CALLBACK_HID_Device_ProcessHIDReport+0x104>
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
			}
			flow_sensor_handle_PROX((char*)Data);
    105e:	84 35       	cpi	r24, 0x54	; 84
    1060:	39 f4       	brne	.+14     	; 0x1070 <CALLBACK_HID_Device_ProcessHIDReport+0x104>
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
    1064:	8f 34       	cpi	r24, 0x4F	; 79
				Escharotomy arm
				IV arm
				Rugged arm
				or rather, all the arms that have a pulse.
			*/
			if (Data[1]=='S' && Data[2]=='T' && Data[3]=='O' && Data[4]=='P') { // skip length, check first character
    1066:	21 f4       	brne	.+8      	; 0x1070 <CALLBACK_HID_Device_ProcessHIDReport+0x104>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	80 35       	cpi	r24, 0x50	; 80
    106c:	09 f4       	brne	.+2      	; 0x1070 <CALLBACK_HID_Device_ProcessHIDReport+0x104>
    106e:	f9 d2       	rcall	.+1522   	; 0x1662 <pulse_stop>
    1070:	ce 01       	movw	r24, r28
    1072:	09 d4       	rcall	.+2066   	; 0x1886 <flow_sensor_handle_ACT>
    1074:	1b c0       	rjmp	.+54     	; 0x10ac <CALLBACK_HID_Device_ProcessHIDReport+0x140>
    1076:	c9 01       	movw	r24, r18
    1078:	cb d0       	rcall	.+406    	; 0x1210 <float_from_wire>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
				pulse_stop();
    107e:	40 e7       	ldi	r20, 0x70	; 112
    1080:	52 e4       	ldi	r21, 0x42	; 66
			}
			flow_sensor_handle_ACT((char*) Data);
    1082:	0e 94 44 13 	call	0x2688	; 0x2688 <__divsf3>
    1086:	9b 01       	movw	r18, r22
			break;
    1088:	ac 01       	movw	r20, r24
				IV Arm
			*/
			int pulse_delay_ms;
			float hr;
			//read float from message
			hr = float_from_wire(Data); // b/m
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e8       	ldi	r24, 0x80	; 128
			float bps = hr / 60.0; /* b/m * m/s = b/s */
    1090:	9f e3       	ldi	r25, 0x3F	; 63
    1092:	0e 94 44 13 	call	0x2688	; 0x2688 <__divsf3>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a e7       	ldi	r20, 0x7A	; 122
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	0e 94 2e 14 	call	0x285c	; 0x285c <__mulsf3>
			float spb = 1.0/bps;
    10a2:	0e 94 ac 13 	call	0x2758	; 0x2758 <__fixsfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	de d2       	rcall	.+1468   	; 0x1668 <pulse_set_delay>
			float ms_p_b = 1000*spb;
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	UNUSED(wIndex);
	switch (DescriptorType)
    10b6:	93 30       	cpi	r25, 0x03	; 3
    10b8:	89 f0       	breq	.+34     	; 0x10dc <CALLBACK_USB_GetDescriptor+0x26>
    10ba:	94 30       	cpi	r25, 0x04	; 4
    10bc:	28 f4       	brcc	.+10     	; 0x10c8 <CALLBACK_USB_GetDescriptor+0x12>
    10be:	91 30       	cpi	r25, 0x01	; 1
    10c0:	49 f1       	breq	.+82     	; 0x1114 <CALLBACK_USB_GetDescriptor+0x5e>
    10c2:	92 30       	cpi	r25, 0x02	; 2
    10c4:	61 f5       	brne	.+88     	; 0x111e <CALLBACK_USB_GetDescriptor+0x68>
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <CALLBACK_USB_GetDescriptor+0x1c>
    10c8:	91 32       	cpi	r25, 0x21	; 33
    10ca:	d1 f0       	breq	.+52     	; 0x1100 <CALLBACK_USB_GetDescriptor+0x4a>
    10cc:	92 32       	cpi	r25, 0x22	; 34
    10ce:	39 f5       	brne	.+78     	; 0x111e <CALLBACK_USB_GetDescriptor+0x68>
    10d0:	1c c0       	rjmp	.+56     	; 0x110a <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    10d2:	82 e2       	ldi	r24, 0x22	; 34
    10d4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    10d6:	e3 e8       	ldi	r30, 0x83	; 131
    10d8:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    10da:	25 c0       	rjmp	.+74     	; 0x1126 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	41 f0       	breq	.+16     	; 0x10f0 <CALLBACK_USB_GetDescriptor+0x3a>
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <CALLBACK_USB_GetDescriptor+0x34>
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	d9 f4       	brne	.+54     	; 0x111e <CALLBACK_USB_GetDescriptor+0x68>
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    10ea:	ef e7       	ldi	r30, 0x7F	; 127
    10ec:	f2 e0       	ldi	r31, 0x02	; 2
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    10f0:	e5 e6       	ldi	r30, 0x65	; 101
    10f2:	f2 e0       	ldi	r31, 0x02	; 2
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    10f6:	e7 e3       	ldi	r30, 0x37	; 55
    10f8:	f2 e0       	ldi	r31, 0x02	; 2
    10fa:	84 91       	lpm	r24, Z
    10fc:	90 e0       	ldi	r25, 0x00	; 0
					break;
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    1100:	89 e0       	ldi	r24, 0x09	; 9
    1102:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    1104:	e5 e9       	ldi	r30, 0x95	; 149
    1106:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
    110a:	8a ec       	ldi	r24, 0xCA	; 202
    110c:	91 e0       	ldi	r25, 0x01	; 1
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
    110e:	e7 eb       	ldi	r30, 0xB7	; 183
    1110:	f2 e0       	ldi	r31, 0x02	; 2
			Size    = sizeof(GenericReport);
			break;
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <CALLBACK_USB_GetDescriptor+0x70>
	UNUSED(wIndex);
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1114:	82 e1       	ldi	r24, 0x12	; 18
    1116:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;
	UNUSED(wIndex);
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1118:	e5 ea       	ldi	r30, 0xA5	; 165
    111a:	f2 e0       	ldi	r31, 0x02	; 2
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1122:	e0 e0       	ldi	r30, 0x00	; 0
    1124:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    1126:	da 01       	movw	r26, r20
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	fc 93       	st	X, r31
    112c:	ee 93       	st	-X, r30
	return Size;
}
    112e:	08 95       	ret

00001130 <deq_event>:
		ebuf->occupancy = ebuf->buflen;
	}
}

const event_t* deq_event(event_buf_t* ebuf)
{
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	fc 01       	movw	r30, r24
	if (ebuf->occupancy) {
    1136:	26 81       	ldd	r18, Z+6	; 0x06
    1138:	37 81       	ldd	r19, Z+7	; 0x07
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	d9 f0       	breq	.+54     	; 0x1176 <deq_event+0x46>
		int lr = ebuf->last_real;
    1140:	c4 81       	ldd	r28, Z+4	; 0x04
    1142:	d5 81       	ldd	r29, Z+5	; 0x05
		event_t* out = &(ebuf->evtbuf[lr]);
		ebuf->last_real = (lr + 1) % (ebuf->buflen);
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
    1150:	95 83       	std	Z+5, r25	; 0x05
    1152:	84 83       	std	Z+4, r24	; 0x04
		(ebuf->occupancy)--;
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	30 40       	sbci	r19, 0x00	; 0
    1158:	37 83       	std	Z+7, r19	; 0x07
    115a:	26 83       	std	Z+6, r18	; 0x06
		return out;
    115c:	2d e0       	ldi	r18, 0x0D	; 13
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	c2 9f       	mul	r28, r18
    1162:	c0 01       	movw	r24, r0
    1164:	c3 9f       	mul	r28, r19
    1166:	90 0d       	add	r25, r0
    1168:	d2 9f       	mul	r29, r18
    116a:	90 0d       	add	r25, r0
    116c:	11 24       	eor	r1, r1
    116e:	08 96       	adiw	r24, 0x08	; 8
    1170:	8e 0f       	add	r24, r30
    1172:	9f 1f       	adc	r25, r31
    1174:	02 c0       	rjmp	.+4      	; 0x117a <deq_event+0x4a>
	}
	return NULL;
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <uint32_to_wire>:
union uint32_byteview {
	uint32_t val;
	uint8_t u8s[4];
};
void uint32_to_wire(uint32_t v, uint8_t w[])
{
    1180:	fa 01       	movw	r30, r20
	union uint32_byteview ubv;
	ubv.val = v;
	for (int i = 0; i < 4; i++) {
		w[i] = ubv.u8s[3-i];
    1182:	90 83       	st	Z, r25
    1184:	81 83       	std	Z+1, r24	; 0x01
    1186:	72 83       	std	Z+2, r23	; 0x02
    1188:	63 83       	std	Z+3, r22	; 0x03
	}
}
    118a:	08 95       	ret

0000118c <event_to_wire>:
		return runvar_curmean(&(o->snd));
	}
}

void event_to_wire(const event_t* e, uint8_t w[])
{
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
    119a:	7b 01       	movw	r14, r22
	time_to_wire(e->host_time_start, w);
    119c:	28 81       	ld	r18, Y
    119e:	39 81       	ldd	r19, Y+1	; 0x01
    11a0:	4a 81       	ldd	r20, Y+2	; 0x02
    11a2:	5b 81       	ldd	r21, Y+3	; 0x03
    11a4:	6c 81       	ldd	r22, Y+4	; 0x04
    11a6:	7d 81       	ldd	r23, Y+5	; 0x05
    11a8:	8e 81       	ldd	r24, Y+6	; 0x06
    11aa:	9f 81       	ldd	r25, Y+7	; 0x07
    11ac:	87 01       	movw	r16, r14
    11ae:	7d d1       	rcall	.+762    	; 0x14aa <time_to_wire>
    11b0:	68 85       	ldd	r22, Y+8	; 0x08
	uint32_to_wire(e->evt_dur, w+8);
    11b2:	79 85       	ldd	r23, Y+9	; 0x09
    11b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b8:	a7 01       	movw	r20, r14
    11ba:	48 5f       	subi	r20, 0xF8	; 248
    11bc:	5f 4f       	sbci	r21, 0xFF	; 255
    11be:	e0 df       	rcall	.-64     	; 0x1180 <uint32_to_wire>
    11c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11c2:	f7 01       	movw	r30, r14
	w[12] = e->location;
    11c4:	84 87       	std	Z+12, r24	; 0x0c
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
}
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	08 95       	ret

000011d4 <float_to_wire>:
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
union float_byteview {
	float val;
	uint8_t u8s[4];
};
void float_to_wire(float f, uint8_t w[])
{
    11d8:	00 d0       	rcall	.+0      	; 0x11da <float_to_wire+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <float_to_wire+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
	union float_byteview fbv;
	fbv.val = f;
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	ab 83       	std	Y+3, r26	; 0x03
    11ea:	bc 83       	std	Y+4, r27	; 0x04
    11ec:	de 01       	movw	r26, r28
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	fa 01       	movw	r30, r20
	for (int i = 0; i < 4; i++) {
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
		w[i] = fbv.u8s[i];
    11f6:	2d 91       	ld	r18, X+
    11f8:	21 93       	st	Z+, r18
};
void float_to_wire(float f, uint8_t w[])
{
	union float_byteview fbv;
	fbv.val = f;
	for (int i = 0; i < 4; i++) {
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	91 05       	cpc	r25, r1
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <float_to_wire+0x22>
		w[i] = fbv.u8s[i];
	}
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <float_from_wire>:
float float_from_wire(const uint8_t w[])
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <float_from_wire+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <float_from_wire+0x8>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	union float_byteview fbv;
	for (int i = 0; i < 4; i++) {
    121c:	fc 01       	movw	r30, r24
    121e:	de 01       	movw	r26, r28
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
		fbv.u8s[i] = w[i];
    1226:	21 91       	ld	r18, Z+
    1228:	2d 93       	st	X+, r18
	}
}
float float_from_wire(const uint8_t w[])
{
	union float_byteview fbv;
	for (int i = 0; i < 4; i++) {
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	91 05       	cpc	r25, r1
    1230:	d1 f7       	brne	.-12     	; 0x1226 <float_from_wire+0x16>
		fbv.u8s[i] = w[i];
	}
	return fbv.val;
    1232:	59 81       	ldd	r21, Y+1	; 0x01
    1234:	4a 81       	ldd	r20, Y+2	; 0x02
    1236:	3b 81       	ldd	r19, Y+3	; 0x03
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	85 2f       	mov	r24, r21
    123c:	94 2f       	mov	r25, r20
    123e:	a3 2f       	mov	r26, r19
    1240:	b2 2f       	mov	r27, r18
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <setup_timer>:
		256		61.5
		1024	14.625
	*/
	
	/* set timer 1 to CTC mode */
	TCCR0A |= (1<<WGM01);
    1254:	84 b5       	in	r24, 0x24	; 36
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	84 bd       	out	0x24, r24	; 36
	/* enable interrupts for */
	TIMSK0 |= (1<<OCIE0A);
    125a:	ee e6       	ldi	r30, 0x6E	; 110
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	82 60       	ori	r24, 0x02	; 2
    1262:	80 83       	st	Z, r24
	
	/* set CTC value to 1ms */
	OCR0A = 249; /* 249;*/
    1264:	89 ef       	ldi	r24, 0xF9	; 249
    1266:	87 bd       	out	0x27, r24	; 39
	
	/* set timer 1 to a prescaler of 64 */
	TCCR0B |= (1<<CS01)|(1<<CS00);
    1268:	85 b5       	in	r24, 0x25	; 37
    126a:	83 60       	ori	r24, 0x03	; 3
    126c:	85 bd       	out	0x25, r24	; 37
	
	
	//when timer hits 249 OCF1A is set. to clear it set it to 1
	/* 16000000 / 1024 = 250 ticks in a second, set overflow check to 249 */
	
}
    126e:	08 95       	ret

00001270 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
	cur_millis++;
    1282:	80 91 45 04 	lds	r24, 0x0445
    1286:	90 91 46 04 	lds	r25, 0x0446
    128a:	a0 91 47 04 	lds	r26, 0x0447
    128e:	b0 91 48 04 	lds	r27, 0x0448
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	a1 1d       	adc	r26, r1
    1296:	b1 1d       	adc	r27, r1
    1298:	80 93 45 04 	sts	0x0445, r24
    129c:	90 93 46 04 	sts	0x0446, r25
    12a0:	a0 93 47 04 	sts	0x0447, r26
    12a4:	b0 93 48 04 	sts	0x0448, r27
}
    12a8:	bf 91       	pop	r27
    12aa:	af 91       	pop	r26
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <millis>:

ms_time_t millis(void)
{
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
	ms_time_t ms = cur_millis;
    12be:	00 91 45 04 	lds	r16, 0x0445
    12c2:	10 91 46 04 	lds	r17, 0x0446
    12c6:	20 91 47 04 	lds	r18, 0x0447
    12ca:	30 91 48 04 	lds	r19, 0x0448
	return ms;
}
    12ce:	b8 01       	movw	r22, r16
    12d0:	c9 01       	movw	r24, r18
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <host_millis>:

TIME_t host_millis(void) {
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
	return time_oset + cur_millis;
    12e6:	00 91 45 04 	lds	r16, 0x0445
    12ea:	10 91 46 04 	lds	r17, 0x0446
    12ee:	20 91 47 04 	lds	r18, 0x0447
    12f2:	30 91 48 04 	lds	r19, 0x0448
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	ba 01       	movw	r22, r20
    12fc:	f0 90 3d 04 	lds	r15, 0x043D
    1300:	b0 91 3e 04 	lds	r27, 0x043E
    1304:	a0 91 3f 04 	lds	r26, 0x043F
    1308:	d0 90 40 04 	lds	r13, 0x0440
    130c:	80 91 41 04 	lds	r24, 0x0441
    1310:	90 91 42 04 	lds	r25, 0x0442
    1314:	e0 90 43 04 	lds	r14, 0x0443
    1318:	e0 91 44 04 	lds	r30, 0x0444
    131c:	f0 0e       	add	r15, r16
    131e:	d1 e0       	ldi	r29, 0x01	; 1
    1320:	f0 16       	cp	r15, r16
    1322:	08 f0       	brcs	.+2      	; 0x1326 <host_millis+0x4e>
    1324:	d0 e0       	ldi	r29, 0x00	; 0
    1326:	b1 0f       	add	r27, r17
    1328:	c1 e0       	ldi	r28, 0x01	; 1
    132a:	b1 17       	cp	r27, r17
    132c:	08 f0       	brcs	.+2      	; 0x1330 <host_millis+0x58>
    132e:	c0 e0       	ldi	r28, 0x00	; 0
    1330:	db 0f       	add	r29, r27
    1332:	f1 e0       	ldi	r31, 0x01	; 1
    1334:	db 17       	cp	r29, r27
    1336:	08 f0       	brcs	.+2      	; 0x133a <host_millis+0x62>
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	cf 2b       	or	r28, r31
    133c:	a2 0f       	add	r26, r18
    133e:	b1 e0       	ldi	r27, 0x01	; 1
    1340:	a2 17       	cp	r26, r18
    1342:	08 f0       	brcs	.+2      	; 0x1346 <host_millis+0x6e>
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	ca 0f       	add	r28, r26
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	ca 17       	cp	r28, r26
    134c:	08 f0       	brcs	.+2      	; 0x1350 <host_millis+0x78>
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	bf 2b       	or	r27, r31
    1352:	f3 2f       	mov	r31, r19
    1354:	fd 0d       	add	r31, r13
    1356:	a1 e0       	ldi	r26, 0x01	; 1
    1358:	f3 17       	cp	r31, r19
    135a:	08 f0       	brcs	.+2      	; 0x135e <host_millis+0x86>
    135c:	a0 e0       	ldi	r26, 0x00	; 0
    135e:	bf 0f       	add	r27, r31
    1360:	dd 24       	eor	r13, r13
    1362:	d3 94       	inc	r13
    1364:	bf 17       	cp	r27, r31
    1366:	08 f0       	brcs	.+2      	; 0x136a <host_millis+0x92>
    1368:	dd 24       	eor	r13, r13
    136a:	ad 29       	or	r26, r13
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	84 17       	cp	r24, r20
    1370:	08 f0       	brcs	.+2      	; 0x1374 <host_millis+0x9c>
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	a8 0f       	add	r26, r24
    1376:	dd 24       	eor	r13, r13
    1378:	d3 94       	inc	r13
    137a:	a8 17       	cp	r26, r24
    137c:	08 f0       	brcs	.+2      	; 0x1380 <host_millis+0xa8>
    137e:	dd 24       	eor	r13, r13
    1380:	fd 29       	or	r31, r13
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	95 17       	cp	r25, r21
    1386:	08 f0       	brcs	.+2      	; 0x138a <host_millis+0xb2>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	f9 0f       	add	r31, r25
    138c:	dd 24       	eor	r13, r13
    138e:	d3 94       	inc	r13
    1390:	f9 17       	cp	r31, r25
    1392:	08 f0       	brcs	.+2      	; 0x1396 <host_millis+0xbe>
    1394:	dd 24       	eor	r13, r13
    1396:	8d 29       	or	r24, r13
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	e6 16       	cp	r14, r22
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <host_millis+0xc8>
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	8e 0d       	add	r24, r14
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	8e 15       	cp	r24, r14
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <host_millis+0xd2>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	92 2b       	or	r25, r18
}
    13ac:	2f 2d       	mov	r18, r15
    13ae:	3d 2f       	mov	r19, r29
    13b0:	4c 2f       	mov	r20, r28
    13b2:	5b 2f       	mov	r21, r27
    13b4:	6a 2f       	mov	r22, r26
    13b6:	7f 2f       	mov	r23, r31
    13b8:	9e 0f       	add	r25, r30
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	08 95       	ret

000013ca <set_time_oset>:

void set_time_oset(TIME_t t)
{
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	f9 01       	movw	r30, r18
    13da:	da 01       	movw	r26, r20
    13dc:	eb 01       	movw	r28, r22
	ms_time_t cur = cur_millis;
    13de:	00 91 45 04 	lds	r16, 0x0445
    13e2:	10 91 46 04 	lds	r17, 0x0446
    13e6:	20 91 47 04 	lds	r18, 0x0447
    13ea:	30 91 48 04 	lds	r19, 0x0448
	time_oset = t - cur;
    13ee:	de 2e       	mov	r13, r30
    13f0:	d0 1a       	sub	r13, r16
    13f2:	ee 24       	eor	r14, r14
    13f4:	e3 94       	inc	r14
    13f6:	ed 15       	cp	r30, r13
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <set_time_oset+0x32>
    13fa:	ee 24       	eor	r14, r14
    13fc:	ef 2f       	mov	r30, r31
    13fe:	e1 1b       	sub	r30, r17
    1400:	ff 24       	eor	r15, r15
    1402:	f3 94       	inc	r15
    1404:	fe 17       	cp	r31, r30
    1406:	08 f0       	brcs	.+2      	; 0x140a <set_time_oset+0x40>
    1408:	ff 24       	eor	r15, r15
    140a:	fe 2f       	mov	r31, r30
    140c:	fe 19       	sub	r31, r14
    140e:	ef 2e       	mov	r14, r31
    1410:	f1 e0       	ldi	r31, 0x01	; 1
    1412:	ee 15       	cp	r30, r14
    1414:	08 f0       	brcs	.+2      	; 0x1418 <set_time_oset+0x4e>
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	ff 2a       	or	r15, r31
    141a:	fa 2f       	mov	r31, r26
    141c:	f2 1b       	sub	r31, r18
    141e:	e1 e0       	ldi	r30, 0x01	; 1
    1420:	af 17       	cp	r26, r31
    1422:	08 f0       	brcs	.+2      	; 0x1426 <set_time_oset+0x5c>
    1424:	e0 e0       	ldi	r30, 0x00	; 0
    1426:	af 2f       	mov	r26, r31
    1428:	af 19       	sub	r26, r15
    142a:	ff 24       	eor	r15, r15
    142c:	f3 94       	inc	r15
    142e:	fa 17       	cp	r31, r26
    1430:	08 f0       	brcs	.+2      	; 0x1434 <set_time_oset+0x6a>
    1432:	ff 24       	eor	r15, r15
    1434:	ef 29       	or	r30, r15
    1436:	fb 2f       	mov	r31, r27
    1438:	f3 1b       	sub	r31, r19
    143a:	3f 2f       	mov	r19, r31
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	bf 17       	cp	r27, r31
    1440:	08 f0       	brcs	.+2      	; 0x1444 <set_time_oset+0x7a>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	53 2f       	mov	r21, r19
    1446:	5e 1b       	sub	r21, r30
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	35 17       	cp	r19, r21
    144c:	08 f0       	brcs	.+2      	; 0x1450 <set_time_oset+0x86>
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	24 2b       	or	r18, r20
    1452:	4c 2f       	mov	r20, r28
    1454:	42 1b       	sub	r20, r18
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	c4 17       	cp	r28, r20
    145a:	08 f0       	brcs	.+2      	; 0x145e <set_time_oset+0x94>
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3d 2f       	mov	r19, r29
    1460:	32 1b       	sub	r19, r18
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	d3 17       	cp	r29, r19
    1466:	08 f0       	brcs	.+2      	; 0x146a <set_time_oset+0xa0>
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	68 2f       	mov	r22, r24
    146c:	62 1b       	sub	r22, r18
    146e:	26 2f       	mov	r18, r22
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	82 17       	cp	r24, r18
    1474:	08 f0       	brcs	.+2      	; 0x1478 <set_time_oset+0xae>
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	96 1b       	sub	r25, r22
    147a:	d0 92 3d 04 	sts	0x043D, r13
    147e:	e0 92 3e 04 	sts	0x043E, r14
    1482:	a0 93 3f 04 	sts	0x043F, r26
    1486:	50 93 40 04 	sts	0x0440, r21
    148a:	40 93 41 04 	sts	0x0441, r20
    148e:	30 93 42 04 	sts	0x0442, r19
    1492:	20 93 43 04 	sts	0x0443, r18
    1496:	90 93 44 04 	sts	0x0444, r25
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	08 95       	ret

000014aa <time_to_wire>:
union ui64_byteview {
	uint64_t u64_val;
	uint8_t u8s[8];
};
void time_to_wire(TIME_t ms, uint8_t w[])
{
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	28 97       	sbiw	r28, 0x08	; 8
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
	union ui64_byteview val;
	val.u64_val = ms;
    14c2:	29 83       	std	Y+1, r18	; 0x01
    14c4:	3a 83       	std	Y+2, r19	; 0x02
    14c6:	4b 83       	std	Y+3, r20	; 0x03
    14c8:	5c 83       	std	Y+4, r21	; 0x04
    14ca:	6d 83       	std	Y+5, r22	; 0x05
    14cc:	7e 83       	std	Y+6, r23	; 0x06
    14ce:	8f 83       	std	Y+7, r24	; 0x07
    14d0:	98 87       	std	Y+8, r25	; 0x08
    14d2:	de 01       	movw	r26, r28
    14d4:	19 96       	adiw	r26, 0x09	; 9
    14d6:	f8 01       	movw	r30, r16

union ui64_byteview {
	uint64_t u64_val;
	uint8_t u8s[8];
};
void time_to_wire(TIME_t ms, uint8_t w[])
    14d8:	ce 01       	movw	r24, r28
    14da:	01 96       	adiw	r24, 0x01	; 1
{
	union ui64_byteview val;
	val.u64_val = ms;
	for (int i = 0; i < 8; i++) {
		w[i] = val.u8s[7-i];
    14dc:	2e 91       	ld	r18, -X
    14de:	21 93       	st	Z+, r18
};
void time_to_wire(TIME_t ms, uint8_t w[])
{
	union ui64_byteview val;
	val.u64_val = ms;
	for (int i = 0; i < 8; i++) {
    14e0:	a8 17       	cp	r26, r24
    14e2:	b9 07       	cpc	r27, r25
    14e4:	d9 f7       	brne	.-10     	; 0x14dc <time_to_wire+0x32>
		w[i] = val.u8s[7-i];
	}
}
    14e6:	28 96       	adiw	r28, 0x08	; 8
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <time_from_wire>:

TIME_t time_from_wire(const uint8_t w[])
{
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	28 97       	sbiw	r28, 0x08	; 8
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < 8; i++) {
		w[i] = val.u8s[7-i];
	}
}

TIME_t time_from_wire(const uint8_t w[])
    1510:	dc 01       	movw	r26, r24
    1512:	18 96       	adiw	r26, 0x08	; 8
{
	/* little-endian */
	union ui64_byteview val;
	for (int i = 0; i < 8; i++) {
    1514:	fe 01       	movw	r30, r28
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
		val.u8s[i] = w[7-i];
    151c:	2e 91       	ld	r18, -X
    151e:	21 93       	st	Z+, r18

TIME_t time_from_wire(const uint8_t w[])
{
	/* little-endian */
	union ui64_byteview val;
	for (int i = 0; i < 8; i++) {
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	91 05       	cpc	r25, r1
    1526:	d1 f7       	brne	.-12     	; 0x151c <time_from_wire+0x20>
		val.u8s[i] = w[7-i];
	}
	
	return val.u64_val;
    1528:	29 81       	ldd	r18, Y+1	; 0x01
    152a:	3a 81       	ldd	r19, Y+2	; 0x02
    152c:	4b 81       	ldd	r20, Y+3	; 0x03
    152e:	5c 81       	ldd	r21, Y+4	; 0x04
    1530:	6d 81       	ldd	r22, Y+5	; 0x05
    1532:	7e 81       	ldd	r23, Y+6	; 0x06
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	28 96       	adiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <rfid_sendcommand_readtags>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    154a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    154e:	85 ff       	sbrs	r24, 5
    1550:	fc cf       	rjmp	.-8      	; 0x154a <rfid_sendcommand_readtags>
				UDR1 = DataByte;
    1552:	83 e4       	ldi	r24, 0x43	; 67
    1554:	80 93 ce 00 	sts	0x00CE, r24
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1558:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    155c:	85 ff       	sbrs	r24, 5
    155e:	fc cf       	rjmp	.-8      	; 0x1558 <rfid_sendcommand_readtags+0xe>
				UDR1 = DataByte;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	80 93 ce 00 	sts	0x00CE, r24
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1566:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    156a:	85 ff       	sbrs	r24, 5
    156c:	fc cf       	rjmp	.-8      	; 0x1566 <rfid_sendcommand_readtags+0x1c>
				UDR1 = DataByte;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 ce 00 	sts	0x00CE, r24
void rfid_sendcommand_readtags(void)
{
	Serial_SendByte(0x43);
	Serial_SendByte(0x03);
	Serial_SendByte(0x01);
}
    1574:	08 95       	ret

00001576 <classify_tag>:
};



bool classify_tag(const unsigned char* tagbuf, unsigned char* out_len, const char** out_str)
{
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	5c 01       	movw	r10, r24
    1598:	3b 01       	movw	r6, r22
    159a:	2a 01       	movw	r4, r20
	int c;
	ms_time_t now = millis();
    159c:	8e de       	rcall	.-740    	; 0x12ba <millis>
    159e:	6b 01       	movw	r12, r22
    15a0:	7c 01       	movw	r14, r24
    15a2:	00 e0       	ldi	r16, 0x00	; 0
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	24 e1       	ldi	r18, 0x14	; 20
		c = memcmp((void*)tagbuf,(void*) tags[i].tag,TAG_LEN);
    15a8:	82 2e       	mov	r8, r18
    15aa:	91 2c       	mov	r9, r1
    15ac:	08 9d       	mul	r16, r8
    15ae:	e0 01       	movw	r28, r0
    15b0:	09 9d       	mul	r16, r9
    15b2:	d0 0d       	add	r29, r0
    15b4:	18 9d       	mul	r17, r8
    15b6:	d0 0d       	add	r29, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	cc 54       	subi	r28, 0x4C	; 76
    15bc:	de 4f       	sbci	r29, 0xFE	; 254
    15be:	c5 01       	movw	r24, r10
    15c0:	be 01       	movw	r22, r28
    15c2:	4c e0       	ldi	r20, 0x0C	; 12
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	0e 94 a5 14 	call	0x294a	; 0x294a <memcmp>
    15ca:	00 97       	sbiw	r24, 0x00	; 0
		if (!c) {
    15cc:	21 f5       	brne	.+72     	; 0x1616 <classify_tag+0xa0>
    15ce:	88 89       	ldd	r24, Y+16	; 0x10
			if ((now-tags[i].last_send_time) > DEBOUNCE_MS) {
    15d0:	99 89       	ldd	r25, Y+17	; 0x11
    15d2:	aa 89       	ldd	r26, Y+18	; 0x12
    15d4:	bb 89       	ldd	r27, Y+19	; 0x13
    15d6:	a7 01       	movw	r20, r14
    15d8:	96 01       	movw	r18, r12
    15da:	28 1b       	sub	r18, r24
    15dc:	39 0b       	sbc	r19, r25
    15de:	4a 0b       	sbc	r20, r26
    15e0:	5b 0b       	sbc	r21, r27
    15e2:	da 01       	movw	r26, r20
    15e4:	c9 01       	movw	r24, r18
    15e6:	c8 8a       	std	Y+16, r12	; 0x10
				tags[i].last_send_time = now;
    15e8:	d9 8a       	std	Y+17, r13	; 0x11
    15ea:	ea 8a       	std	Y+18, r14	; 0x12
    15ec:	fb 8a       	std	Y+19, r15	; 0x13
    15ee:	89 38       	cpi	r24, 0x89	; 137
	int c;
	ms_time_t now = millis();
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
		c = memcmp((void*)tagbuf,(void*) tags[i].tag,TAG_LEN);
		if (!c) {
			if ((now-tags[i].last_send_time) > DEBOUNCE_MS) {
    15f0:	33 e1       	ldi	r19, 0x13	; 19
    15f2:	93 07       	cpc	r25, r19
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	a3 07       	cpc	r26, r19
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	b3 07       	cpc	r27, r19
    15fc:	50 f0       	brcs	.+20     	; 0x1612 <classify_tag+0x9c>
    15fe:	ec 85       	ldd	r30, Y+12	; 0x0c
				tags[i].last_send_time = now;
				*out_len = pgm_read_byte(tags[i].msglen);
    1600:	fd 85       	ldd	r31, Y+13	; 0x0d
    1602:	e4 91       	lpm	r30, Z
    1604:	d3 01       	movw	r26, r6
    1606:	ec 93       	st	X, r30
    1608:	8e 85       	ldd	r24, Y+14	; 0x0e
				*out_str = tags[i].msg;
    160a:	9f 85       	ldd	r25, Y+15	; 0x0f
    160c:	f2 01       	movw	r30, r4
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	80 83       	st	Z, r24
    1612:	81 e0       	ldi	r24, 0x01	; 1
				return 1; // str not null, true
			} else {
				tags[i].last_send_time = now;
				return 1;
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <classify_tag+0xac>
    1616:	0f 5f       	subi	r16, 0xFF	; 255

bool classify_tag(const unsigned char* tagbuf, unsigned char* out_len, const char** out_str)
{
	int c;
	ms_time_t now = millis();
	for (unsigned int i = 0; i < TAG_MAGIC_COUNT;i++) {
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	0f 30       	cpi	r16, 0x0F	; 15
    161c:	11 05       	cpc	r17, r1
    161e:	31 f6       	brne	.-116    	; 0x15ac <classify_tag+0x36>
    1620:	80 e0       	ldi	r24, 0x00	; 0
				tags[i].last_send_time = now;
				return 1;
			}
		}
	}
	return 0;
    1622:	df 91       	pop	r29
}
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	9f 90       	pop	r9
    1638:	8f 90       	pop	r8
    163a:	7f 90       	pop	r7
    163c:	6f 90       	pop	r6
    163e:	5f 90       	pop	r5
    1640:	4f 90       	pop	r4
    1642:	08 95       	ret

00001644 <rfid_enable_buzzer>:
    1644:	3a de       	rcall	.-908    	; 0x12ba <millis>
	
}

void rfid_enable_buzzer(void)
{
	last_buzzer_enable = millis();
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	80 93 01 06 	sts	0x0601, r24
    164e:	90 93 02 06 	sts	0x0602, r25
    1652:	a0 93 03 06 	sts	0x0603, r26
    1656:	b0 93 04 06 	sts	0x0604, r27
    165a:	2f 9a       	sbi	0x05, 7	; 5
	PORTB |= (1<<PB7);
    165c:	08 95       	ret

0000165e <heat_enable>:
#include "EscharotomyArm.h"

volatile uint8_t pulse_enabled;
void heat_enable(void)
{
	PORTB |= (1<<PB7);
    165e:	2f 9a       	sbi	0x05, 7	; 5
}
    1660:	08 95       	ret

00001662 <pulse_stop>:
	last_loop_start = millis();
	pulse_enabled = 1;
}
void pulse_stop(void)
{
	pulse_enabled = 0;
    1662:	10 92 45 06 	sts	0x0645, r1
}
    1666:	08 95       	ret

00001668 <pulse_set_delay>:
void pulse_set_delay(int delay)
{
	pulse_enabled = 1;
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	20 93 45 06 	sts	0x0645, r18
	if (delay > PULSE_NUM_ELTS) {
    166e:	85 34       	cpi	r24, 0x45	; 69
    1670:	91 05       	cpc	r25, r1
    1672:	14 f4       	brge	.+4      	; 0x1678 <pulse_set_delay+0x10>
		pulse_delay_ms = delay;
	} else {
		pulse_delay_ms = PULSE_NUM_ELTS; // FIXME 50% seems a good choice
    1674:	84 e4       	ldi	r24, 0x44	; 68
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 e5 02 	sts	0x02E5, r25
    167c:	80 93 e4 02 	sts	0x02E4, r24
    1680:	08 95       	ret

00001682 <flow_enum_set_waiting>:
//TODO don't store them twice if possible
FLOW_ACT_MESSAGE_TABLE(AS_RCV_STR);

void flow_enum_set_waiting(flow_messages k) {
#define AS_FLOW2ENUM_CASE(str) if (k == el_##str) {str##_msg_waiting = 1;return;}
	FLOW_ACT_MESSAGE_TABLE(AS_FLOW2ENUM_CASE);
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	19 f4       	brne	.+6      	; 0x168c <flow_enum_set_waiting+0xa>
    1686:	80 93 77 05 	sts	0x0577, r24
    168a:	08 95       	ret
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	21 f4       	brne	.+8      	; 0x1698 <flow_enum_set_waiting+0x16>
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 93 7c 05 	sts	0x057C, r24
    1696:	08 95       	ret
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	21 f4       	brne	.+8      	; 0x16a4 <flow_enum_set_waiting+0x22>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 9f 05 	sts	0x059F, r24
    16a2:	08 95       	ret
    16a4:	84 30       	cpi	r24, 0x04	; 4
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <flow_enum_set_waiting+0x2e>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 69 05 	sts	0x0569, r24
    16ae:	08 95       	ret
    16b0:	85 30       	cpi	r24, 0x05	; 5
    16b2:	21 f4       	brne	.+8      	; 0x16bc <flow_enum_set_waiting+0x3a>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 a1 05 	sts	0x05A1, r24
    16ba:	08 95       	ret
    16bc:	86 30       	cpi	r24, 0x06	; 6
    16be:	21 f4       	brne	.+8      	; 0x16c8 <flow_enum_set_waiting+0x46>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	80 93 91 05 	sts	0x0591, r24
    16c6:	08 95       	ret
    16c8:	87 30       	cpi	r24, 0x07	; 7
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <flow_enum_set_waiting+0x52>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 a3 05 	sts	0x05A3, r24
    16d2:	08 95       	ret
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	19 f4       	brne	.+6      	; 0x16de <flow_enum_set_waiting+0x5c>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 90 05 	sts	0x0590, r24
    16de:	08 95       	ret

000016e0 <flowsensor_task>:
	return;
}


void flowsensor_task(uint16_t* adc_values)
{
    16e0:	cf 92       	push	r12
    16e2:	df 92       	push	r13
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
	ms_time_t now = millis();
    16ee:	e5 dd       	rcall	.-1078   	; 0x12ba <millis>
    16f0:	6b 01       	movw	r12, r22
    16f2:	7c 01       	movw	r14, r24
    16f4:	20 91 4c 06 	lds	r18, 0x064C
	
	if ((last_fs_st == UP && adc_values[SENSOR_PIN] < THRESH) ||
    16f8:	21 30       	cpi	r18, 0x01	; 1
    16fa:	39 f4       	brne	.+14     	; 0x170a <flowsensor_task+0x2a>
    16fc:	88 81       	ld	r24, Y
    16fe:	99 81       	ldd	r25, Y+1	; 0x01
    1700:	32 e0       	ldi	r19, 0x02	; 2
    1702:	80 30       	cpi	r24, 0x00	; 0
    1704:	93 07       	cpc	r25, r19
    1706:	48 f0       	brcs	.+18     	; 0x171a <flowsensor_task+0x3a>
    1708:	34 c0       	rjmp	.+104    	; 0x1772 <flowsensor_task+0x92>
    170a:	22 23       	and	r18, r18
    170c:	91 f5       	brne	.+100    	; 0x1772 <flowsensor_task+0x92>
    170e:	88 81       	ld	r24, Y
		(last_fs_st == DOWN && adc_values[SENSOR_PIN] > THRESH)) {
    1710:	99 81       	ldd	r25, Y+1	; 0x01
    1712:	32 e0       	ldi	r19, 0x02	; 2
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	93 07       	cpc	r25, r19
    1718:	60 f1       	brcs	.+88     	; 0x1772 <flowsensor_task+0x92>
    171a:	81 e0       	ldi	r24, 0x01	; 1
		last_fs_st = !last_fs_st;
    171c:	21 11       	cpse	r18, r1
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	80 93 4c 06 	sts	0x064C, r24
    1724:	81 e0       	ldi	r24, 0x01	; 1
		
		blip_msg_waiting = 1;
    1726:	80 93 81 05 	sts	0x0581, r24
    172a:	80 91 6f 05 	lds	r24, 0x056F
		if (now <= (last_blip + TIME_THRESH)) {
    172e:	90 91 70 05 	lds	r25, 0x0570
    1732:	a0 91 71 05 	lds	r26, 0x0571
    1736:	b0 91 72 05 	lds	r27, 0x0572
    173a:	86 50       	subi	r24, 0x06	; 6
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	af 4f       	sbci	r26, 0xFF	; 255
    1740:	bf 4f       	sbci	r27, 0xFF	; 255
    1742:	8c 15       	cp	r24, r12
    1744:	9d 05       	cpc	r25, r13
    1746:	ae 05       	cpc	r26, r14
    1748:	bf 05       	cpc	r27, r15
    174a:	58 f0       	brcs	.+22     	; 0x1762 <flowsensor_task+0x82>
    174c:	80 91 4a 06 	lds	r24, 0x064A
			//fast! probably an iv!
			if (iv_connected && (last_flowmsg_rcvd != NO_FLOW_MESSAGE)) {
    1750:	88 23       	and	r24, r24
    1752:	39 f0       	breq	.+14     	; 0x1762 <flowsensor_task+0x82>
    1754:	80 91 49 04 	lds	r24, 0x0449
    1758:	88 23       	and	r24, r24
    175a:	19 f0       	breq	.+6      	; 0x1762 <flowsensor_task+0x82>
    175c:	92 df       	rcall	.-220    	; 0x1682 <flow_enum_set_waiting>
				flow_enum_set_waiting(last_flowmsg_rcvd);
    175e:	10 92 49 04 	sts	0x0449, r1
				last_flowmsg_rcvd = NO_FLOW_MESSAGE;
    1762:	c0 92 6f 05 	sts	0x056F, r12
			}
		}
		last_blip = now;
    1766:	d0 92 70 05 	sts	0x0570, r13
    176a:	e0 92 71 05 	sts	0x0571, r14
    176e:	f0 92 72 05 	sts	0x0572, r15
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
		flow_enum_set_waiting(last_flowmsg_rcvd);
		//last_flowmsg_rcvd = NO_FLOW_MESSAGE;
	}
	*/
	
}
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	08 95       	ret

00001780 <ram_prog_cmp>:
    1780:	dc 01       	movw	r26, r24
    1782:	80 e0       	ldi	r24, 0x00	; 0


int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0a c0       	rjmp	.+20     	; 0x179c <ram_prog_cmp+0x1c>
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
    1788:	2d 91       	ld	r18, X+
	*/
	
}


int ram_prog_cmp(char* ram, char* prog, int n)
    178a:	fb 01       	movw	r30, r22
    178c:	e8 0f       	add	r30, r24
    178e:	f9 1f       	adc	r31, r25
{
	for (int i = 0; i < n; i++) {
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
    1790:	e4 91       	lpm	r30, Z
    1792:	2e 17       	cp	r18, r30
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <ram_prog_cmp+0x28>
			return -1;
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
    1796:	e2 17       	cp	r30, r18
    1798:	50 f0       	brcs	.+20     	; 0x17ae <ram_prog_cmp+0x2e>
}


int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	84 17       	cp	r24, r20
    179e:	95 07       	cpc	r25, r21
    17a0:	9c f3       	brlt	.-26     	; 0x1788 <ram_prog_cmp+0x8>
			return -1;
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
			return 1;
		}
	}
	return 0;
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	08 95       	ret

int ram_prog_cmp(char* ram, char* prog, int n)
{
	for (int i = 0; i < n; i++) {
		if (ram[i] < pgm_read_byte(&(prog[i]))) {
			return -1;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	08 95       	ret
		} else if (ram[i] > pgm_read_byte(&(prog[i]))) {
			return 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
    17b2:	08 95       	ret

000017b4 <flow_sensor_handle_PROX>:

void flow_sensor_handle_PROX(char* data)
{
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	ec 01       	movw	r28, r24
#define AS_ACT_CMP_CASE(s) if (!ram_prog_cmp(data,(char*)&pstr_rcv_##s,MIN(data[0],pstr_rcv_##s .len))) {last_flowmsg_rcvd = el_##s;return;} 
	
	FLOW_ACT_MESSAGE_TABLE(AS_ACT_CMP_CASE);
    17be:	18 81       	ld	r17, Y
    17c0:	41 2f       	mov	r20, r17
    17c2:	1a 30       	cpi	r17, 0x0A	; 10
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <flow_sensor_handle_PROX+0x14>
    17c6:	49 e0       	ldi	r20, 0x09	; 9
    17c8:	ce 01       	movw	r24, r28
    17ca:	65 e6       	ldi	r22, 0x65	; 101
    17cc:	75 e0       	ldi	r23, 0x05	; 5
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	d7 df       	rcall	.-82     	; 0x1780 <ram_prog_cmp>
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	11 f4       	brne	.+4      	; 0x17da <flow_sensor_handle_PROX+0x26>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	4f c0       	rjmp	.+158    	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    17da:	01 2f       	mov	r16, r17
    17dc:	19 30       	cpi	r17, 0x09	; 9
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <flow_sensor_handle_PROX+0x2e>
    17e0:	08 e0       	ldi	r16, 0x08	; 8
    17e2:	ce 01       	movw	r24, r28
    17e4:	6b e5       	ldi	r22, 0x5B	; 91
    17e6:	75 e0       	ldi	r23, 0x05	; 5
    17e8:	40 2f       	mov	r20, r16
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	c9 df       	rcall	.-110    	; 0x1780 <ram_prog_cmp>
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <flow_sensor_handle_PROX+0x42>
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	41 c0       	rjmp	.+130    	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    17f6:	ce 01       	movw	r24, r28
    17f8:	61 e5       	ldi	r22, 0x51	; 81
    17fa:	75 e0       	ldi	r23, 0x05	; 5
    17fc:	40 2f       	mov	r20, r16
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	bf df       	rcall	.-130    	; 0x1780 <ram_prog_cmp>
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	11 f4       	brne	.+4      	; 0x180a <flow_sensor_handle_PROX+0x56>
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	37 c0       	rjmp	.+110    	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    180a:	ce 01       	movw	r24, r28
    180c:	67 e4       	ldi	r22, 0x47	; 71
    180e:	75 e0       	ldi	r23, 0x05	; 5
    1810:	40 2f       	mov	r20, r16
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	b5 df       	rcall	.-150    	; 0x1780 <ram_prog_cmp>
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	11 f4       	brne	.+4      	; 0x181e <flow_sensor_handle_PROX+0x6a>
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	2d c0       	rjmp	.+90     	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    181e:	41 2f       	mov	r20, r17
    1820:	1c 30       	cpi	r17, 0x0C	; 12
    1822:	08 f0       	brcs	.+2      	; 0x1826 <flow_sensor_handle_PROX+0x72>
    1824:	4b e0       	ldi	r20, 0x0B	; 11
    1826:	ce 01       	movw	r24, r28
    1828:	6a e3       	ldi	r22, 0x3A	; 58
    182a:	75 e0       	ldi	r23, 0x05	; 5
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	a8 df       	rcall	.-176    	; 0x1780 <ram_prog_cmp>
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	11 f4       	brne	.+4      	; 0x1838 <flow_sensor_handle_PROX+0x84>
    1834:	85 e0       	ldi	r24, 0x05	; 5
    1836:	20 c0       	rjmp	.+64     	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    1838:	ce 01       	movw	r24, r28
    183a:	60 e3       	ldi	r22, 0x30	; 48
    183c:	75 e0       	ldi	r23, 0x05	; 5
    183e:	40 2f       	mov	r20, r16
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	9e df       	rcall	.-196    	; 0x1780 <ram_prog_cmp>
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	11 f4       	brne	.+4      	; 0x184c <flow_sensor_handle_PROX+0x98>
    1848:	86 e0       	ldi	r24, 0x06	; 6
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    184c:	ce 01       	movw	r24, r28
    184e:	66 e2       	ldi	r22, 0x26	; 38
    1850:	75 e0       	ldi	r23, 0x05	; 5
    1852:	40 2f       	mov	r20, r16
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	94 df       	rcall	.-216    	; 0x1780 <ram_prog_cmp>
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	11 f4       	brne	.+4      	; 0x1860 <flow_sensor_handle_PROX+0xac>
    185c:	87 e0       	ldi	r24, 0x07	; 7
    185e:	0c c0       	rjmp	.+24     	; 0x1878 <flow_sensor_handle_PROX+0xc4>
    1860:	41 2f       	mov	r20, r17
    1862:	14 30       	cpi	r17, 0x04	; 4
    1864:	08 f0       	brcs	.+2      	; 0x1868 <flow_sensor_handle_PROX+0xb4>
    1866:	43 e0       	ldi	r20, 0x03	; 3
    1868:	ce 01       	movw	r24, r28
    186a:	61 e2       	ldi	r22, 0x21	; 33
    186c:	75 e0       	ldi	r23, 0x05	; 5
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	87 df       	rcall	.-242    	; 0x1780 <ram_prog_cmp>
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	19 f4       	brne	.+6      	; 0x187c <flow_sensor_handle_PROX+0xc8>
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	80 93 49 04 	sts	0x0449, r24
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <flow_sensor_handle_ACT>:
    1886:	62 e1       	ldi	r22, 0x12	; 18
    1888:	75 e0       	ldi	r23, 0x05	; 5
    188a:	4d e0       	ldi	r20, 0x0D	; 13
	//determine which string it is
	
}
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	78 df       	rcall	.-272    	; 0x1780 <ram_prog_cmp>
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	19 f4       	brne	.+6      	; 0x189a <flow_sensor_handle_ACT+0x14>
    1894:	81 e0       	ldi	r24, 0x01	; 1
DEFINE_PSTRING(iv_connected_str, "ARM_R_IV_CATH");
void flow_sensor_handle_ACT(char* data)
{
	//if ARM_R_IV_CATH is received, begin acknowledging IVs
	if (!ram_prog_cmp(data,(char*)&iv_connected_str,iv_connected_str.len)) {
		iv_connected = 1;
    1896:	80 93 4a 06 	sts	0x064A, r24
    189a:	08 95       	ret

0000189c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24
    18b0:	7b 01       	movw	r14, r22
    18b2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    18b4:	f0 d1       	rcall	.+992    	; 0x1c96 <Endpoint_WaitUntilReady>
    18b6:	18 2f       	mov	r17, r24
    18b8:	88 23       	and	r24, r24
    18ba:	a9 f5       	brne	.+106    	; 0x1926 <Endpoint_Write_Stream_LE+0x8a>
    18bc:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    18be:	d1 04       	cpc	r13, r1
    18c0:	39 f0       	breq	.+14     	; 0x18d0 <Endpoint_Write_Stream_LE+0x34>
    18c2:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    18c4:	20 81       	ld	r18, Z
    18c6:	31 81       	ldd	r19, Z+1	; 0x01
    18c8:	e2 1a       	sub	r14, r18
    18ca:	f3 0a       	sbc	r15, r19
    18cc:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    18ce:	d3 1f       	adc	r29, r19
    18d0:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    18d2:	bb 24       	eor	r11, r11
    18d4:	23 c0       	rjmp	.+70     	; 0x191c <Endpoint_Write_Stream_LE+0x80>
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18da:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    18dc:	16 c0       	rjmp	.+44     	; 0x190a <Endpoint_Write_Stream_LE+0x6e>
    18de:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e2:	8e 77       	andi	r24, 0x7E	; 126
    18e4:	80 93 e8 00 	sts	0x00E8, r24
    18e8:	99 d4       	rcall	.+2354   	; 0x221c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    18ea:	c1 14       	cp	r12, r1
    18ec:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    18ee:	49 f0       	breq	.+18     	; 0x1902 <Endpoint_Write_Stream_LE+0x66>
    18f0:	f6 01       	movw	r30, r12
    18f2:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	8a 0d       	add	r24, r10
    18f8:	9b 1d       	adc	r25, r11
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	15 e0       	ldi	r17, 0x05	; 5
    1900:	12 c0       	rjmp	.+36     	; 0x1926 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1902:	c9 d1       	rcall	.+914    	; 0x1c96 <Endpoint_WaitUntilReady>
    1904:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1906:	51 f0       	breq	.+20     	; 0x191c <Endpoint_Write_Stream_LE+0x80>
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <Endpoint_Write_Stream_LE+0x88>
    190a:	89 91       	ld	r24, Y+
    190c:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1910:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1912:	e1 08       	sbc	r14, r1
    1914:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1916:	08 94       	sec
    1918:	a1 1c       	adc	r10, r1
    191a:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    191c:	e1 14       	cp	r14, r1
    191e:	f1 04       	cpc	r15, r1
    1920:	d1 f6       	brne	.-76     	; 0x18d6 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <Endpoint_Write_Stream_LE+0x8a>
    1924:	18 2f       	mov	r17, r24
    1926:	81 2f       	mov	r24, r17
    1928:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    192a:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    192c:	1f 91       	pop	r17
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	08 95       	ret

0000193c <Endpoint_Write_Control_Stream_LE>:
    193c:	40 91 58 06 	lds	r20, 0x0658
    1940:	50 91 59 06 	lds	r21, 0x0659
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1944:	46 17       	cp	r20, r22
    1946:	57 07       	cpc	r21, r23
    1948:	20 f4       	brcc	.+8      	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x16>
    194a:	ba 01       	movw	r22, r20
    194c:	fc 01       	movw	r30, r24
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	3d c0       	rjmp	.+122    	; 0x19cc <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1952:	61 15       	cp	r22, r1
    1954:	71 05       	cpc	r23, r1
    1956:	d1 f7       	brne	.-12     	; 0x194c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1958:	40 91 e8 00 	lds	r20, 0x00E8
    195c:	4e 77       	andi	r20, 0x7E	; 126
    195e:	40 93 e8 00 	sts	0x00E8, r20
    1962:	f4 cf       	rjmp	.-24     	; 0x194c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1964:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1968:	88 23       	and	r24, r24
    196a:	09 f4       	brne	.+2      	; 0x196e <Endpoint_Write_Control_Stream_LE+0x32>
    196c:	47 c0       	rjmp	.+142    	; 0x19fc <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    196e:	85 30       	cpi	r24, 0x05	; 5
    1970:	09 f4       	brne	.+2      	; 0x1974 <Endpoint_Write_Control_Stream_LE+0x38>
    1972:	46 c0       	rjmp	.+140    	; 0x1a00 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1974:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1978:	83 fd       	sbrc	r24, 3
    197a:	3e c0       	rjmp	.+124    	; 0x19f8 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1980:	82 fd       	sbrc	r24, 2
    1982:	34 c0       	rjmp	.+104    	; 0x19ec <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1984:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1988:	80 ff       	sbrs	r24, 0
    198a:	20 c0       	rjmp	.+64     	; 0x19cc <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    198c:	90 91 f3 00 	lds	r25, 0x00F3
    1990:	80 91 f2 00 	lds	r24, 0x00F2
    1994:	39 2f       	mov	r19, r25
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	82 2b       	or	r24, r18
    199c:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19a0:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19a2:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    19a6:	61 50       	subi	r22, 0x01	; 1
    19a8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    19aa:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19ac:	61 15       	cp	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x7c>
    19b2:	88 30       	cpi	r24, 0x08	; 8
    19b4:	91 05       	cpc	r25, r1
    19b6:	a0 f3       	brcs	.-24     	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	91 05       	cpc	r25, r1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <Endpoint_Write_Control_Stream_LE+0x86>
    19c0:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19c2:	80 91 e8 00 	lds	r24, 0x00E8
    19c6:	8e 77       	andi	r24, 0x7E	; 126
    19c8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	49 f6       	brne	.-110    	; 0x1964 <Endpoint_Write_Control_Stream_LE+0x28>
    19d2:	44 23       	and	r20, r20
    19d4:	39 f6       	brne	.-114    	; 0x1964 <Endpoint_Write_Control_Stream_LE+0x28>
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d8:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19dc:	88 23       	and	r24, r24
    19de:	71 f0       	breq	.+28     	; 0x19fc <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19e0:	85 30       	cpi	r24, 0x05	; 5
    19e2:	71 f0       	breq	.+28     	; 0x1a00 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19e8:	83 fd       	sbrc	r24, 3
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ec:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19f0:	82 ff       	sbrs	r24, 2
    19f2:	f2 cf       	rjmp	.-28     	; 0x19d8 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a06:	08 95       	ret

00001a08 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a0e:	40 91 e8 00 	lds	r20, 0x00E8
    1a12:	4b 77       	andi	r20, 0x7B	; 123
    1a14:	40 93 e8 00 	sts	0x00E8, r20

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1a18:	58 2f       	mov	r21, r24
    1a1a:	49 2f       	mov	r20, r25
    1a1c:	2b c0       	rjmp	.+86     	; 0x1a74 <Endpoint_Read_Control_Stream_LE+0x6c>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1e:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a22:	88 23       	and	r24, r24
    1a24:	d9 f1       	breq	.+118    	; 0x1a9c <Endpoint_Read_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a26:	85 30       	cpi	r24, 0x05	; 5
    1a28:	a9 f1       	breq	.+106    	; 0x1a94 <Endpoint_Read_Control_Stream_LE+0x8c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a2a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a2e:	83 fd       	sbrc	r24, 3
    1a30:	33 c0       	rjmp	.+102    	; 0x1a98 <Endpoint_Read_Control_Stream_LE+0x90>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1a36:	82 ff       	sbrs	r24, 2
    1a38:	f2 cf       	rjmp	.-28     	; 0x1a1e <Endpoint_Read_Control_Stream_LE+0x16>
    1a3a:	e5 2f       	mov	r30, r21
    1a3c:	f4 2f       	mov	r31, r20
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a40:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a44:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a46:	5e 2f       	mov	r21, r30
    1a48:	4f 2f       	mov	r20, r31
				Length--;
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1a4e:	69 f0       	breq	.+26     	; 0x1a6a <Endpoint_Read_Control_Stream_LE+0x62>
    1a50:	5e 2f       	mov	r21, r30
    1a52:	4f 2f       	mov	r20, r31
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a54:	90 91 f3 00 	lds	r25, 0x00F3
    1a58:	80 91 f2 00 	lds	r24, 0x00F2
    1a5c:	39 2f       	mov	r19, r25
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	82 2b       	or	r24, r18
    1a64:	93 2b       	or	r25, r19
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	59 f7       	brne	.-42     	; 0x1a40 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a6a:	80 91 e8 00 	lds	r24, 0x00E8
    1a6e:	8b 77       	andi	r24, 0x7B	; 123
    1a70:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1a74:	61 15       	cp	r22, r1
    1a76:	71 05       	cpc	r23, r1
    1a78:	91 f6       	brne	.-92     	; 0x1a1e <Endpoint_Read_Control_Stream_LE+0x16>
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <Endpoint_Read_Control_Stream_LE+0x80>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a7c:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a80:	88 23       	and	r24, r24
    1a82:	61 f0       	breq	.+24     	; 0x1a9c <Endpoint_Read_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a84:	85 30       	cpi	r24, 0x05	; 5
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <Endpoint_Read_Control_Stream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a88:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1a8c:	80 ff       	sbrs	r24, 0
    1a8e:	f6 cf       	rjmp	.-20     	; 0x1a7c <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aa2:	08 95       	ret

00001aa4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1aa4:	40 91 58 06 	lds	r20, 0x0658
    1aa8:	50 91 59 06 	lds	r21, 0x0659
    1aac:	46 17       	cp	r20, r22
    1aae:	57 07       	cpc	r21, r23
    1ab0:	20 f4       	brcc	.+8      	; 0x1aba <Endpoint_Write_Control_PStream_LE+0x16>
    1ab2:	ba 01       	movw	r22, r20
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	3e c0       	rjmp	.+124    	; 0x1b36 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1aba:	61 15       	cp	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ac0:	40 91 e8 00 	lds	r20, 0x00E8
    1ac4:	4e 77       	andi	r20, 0x7E	; 126
    1ac6:	40 93 e8 00 	sts	0x00E8, r20
    1aca:	f4 cf       	rjmp	.-24     	; 0x1ab4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1acc:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <Endpoint_Write_Control_PStream_LE+0x32>
    1ad4:	48 c0       	rjmp	.+144    	; 0x1b66 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ad6:	85 30       	cpi	r24, 0x05	; 5
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <Endpoint_Write_Control_PStream_LE+0x38>
    1ada:	47 c0       	rjmp	.+142    	; 0x1b6a <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1adc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ae0:	83 fd       	sbrc	r24, 3
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ae4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ae8:	82 fd       	sbrc	r24, 2
    1aea:	35 c0       	rjmp	.+106    	; 0x1b56 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1af0:	80 ff       	sbrs	r24, 0
    1af2:	21 c0       	rjmp	.+66     	; 0x1b36 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1af4:	90 91 f3 00 	lds	r25, 0x00F3
    1af8:	80 91 f2 00 	lds	r24, 0x00F2
    1afc:	39 2f       	mov	r19, r25
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	82 2b       	or	r24, r18
    1b04:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b08:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b0a:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b0e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1b10:	61 50       	subi	r22, 0x01	; 1
    1b12:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1b14:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b16:	61 15       	cp	r22, r1
    1b18:	71 05       	cpc	r23, r1
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <Endpoint_Write_Control_PStream_LE+0x7e>
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	91 05       	cpc	r25, r1
    1b20:	98 f3       	brcs	.-26     	; 0x1b08 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	88 30       	cpi	r24, 0x08	; 8
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0x88>
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b2c:	80 91 e8 00 	lds	r24, 0x00E8
    1b30:	8e 77       	andi	r24, 0x7E	; 126
    1b32:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b36:	61 15       	cp	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	41 f6       	brne	.-112    	; 0x1acc <Endpoint_Write_Control_PStream_LE+0x28>
    1b3c:	44 23       	and	r20, r20
    1b3e:	31 f6       	brne	.-116    	; 0x1acc <Endpoint_Write_Control_PStream_LE+0x28>
    1b40:	0a c0       	rjmp	.+20     	; 0x1b56 <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b42:	80 91 51 06 	lds	r24, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b46:	88 23       	and	r24, r24
    1b48:	71 f0       	breq	.+28     	; 0x1b66 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b4a:	85 30       	cpi	r24, 0x05	; 5
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b52:	83 fd       	sbrc	r24, 3
    1b54:	0c c0       	rjmp	.+24     	; 0x1b6e <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b56:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b5a:	82 ff       	sbrs	r24, 2
    1b5c:	f2 cf       	rjmp	.-28     	; 0x1b42 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b70:	08 95       	ret

00001b72 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b72:	98 2f       	mov	r25, r24
    1b74:	2a c0       	rjmp	.+84     	; 0x1bca <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b76:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1b7a:	98 17       	cp	r25, r24
    1b7c:	39 f0       	breq	.+14     	; 0x1b8c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1b7e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b82:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b86:	50 91 f0 00 	lds	r21, 0x00F0
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b8c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b8e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b90:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b92:	21 ff       	sbrs	r18, 1
    1b94:	19 c0       	rjmp	.+50     	; 0x1bc8 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1b96:	30 91 eb 00 	lds	r19, 0x00EB
    1b9a:	3e 7f       	andi	r19, 0xFE	; 254
    1b9c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1ba0:	30 91 ed 00 	lds	r19, 0x00ED
    1ba4:	3d 7f       	andi	r19, 0xFD	; 253
    1ba6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1baa:	30 91 eb 00 	lds	r19, 0x00EB
    1bae:	31 60       	ori	r19, 0x01	; 1
    1bb0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1bb4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1bb8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1bbc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1bc0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1bc4:	27 ff       	sbrs	r18, 7
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1bc8:	9f 5f       	subi	r25, 0xFF	; 255
    1bca:	97 30       	cpi	r25, 0x07	; 7
    1bcc:	a0 f2       	brcs	.-88     	; 0x1b76 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bce:	8f 70       	andi	r24, 0x0F	; 15
    1bd0:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1bda:	08 95       	ret

00001bdc <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1be6:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1be8:	00 e0       	ldi	r16, 0x00	; 0
    1bea:	2a c0       	rjmp	.+84     	; 0x1c40 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    1bec:	98 81       	ld	r25, Y
    1bee:	99 23       	and	r25, r25
    1bf0:	29 f1       	breq	.+74     	; 0x1c3c <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1bf2:	6b 81       	ldd	r22, Y+3	; 0x03
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1bfa:	89 2f       	mov	r24, r25
    1bfc:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1bfe:	87 30       	cpi	r24, 0x07	; 7
    1c00:	18 f5       	brcc	.+70     	; 0x1c48 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1c02:	62 95       	swap	r22
    1c04:	66 0f       	add	r22, r22
    1c06:	66 0f       	add	r22, r22
    1c08:	60 7c       	andi	r22, 0xC0	; 192
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	99 27       	eor	r25, r25
    1c0e:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c10:	69 2b       	or	r22, r25
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	10 f0       	brcs	.+4      	; 0x1c1a <Endpoint_ConfigureEndpointTable+0x3e>
    1c16:	96 e0       	ldi	r25, 0x06	; 6
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <Endpoint_ConfigureEndpointTable+0x40>
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1c1c:	28 e0       	ldi	r18, 0x08	; 8
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1c24:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1c2a:	2e 17       	cp	r18, r30
    1c2c:	3f 07       	cpc	r19, r31
    1c2e:	d0 f3       	brcs	.-12     	; 0x1c24 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1c30:	42 95       	swap	r20
    1c32:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c34:	49 2b       	or	r20, r25
    1c36:	9d df       	rcall	.-198    	; 0x1b72 <Endpoint_ConfigureEndpoint_Prv>
    1c38:	88 23       	and	r24, r24
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <Endpoint_ConfigureEndpointTable+0x6c>
    1c3c:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1c3e:	25 96       	adiw	r28, 0x05	; 5
    1c40:	01 17       	cp	r16, r17
    1c42:	a1 f6       	brne	.-88     	; 0x1bec <Endpoint_ConfigureEndpointTable+0x10>
    1c44:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <Endpoint_ConfigureEndpointTable+0x6e>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1c4a:	df 91       	pop	r29
	}

	return true;
}
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	08 95       	ret

00001c54 <Endpoint_ClearStatusStage>:
    1c54:	80 91 52 06 	lds	r24, 0x0652
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c58:	87 ff       	sbrs	r24, 7
    1c5a:	13 c0       	rjmp	.+38     	; 0x1c82 <Endpoint_ClearStatusStage+0x2e>
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c5e:	80 91 51 06 	lds	r24, 0x0651
    1c62:	88 23       	and	r24, r24
    1c64:	b9 f0       	breq	.+46     	; 0x1c94 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c66:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1c6a:	82 ff       	sbrs	r24, 2
    1c6c:	f8 cf       	rjmp	.-16     	; 0x1c5e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c6e:	80 91 e8 00 	lds	r24, 0x00E8
    1c72:	8b 77       	andi	r24, 0x7B	; 123
    1c74:	80 93 e8 00 	sts	0x00E8, r24
    1c78:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c7a:	80 91 51 06 	lds	r24, 0x0651
    1c7e:	88 23       	and	r24, r24
    1c80:	49 f0       	breq	.+18     	; 0x1c94 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c82:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c86:	80 ff       	sbrs	r24, 0
    1c88:	f8 cf       	rjmp	.-16     	; 0x1c7a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8
    1c8e:	8e 77       	andi	r24, 0x7E	; 126
    1c90:	80 93 e8 00 	sts	0x00E8, r24
    1c94:	08 95       	ret

00001c96 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c96:	80 91 e4 00 	lds	r24, 0x00E4
    1c9a:	90 91 e5 00 	lds	r25, 0x00E5
    1c9e:	45 e6       	ldi	r20, 0x65	; 101
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <Endpoint_WaitUntilReady+0xe>
    1ca2:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ca4:	20 91 ec 00 	lds	r18, 0x00EC
    1ca8:	20 ff       	sbrs	r18, 0
    1caa:	23 c0       	rjmp	.+70     	; 0x1cf2 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cac:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1cb0:	20 fd       	sbrc	r18, 0
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cb4:	20 91 51 06 	lds	r18, 0x0651

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cb8:	22 23       	and	r18, r18
    1cba:	99 f0       	breq	.+38     	; 0x1ce2 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cbc:	25 30       	cpi	r18, 0x05	; 5
    1cbe:	99 f0       	breq	.+38     	; 0x1ce6 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1cc0:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1cc4:	25 fd       	sbrc	r18, 5
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <Endpoint_WaitUntilReady+0x54>
    1cc8:	20 91 e4 00 	lds	r18, 0x00E4
    1ccc:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	39 f3       	breq	.-50     	; 0x1ca4 <Endpoint_WaitUntilReady+0xe>
    1cd6:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1cd8:	21 f7       	brne	.-56     	; 0x1ca2 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1cee:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1cf0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1cf2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1cf6:	22 ff       	sbrs	r18, 2
    1cf8:	dd cf       	rjmp	.-70     	; 0x1cb4 <Endpoint_WaitUntilReady+0x1e>
    1cfa:	f9 cf       	rjmp	.-14     	; 0x1cee <Endpoint_WaitUntilReady+0x58>

00001cfc <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d04:	4b d0       	rcall	.+150    	; 0x1d9c <USB_INT_DisableAllInterrupts>
    1d06:	52 d0       	rcall	.+164    	; 0x1dac <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d08:	c8 ed       	ldi	r28, 0xD8	; 216
    1d0a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d0c:	88 81       	ld	r24, Y
    1d0e:	8f 77       	andi	r24, 0x7F	; 127
    1d10:	88 83       	st	Y, r24
    1d12:	88 81       	ld	r24, Y
    1d14:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1d16:	88 83       	st	Y, r24
    1d18:	88 81       	ld	r24, Y
    1d1a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d1c:	88 83       	st	Y, r24
    1d1e:	19 bc       	out	0x29, r1	; 41
    1d20:	10 92 51 06 	sts	0x0651, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d24:	10 92 4d 06 	sts	0x064D, r1
	USB_Device_ConfigurationNumber  = 0;
    1d28:	10 92 4f 06 	sts	0x064F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d2c:	10 92 4e 06 	sts	0x064E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d30:	00 ee       	ldi	r16, 0xE0	; 224
    1d32:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d34:	f8 01       	movw	r30, r16
    1d36:	80 81       	ld	r24, Z
    1d38:	8b 7f       	andi	r24, 0xFB	; 251
    1d3a:	80 83       	st	Z, r24
    1d3c:	88 81       	ld	r24, Y
    1d3e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d40:	88 83       	st	Y, r24
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d46:	42 e0       	ldi	r20, 0x02	; 2
    1d48:	14 df       	rcall	.-472    	; 0x1b72 <Endpoint_ConfigureEndpoint_Prv>
    1d4a:	e1 ee       	ldi	r30, 0xE1	; 225
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	80 83       	st	Z, r24
    1d54:	e2 ee       	ldi	r30, 0xE2	; 226
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d5a:	81 60       	ori	r24, 0x01	; 1
    1d5c:	80 83       	st	Z, r24
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 60       	ori	r24, 0x08	; 8
    1d62:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d64:	f8 01       	movw	r30, r16
    1d66:	80 81       	ld	r24, Z
    1d68:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d6a:	80 83       	st	Z, r24
    1d6c:	88 81       	ld	r24, Y
    1d6e:	80 61       	ori	r24, 0x10	; 16
    1d70:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <USB_Init>:
    1d7c:	e8 ed       	ldi	r30, 0xD8	; 216
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d82:	8f 7e       	andi	r24, 0xEF	; 239
    1d84:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d86:	e7 ed       	ldi	r30, 0xD7	; 215
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	81 60       	ori	r24, 0x01	; 1
    1d8e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	80 93 50 06 	sts	0x0650, r24

	USB_ResetInterface();
    1d9a:	b0 cf       	rjmp	.-160    	; 0x1cfc <USB_ResetInterface>

00001d9c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d9c:	e8 ed       	ldi	r30, 0xD8	; 216
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8e 7f       	andi	r24, 0xFE	; 254
    1da4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1da6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1daa:	08 95       	ret

00001dac <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1dac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1db0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1db4:	08 95       	ret

00001db6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1db6:	1f 92       	push	r1
    1db8:	0f 92       	push	r0
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	0f 92       	push	r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	2f 93       	push	r18
    1dc2:	3f 93       	push	r19
    1dc4:	4f 93       	push	r20
    1dc6:	5f 93       	push	r21
    1dc8:	6f 93       	push	r22
    1dca:	7f 93       	push	r23
    1dcc:	8f 93       	push	r24
    1dce:	9f 93       	push	r25
    1dd0:	af 93       	push	r26
    1dd2:	bf 93       	push	r27
    1dd4:	ef 93       	push	r30
    1dd6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1dd8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ddc:	82 ff       	sbrs	r24, 2
    1dde:	0b c0       	rjmp	.+22     	; 0x1df6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1de0:	80 91 e2 00 	lds	r24, 0x00E2
    1de4:	82 ff       	sbrs	r24, 2
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1de8:	80 91 e1 00 	lds	r24, 0x00E1
    1dec:	8b 7f       	andi	r24, 0xFB	; 251
    1dee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1df2:	0e 94 c3 03 	call	0x786	; 0x786 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1df6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1dfa:	80 ff       	sbrs	r24, 0
    1dfc:	1f c0       	rjmp	.+62     	; 0x1e3c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1dfe:	80 91 d8 00 	lds	r24, 0x00D8
    1e02:	80 ff       	sbrs	r24, 0
    1e04:	1b c0       	rjmp	.+54     	; 0x1e3c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1e06:	80 91 da 00 	lds	r24, 0x00DA
    1e0a:	8e 7f       	andi	r24, 0xFE	; 254
    1e0c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e10:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	0d c0       	rjmp	.+26     	; 0x1e32 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e18:	80 e1       	ldi	r24, 0x10	; 16
    1e1a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e1c:	82 e1       	ldi	r24, 0x12	; 18
    1e1e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e20:	09 b4       	in	r0, 0x29	; 41
    1e22:	00 fe       	sbrs	r0, 0
    1e24:	fd cf       	rjmp	.-6      	; 0x1e20 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	80 93 51 06 	sts	0x0651, r24
			EVENT_USB_Device_Connect();
    1e2c:	0e 94 ac 03 	call	0x758	; 0x758 <EVENT_USB_Device_Connect>
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e32:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1e34:	10 92 51 06 	sts	0x0651, r1
			EVENT_USB_Device_Disconnect();
    1e38:	0e 94 ae 03 	call	0x75c	; 0x75c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1e3c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e40:	80 ff       	sbrs	r24, 0
    1e42:	18 c0       	rjmp	.+48     	; 0x1e74 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1e44:	80 91 e2 00 	lds	r24, 0x00E2
    1e48:	80 ff       	sbrs	r24, 0
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e4c:	80 91 e2 00 	lds	r24, 0x00E2
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e56:	80 91 e2 00 	lds	r24, 0x00E2
    1e5a:	80 61       	ori	r24, 0x10	; 16
    1e5c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1e60:	80 91 d8 00 	lds	r24, 0x00D8
    1e64:	80 62       	ori	r24, 0x20	; 32
    1e66:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e6a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e6c:	85 e0       	ldi	r24, 0x05	; 5
    1e6e:	80 93 51 06 	sts	0x0651, r24
		EVENT_USB_Device_Suspend();
    1e72:	d3 d1       	rcall	.+934    	; 0x221a <USB_Event_Stub>
    1e74:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1e78:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e7a:	2f c0       	rjmp	.+94     	; 0x1eda <__vector_10+0x124>
    1e7c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1e80:	84 ff       	sbrs	r24, 4
    1e82:	2b c0       	rjmp	.+86     	; 0x1eda <__vector_10+0x124>
    1e84:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e86:	89 bd       	out	0x29, r24	; 41
    1e88:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e8a:	89 bd       	out	0x29, r24	; 41
    1e8c:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e8e:	00 fe       	sbrs	r0, 0
    1e90:	fd cf       	rjmp	.-6      	; 0x1e8c <__vector_10+0xd6>
    1e92:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e96:	8f 7d       	andi	r24, 0xDF	; 223
    1e98:	80 93 d8 00 	sts	0x00D8, r24
    1e9c:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1ea0:	8f 7e       	andi	r24, 0xEF	; 239
    1ea2:	80 93 e1 00 	sts	0x00E1, r24
    1ea6:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1eaa:	8f 7e       	andi	r24, 0xEF	; 239
    1eac:	80 93 e2 00 	sts	0x00E2, r24
    1eb0:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	80 93 e2 00 	sts	0x00E2, r24
    1eba:	80 91 4d 06 	lds	r24, 0x064D
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ebe:	88 23       	and	r24, r24
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <__vector_10+0x110>
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    1ec4:	07 c0       	rjmp	.+14     	; 0x1ed4 <__vector_10+0x11e>
    1ec6:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1eca:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <__vector_10+0x11c>
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <__vector_10+0x11e>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 93 51 06 	sts	0x0651, r24
    1ed8:	a0 d1       	rcall	.+832    	; 0x221a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1eda:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ede:	83 ff       	sbrs	r24, 3
    1ee0:	22 c0       	rjmp	.+68     	; 0x1f26 <__vector_10+0x170>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ee2:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1ee6:	83 ff       	sbrs	r24, 3
    1ee8:	1e c0       	rjmp	.+60     	; 0x1f26 <__vector_10+0x170>
    1eea:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1eee:	87 7f       	andi	r24, 0xF7	; 247
    1ef0:	80 93 e1 00 	sts	0x00E1, r24
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	80 93 51 06 	sts	0x0651, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1efa:	10 92 4d 06 	sts	0x064D, r1
		USB_Device_ConfigurationNumber = 0;
    1efe:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f02:	8e 7f       	andi	r24, 0xFE	; 254
    1f04:	80 93 e1 00 	sts	0x00E1, r24
    1f08:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f0c:	8e 7f       	andi	r24, 0xFE	; 254
    1f0e:	80 93 e2 00 	sts	0x00E2, r24
    1f12:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f16:	80 61       	ori	r24, 0x10	; 16
    1f18:	80 93 e2 00 	sts	0x00E2, r24
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f20:	42 e0       	ldi	r20, 0x02	; 2
    1f22:	27 de       	rcall	.-946    	; 0x1b72 <Endpoint_ConfigureEndpoint_Prv>
    1f24:	7a d1       	rcall	.+756    	; 0x221a <USB_Event_Stub>
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	7f 91       	pop	r23
    1f34:	6f 91       	pop	r22
    1f36:	5f 91       	pop	r21
    1f38:	4f 91       	pop	r20
    1f3a:	3f 91       	pop	r19
    1f3c:	2f 91       	pop	r18
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	ac 97       	sbiw	r28, 0x2c	; 44
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1f60:	e2 e5       	ldi	r30, 0x52	; 82
    1f62:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f64:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1f68:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	88 30       	cpi	r24, 0x08	; 8
    1f6e:	d1 f7       	brne	.-12     	; 0x1f64 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1f70:	0e 94 bf 03 	call	0x77e	; 0x77e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f74:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1f78:	83 ff       	sbrs	r24, 3
    1f7a:	37 c1       	rjmp	.+622    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1f7c:	80 91 52 06 	lds	r24, 0x0652

		switch (USB_ControlRequest.bRequest)
    1f80:	20 91 53 06 	lds	r18, 0x0653
    1f84:	25 30       	cpi	r18, 0x05	; 5
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <USB_Device_ProcessControlRequest+0x42>
    1f88:	84 c0       	rjmp	.+264    	; 0x2092 <USB_Device_ProcessControlRequest+0x14a>
    1f8a:	26 30       	cpi	r18, 0x06	; 6
    1f8c:	40 f4       	brcc	.+16     	; 0x1f9e <USB_Device_ProcessControlRequest+0x56>
    1f8e:	21 30       	cpi	r18, 0x01	; 1
    1f90:	a1 f1       	breq	.+104    	; 0x1ffa <USB_Device_ProcessControlRequest+0xb2>
    1f92:	21 30       	cpi	r18, 0x01	; 1
    1f94:	70 f0       	brcs	.+28     	; 0x1fb2 <USB_Device_ProcessControlRequest+0x6a>
    1f96:	23 30       	cpi	r18, 0x03	; 3
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <USB_Device_ProcessControlRequest+0x54>
    1f9a:	27 c1       	rjmp	.+590    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    1f9c:	2e c0       	rjmp	.+92     	; 0x1ffa <USB_Device_ProcessControlRequest+0xb2>
    1f9e:	28 30       	cpi	r18, 0x08	; 8
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <USB_Device_ProcessControlRequest+0x5c>
    1fa2:	f4 c0       	rjmp	.+488    	; 0x218c <USB_Device_ProcessControlRequest+0x244>
    1fa4:	29 30       	cpi	r18, 0x09	; 9
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <USB_Device_ProcessControlRequest+0x62>
    1fa8:	03 c1       	rjmp	.+518    	; 0x21b0 <USB_Device_ProcessControlRequest+0x268>
    1faa:	26 30       	cpi	r18, 0x06	; 6
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <USB_Device_ProcessControlRequest+0x68>
    1fae:	1d c1       	rjmp	.+570    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    1fb0:	93 c0       	rjmp	.+294    	; 0x20d8 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fb2:	80 38       	cpi	r24, 0x80	; 128
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <USB_Device_ProcessControlRequest+0x76>
    1fb6:	82 38       	cpi	r24, 0x82	; 130
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0x74>
    1fba:	17 c1       	rjmp	.+558    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1fbe:	80 91 4e 06 	lds	r24, 0x064E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1fc2:	90 91 4f 06 	lds	r25, 0x064F
    1fc6:	99 23       	and	r25, r25
    1fc8:	71 f0       	breq	.+28     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1fca:	82 60       	ori	r24, 0x02	; 2
    1fcc:	0c c0       	rjmp	.+24     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1fce:	80 91 56 06 	lds	r24, 0x0656
    1fd2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fd8:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	95 ff       	sbrs	r25, 5
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fe6:	90 91 e8 00 	lds	r25, 0x00E8
    1fea:	97 7f       	andi	r25, 0xF7	; 247
    1fec:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ff0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1ff4:	10 92 f1 00 	sts	0x00F1, r1
    1ff8:	d4 c0       	rjmp	.+424    	; 0x21a2 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ffa:	88 23       	and	r24, r24
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <USB_Device_ProcessControlRequest+0xbc>
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	09 f0       	breq	.+2      	; 0x2004 <USB_Device_ProcessControlRequest+0xbc>
    2002:	f3 c0       	rjmp	.+486    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	8f 71       	andi	r24, 0x1F	; 31
    2008:	90 70       	andi	r25, 0x00	; 0
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	29 f0       	breq	.+10     	; 0x2018 <USB_Device_ProcessControlRequest+0xd0>
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	91 05       	cpc	r25, r1
    2012:	09 f0       	breq	.+2      	; 0x2016 <USB_Device_ProcessControlRequest+0xce>
    2014:	ea c0       	rjmp	.+468    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    2016:	0b c0       	rjmp	.+22     	; 0x202e <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2018:	80 91 54 06 	lds	r24, 0x0654
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	09 f0       	breq	.+2      	; 0x2022 <USB_Device_ProcessControlRequest+0xda>
    2020:	e4 c0       	rjmp	.+456    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2022:	23 30       	cpi	r18, 0x03	; 3
    2024:	09 f0       	breq	.+2      	; 0x2028 <USB_Device_ProcessControlRequest+0xe0>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	80 93 4f 06 	sts	0x064F, r24
    202c:	2c c0       	rjmp	.+88     	; 0x2086 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    202e:	80 91 54 06 	lds	r24, 0x0654
    2032:	88 23       	and	r24, r24
    2034:	41 f5       	brne	.+80     	; 0x2086 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2036:	20 91 56 06 	lds	r18, 0x0656
    203a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    203c:	09 f4       	brne	.+2      	; 0x2040 <USB_Device_ProcessControlRequest+0xf8>
    203e:	d5 c0       	rjmp	.+426    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2040:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2044:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2048:	80 ff       	sbrs	r24, 0
    204a:	1d c0       	rjmp	.+58     	; 0x2086 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    204c:	80 91 53 06 	lds	r24, 0x0653
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	21 f4       	brne	.+8      	; 0x205c <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2054:	80 91 eb 00 	lds	r24, 0x00EB
    2058:	80 62       	ori	r24, 0x20	; 32
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    205c:	80 91 eb 00 	lds	r24, 0x00EB
    2060:	80 61       	ori	r24, 0x10	; 16
    2062:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <USB_Device_ProcessControlRequest+0x128>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	2a 95       	dec	r18
    2072:	e2 f7       	brpl	.-8      	; 0x206c <USB_Device_ProcessControlRequest+0x124>
    2074:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2078:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    207c:	80 91 eb 00 	lds	r24, 0x00EB
    2080:	88 60       	ori	r24, 0x08	; 8
    2082:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2086:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    208a:	80 91 e8 00 	lds	r24, 0x00E8
    208e:	87 7f       	andi	r24, 0xF7	; 247
    2090:	8b c0       	rjmp	.+278    	; 0x21a8 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2092:	88 23       	and	r24, r24
    2094:	09 f0       	breq	.+2      	; 0x2098 <USB_Device_ProcessControlRequest+0x150>
    2096:	a9 c0       	rjmp	.+338    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2098:	10 91 54 06 	lds	r17, 0x0654
    209c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    209e:	80 91 e3 00 	lds	r24, 0x00E3
    20a2:	80 78       	andi	r24, 0x80	; 128
    20a4:	81 2b       	or	r24, r17
    20a6:	80 93 e3 00 	sts	0x00E3, r24
    20aa:	80 91 e8 00 	lds	r24, 0x00E8
    20ae:	87 7f       	andi	r24, 0xF7	; 247
    20b0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20b4:	cf dd       	rcall	.-1122   	; 0x1c54 <Endpoint_ClearStatusStage>
    20b6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20ba:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    20bc:	fc cf       	rjmp	.-8      	; 0x20b6 <USB_Device_ProcessControlRequest+0x16e>
    20be:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    20c2:	80 68       	ori	r24, 0x80	; 128
    20c4:	80 93 e3 00 	sts	0x00E3, r24
    20c8:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    20ca:	11 f0       	breq	.+4      	; 0x20d0 <USB_Device_ProcessControlRequest+0x188>
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <USB_Device_ProcessControlRequest+0x18a>
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	80 93 51 06 	sts	0x0651, r24
    20d6:	89 c0       	rjmp	.+274    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    20d8:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	08 f0       	brcs	.+2      	; 0x20e0 <USB_Device_ProcessControlRequest+0x198>
    20de:	85 c0       	rjmp	.+266    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    20e0:	80 91 54 06 	lds	r24, 0x0654
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    20e4:	90 91 55 06 	lds	r25, 0x0655
    20e8:	23 e0       	ldi	r18, 0x03	; 3
    20ea:	8c 3d       	cpi	r24, 0xDC	; 220
    20ec:	92 07       	cpc	r25, r18
    20ee:	a9 f5       	brne	.+106    	; 0x215a <USB_Device_ProcessControlRequest+0x212>
    20f0:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    20fa:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    20fc:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    20fe:	13 96       	adiw	r26, 0x03	; 3
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2106:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2108:	e4 2f       	mov	r30, r20
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	60 93 57 00 	sts	0x0057, r22
    2110:	e4 91       	lpm	r30, Z
    2112:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    2114:	03 c0       	rjmp	.+6      	; 0x211c <USB_Device_ProcessControlRequest+0x1d4>
    2116:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    2118:	ef 70       	andi	r30, 0x0F	; 15
    211a:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    211c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    211e:	2e 2f       	mov	r18, r30
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2124:	18 f0       	brcs	.+6      	; 0x212c <USB_Device_ProcessControlRequest+0x1e4>
    2126:	29 5c       	subi	r18, 0xC9	; 201
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <USB_Device_ProcessControlRequest+0x1e8>
    212c:	20 5d       	subi	r18, 0xD0	; 208
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	13 96       	adiw	r26, 0x03	; 3
    2132:	3c 93       	st	X, r19
    2134:	2e 93       	st	-X, r18
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	12 96       	adiw	r26, 0x02	; 2
    213c:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    213e:	91 05       	cpc	r25, r1
    2140:	19 f7       	brne	.-58     	; 0x2108 <USB_Device_ProcessControlRequest+0x1c0>
    2142:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2144:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2148:	87 7f       	andi	r24, 0xF7	; 247
    214a:	80 93 e8 00 	sts	0x00E8, r24
    214e:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2150:	03 96       	adiw	r24, 0x03	; 3
    2152:	6a e2       	ldi	r22, 0x2A	; 42
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	f2 db       	rcall	.-2076   	; 0x193c <Endpoint_Write_Control_Stream_LE>
    2158:	13 c0       	rjmp	.+38     	; 0x2180 <USB_Device_ProcessControlRequest+0x238>
    215a:	60 91 56 06 	lds	r22, 0x0656
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    215e:	ae 01       	movw	r20, r28
    2160:	4f 5f       	subi	r20, 0xFF	; 255
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
    2164:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <CALLBACK_USB_GetDescriptor>
    2168:	bc 01       	movw	r22, r24
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	09 f4       	brne	.+2      	; 0x2170 <USB_Device_ProcessControlRequest+0x228>
    216e:	3d c0       	rjmp	.+122    	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    2170:	80 91 e8 00 	lds	r24, 0x00E8
    2174:	87 7f       	andi	r24, 0xF7	; 247
    2176:	80 93 e8 00 	sts	0x00E8, r24
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    217e:	92 dc       	rcall	.-1756   	; 0x1aa4 <Endpoint_Write_Control_PStream_LE>
    2180:	80 91 e8 00 	lds	r24, 0x00E8
    2184:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2186:	80 93 e8 00 	sts	0x00E8, r24
    218a:	2f c0       	rjmp	.+94     	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    218c:	80 38       	cpi	r24, 0x80	; 128
    218e:	69 f5       	brne	.+90     	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    2190:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2194:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2196:	80 93 e8 00 	sts	0x00E8, r24
    219a:	80 91 4d 06 	lds	r24, 0x064D
    219e:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    21a2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21a6:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21a8:	80 93 e8 00 	sts	0x00E8, r24
    21ac:	53 dd       	rcall	.-1370   	; 0x1c54 <Endpoint_ClearStatusStage>
    21ae:	1d c0       	rjmp	.+58     	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    21b0:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    21b2:	d9 f4       	brne	.+54     	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
    21b4:	90 91 54 06 	lds	r25, 0x0654
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    21b8:	92 30       	cpi	r25, 0x02	; 2
    21ba:	b8 f4       	brcc	.+46     	; 0x21ea <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21bc:	80 91 e8 00 	lds	r24, 0x00E8
    21c0:	87 7f       	andi	r24, 0xF7	; 247
    21c2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21c6:	90 93 4d 06 	sts	0x064D, r25
    21ca:	44 dd       	rcall	.-1400   	; 0x1c54 <Endpoint_ClearStatusStage>
    21cc:	80 91 4d 06 	lds	r24, 0x064D
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21d0:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    21d2:	21 f4       	brne	.+8      	; 0x21dc <USB_Device_ProcessControlRequest+0x294>
    21d4:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    21d8:	87 ff       	sbrs	r24, 7
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <USB_Device_ProcessControlRequest+0x298>
    21dc:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <USB_Device_ProcessControlRequest+0x29a>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    21e2:	80 93 51 06 	sts	0x0651, r24
    21e6:	0e 94 b0 03 	call	0x760	; 0x760 <EVENT_USB_Device_ConfigurationChanged>
    21ea:	80 91 e8 00 	lds	r24, 0x00E8
    21ee:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    21f0:	0a c0       	rjmp	.+20     	; 0x2206 <USB_Device_ProcessControlRequest+0x2be>
    21f2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21f6:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    21f8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21fc:	80 91 eb 00 	lds	r24, 0x00EB
    2200:	80 62       	ori	r24, 0x20	; 32
    2202:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2206:	ac 96       	adiw	r28, 0x2c	; 44
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	08 95       	ret

0000221a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    221a:	08 95       	ret

0000221c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    221c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    221e:	80 91 51 06 	lds	r24, 0x0651
    2222:	88 23       	and	r24, r24
    2224:	a9 f0       	breq	.+42     	; 0x2250 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2226:	80 91 e9 00 	lds	r24, 0x00E9
    222a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    222c:	90 91 ec 00 	lds	r25, 0x00EC
    2230:	90 ff       	sbrs	r25, 0
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <USB_USBTask+0x1c>
    2234:	c0 e8       	ldi	r28, 0x80	; 128
    2236:	01 c0       	rjmp	.+2      	; 0x223a <USB_USBTask+0x1e>
    2238:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    223a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    223c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2240:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2244:	83 ff       	sbrs	r24, 3
    2246:	01 c0       	rjmp	.+2      	; 0x224a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    2248:	7f de       	rcall	.-770    	; 0x1f48 <USB_Device_ProcessControlRequest>
    224a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    224c:	c0 93 e9 00 	sts	0x00E9, r28
    2250:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2252:	08 95       	ret

00002254 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2254:	6f 92       	push	r6
    2256:	7f 92       	push	r7
    2258:	8f 92       	push	r8
    225a:	9f 92       	push	r9
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	00 d0       	rcall	.+0      	; 0x2272 <HID_Device_ProcessControlRequest+0x1e>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    227a:	6d b6       	in	r6, 0x3d	; 61
    227c:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    227e:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    2282:	83 ff       	sbrs	r24, 3
    2284:	0a c1       	rjmp	.+532    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    2286:	f7 01       	movw	r30, r14
    2288:	80 81       	ld	r24, Z
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	20 91 56 06 	lds	r18, 0x0656
    2290:	30 91 57 06 	lds	r19, 0x0657
    2294:	28 17       	cp	r18, r24
    2296:	39 07       	cpc	r19, r25
    2298:	09 f0       	breq	.+2      	; 0x229c <HID_Device_ProcessControlRequest+0x48>
    229a:	ff c0       	rjmp	.+510    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
    229c:	80 91 53 06 	lds	r24, 0x0653
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <HID_Device_ProcessControlRequest+0x52>
    22a4:	a1 c0       	rjmp	.+322    	; 0x23e8 <HID_Device_ProcessControlRequest+0x194>
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	30 f4       	brcc	.+12     	; 0x22b6 <HID_Device_ProcessControlRequest+0x62>
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	71 f0       	breq	.+28     	; 0x22ca <HID_Device_ProcessControlRequest+0x76>
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <HID_Device_ProcessControlRequest+0x60>
    22b2:	f3 c0       	rjmp	.+486    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    22b4:	d6 c0       	rjmp	.+428    	; 0x2462 <HID_Device_ProcessControlRequest+0x20e>
    22b6:	8a 30       	cpi	r24, 0x0A	; 10
    22b8:	09 f4       	brne	.+2      	; 0x22bc <HID_Device_ProcessControlRequest+0x68>
    22ba:	bb c0       	rjmp	.+374    	; 0x2432 <HID_Device_ProcessControlRequest+0x1de>
    22bc:	8b 30       	cpi	r24, 0x0B	; 11
    22be:	09 f4       	brne	.+2      	; 0x22c2 <HID_Device_ProcessControlRequest+0x6e>
    22c0:	a4 c0       	rjmp	.+328    	; 0x240a <HID_Device_ProcessControlRequest+0x1b6>
    22c2:	89 30       	cpi	r24, 0x09	; 9
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <HID_Device_ProcessControlRequest+0x74>
    22c6:	e9 c0       	rjmp	.+466    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    22c8:	51 c0       	rjmp	.+162    	; 0x236c <HID_Device_ProcessControlRequest+0x118>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    22ca:	80 91 52 06 	lds	r24, 0x0652
    22ce:	81 3a       	cpi	r24, 0xA1	; 161
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <HID_Device_ProcessControlRequest+0x80>
    22d2:	e3 c0       	rjmp	.+454    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    22d4:	9d b6       	in	r9, 0x3d	; 61
    22d6:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    22d8:	1b 82       	std	Y+3, r1	; 0x03
    22da:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    22dc:	80 91 54 06 	lds	r24, 0x0654
    22e0:	00 91 55 06 	lds	r16, 0x0655
    22e4:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    22e6:	f7 01       	movw	r30, r14
    22e8:	40 85       	ldd	r20, Z+8	; 0x08
    22ea:	8d b7       	in	r24, 0x3d	; 61
    22ec:	9e b7       	in	r25, 0x3e	; 62
    22ee:	84 1b       	sub	r24, r20
    22f0:	91 09       	sbc	r25, r1
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	9e bf       	out	0x3e, r25	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	8d bf       	out	0x3d, r24	; 61
    22fc:	cd b6       	in	r12, 0x3d	; 61
    22fe:	de b6       	in	r13, 0x3e	; 62
    2300:	08 94       	sec
    2302:	c1 1c       	adc	r12, r1
    2304:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    2306:	bc 2c       	mov	r11, r12
    2308:	ad 2c       	mov	r10, r13
    230a:	c6 01       	movw	r24, r12
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	31 d3       	rcall	.+1634   	; 0x2976 <memset>
    2314:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2316:	41 50       	subi	r20, 0x01	; 1
    2318:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    231a:	be 01       	movw	r22, r28
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	96 01       	movw	r18, r12
    2322:	8e 01       	movw	r16, r28
    2324:	0e 5f       	subi	r16, 0xFE	; 254
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	0e 94 cf 03 	call	0x79e	; 0x79e <CALLBACK_HID_Device_CreateHIDReport>
    232c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    232e:	86 81       	ldd	r24, Z+6	; 0x06
    2330:	97 81       	ldd	r25, Z+7	; 0x07
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	21 f0       	breq	.+8      	; 0x233e <HID_Device_ProcessControlRequest+0xea>
    2336:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    2338:	b6 01       	movw	r22, r12
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	13 d3       	rcall	.+1574   	; 0x2964 <memcpy>
    233e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2342:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2346:	87 7f       	andi	r24, 0xF7	; 247
    2348:	80 93 e8 00 	sts	0x00E8, r24
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	88 23       	and	r24, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    2350:	11 f0       	breq	.+4      	; 0x2356 <HID_Device_ProcessControlRequest+0x102>
    2352:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2356:	6a 81       	ldd	r22, Y+2	; 0x02
    2358:	7b 81       	ldd	r23, Y+3	; 0x03
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    235a:	8b 2d       	mov	r24, r11
    235c:	9a 2d       	mov	r25, r10
    235e:	ee da       	rcall	.-2596   	; 0x193c <Endpoint_Write_Control_Stream_LE>
    2360:	80 91 e8 00 	lds	r24, 0x00E8
    2364:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2366:	80 93 e8 00 	sts	0x00E8, r24
    236a:	3b c0       	rjmp	.+118    	; 0x23e2 <HID_Device_ProcessControlRequest+0x18e>
    236c:	80 91 52 06 	lds	r24, 0x0652
    2370:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2372:	09 f0       	breq	.+2      	; 0x2376 <HID_Device_ProcessControlRequest+0x122>
    2374:	92 c0       	rjmp	.+292    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    2376:	9d b6       	in	r9, 0x3d	; 61
    2378:	8e b6       	in	r8, 0x3e	; 62
    237a:	00 91 58 06 	lds	r16, 0x0658
    237e:	10 91 59 06 	lds	r17, 0x0659
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    2382:	c0 90 54 06 	lds	r12, 0x0654
    2386:	d0 90 55 06 	lds	r13, 0x0655
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    238a:	8d b7       	in	r24, 0x3d	; 61
    238c:	9e b7       	in	r25, 0x3e	; 62
    238e:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2390:	91 0b       	sbc	r25, r17
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	9e bf       	out	0x3e, r25	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	8d bf       	out	0x3d, r24	; 61
    239c:	ad b6       	in	r10, 0x3d	; 61
    239e:	be b6       	in	r11, 0x3e	; 62
    23a0:	08 94       	sec
    23a2:	a1 1c       	adc	r10, r1
    23a4:	b1 1c       	adc	r11, r1
    23a6:	80 91 e8 00 	lds	r24, 0x00E8
    23aa:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23ac:	80 93 e8 00 	sts	0x00E8, r24
    23b0:	c5 01       	movw	r24, r10
    23b2:	b8 01       	movw	r22, r16
    23b4:	29 db       	rcall	.-2478   	; 0x1a08 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    23b6:	80 91 e8 00 	lds	r24, 0x00E8
    23ba:	8e 77       	andi	r24, 0x7E	; 126
    23bc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	cc 20       	and	r12, r12
    23c6:	11 f4       	brne	.+4      	; 0x23cc <HID_Device_ProcessControlRequest+0x178>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	4d 2d       	mov	r20, r13
    23ce:	41 50       	subi	r20, 0x01	; 1
    23d0:	95 01       	movw	r18, r10
    23d2:	28 0f       	add	r18, r24
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    23d4:	39 1f       	adc	r19, r25
    23d6:	08 1b       	sub	r16, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    23d8:	19 0b       	sbc	r17, r25
    23da:	c7 01       	movw	r24, r14
    23dc:	6c 2d       	mov	r22, r12
    23de:	0e 94 b6 07 	call	0xf6c	; 0xf6c <CALLBACK_HID_Device_ProcessHIDReport>
    23e2:	9d be       	out	0x3d, r9	; 61
    23e4:	8e be       	out	0x3e, r8	; 62
    23e6:	59 c0       	rjmp	.+178    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    23e8:	80 91 52 06 	lds	r24, 0x0652
    23ec:	81 3a       	cpi	r24, 0xA1	; 161
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <HID_Device_ProcessControlRequest+0x19e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    23f0:	54 c0       	rjmp	.+168    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    23f2:	80 91 e8 00 	lds	r24, 0x00E8
    23f6:	87 7f       	andi	r24, 0xF7	; 247
    23f8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23fc:	80 91 e8 00 	lds	r24, 0x00E8
    2400:	80 ff       	sbrs	r24, 0
    2402:	fc cf       	rjmp	.-8      	; 0x23fc <HID_Device_ProcessControlRequest+0x1a8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2404:	f7 01       	movw	r30, r14
    2406:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2408:	40 c0       	rjmp	.+128    	; 0x248a <HID_Device_ProcessControlRequest+0x236>
    240a:	80 91 52 06 	lds	r24, 0x0652
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    240e:	81 32       	cpi	r24, 0x21	; 33
    2410:	09 f0       	breq	.+2      	; 0x2414 <HID_Device_ProcessControlRequest+0x1c0>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2412:	43 c0       	rjmp	.+134    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    2414:	80 91 e8 00 	lds	r24, 0x00E8
    2418:	87 7f       	andi	r24, 0xF7	; 247
    241a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    241e:	1a dc       	rcall	.-1996   	; 0x1c54 <Endpoint_ClearStatusStage>
    2420:	90 91 54 06 	lds	r25, 0x0654
    2424:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2426:	99 23       	and	r25, r25
    2428:	09 f4       	brne	.+2      	; 0x242c <HID_Device_ProcessControlRequest+0x1d8>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	f7 01       	movw	r30, r14
    242e:	81 87       	std	Z+9, r24	; 0x09
    2430:	34 c0       	rjmp	.+104    	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    2432:	80 91 52 06 	lds	r24, 0x0652
    2436:	81 32       	cpi	r24, 0x21	; 33
    2438:	81 f5       	brne	.+96     	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    243a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    243e:	87 7f       	andi	r24, 0xF7	; 247
    2440:	80 93 e8 00 	sts	0x00E8, r24
    2444:	07 dc       	rcall	.-2034   	; 0x1c54 <Endpoint_ClearStatusStage>
    2446:	80 91 54 06 	lds	r24, 0x0654
    244a:	90 91 55 06 	lds	r25, 0x0655
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    244e:	80 70       	andi	r24, 0x00	; 0
    2450:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2452:	96 95       	lsr	r25
    2454:	87 95       	ror	r24
    2456:	3a 95       	dec	r19
    2458:	e1 f7       	brne	.-8      	; 0x2452 <HID_Device_ProcessControlRequest+0x1fe>
    245a:	f7 01       	movw	r30, r14
    245c:	95 87       	std	Z+13, r25	; 0x0d
    245e:	84 87       	std	Z+12, r24	; 0x0c
    2460:	1c c0       	rjmp	.+56     	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    2462:	80 91 52 06 	lds	r24, 0x0652
    2466:	81 3a       	cpi	r24, 0xA1	; 161
    2468:	c1 f4       	brne	.+48     	; 0x249a <HID_Device_ProcessControlRequest+0x246>
    246a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    246e:	87 7f       	andi	r24, 0xF7	; 247
    2470:	80 93 e8 00 	sts	0x00E8, r24
    2474:	80 91 e8 00 	lds	r24, 0x00E8
    2478:	80 ff       	sbrs	r24, 0
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <HID_Device_ProcessControlRequest+0x220>
    247c:	f7 01       	movw	r30, r14
    247e:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2480:	95 85       	ldd	r25, Z+13	; 0x0d
    2482:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2484:	87 95       	ror	r24
    2486:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2488:	87 95       	ror	r24
    248a:	80 93 f1 00 	sts	0x00F1, r24
    248e:	80 91 e8 00 	lds	r24, 0x00E8
    2492:	8e 77       	andi	r24, 0x7E	; 126
    2494:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2498:	dd db       	rcall	.-2118   	; 0x1c54 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	7e be       	out	0x3e, r7	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	6d be       	out	0x3d, r6	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
			}

			break;
	}
}
    24a8:	0f 90       	pop	r0
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	cf 90       	pop	r12
    24ba:	bf 90       	pop	r11
    24bc:	af 90       	pop	r10
    24be:	9f 90       	pop	r9
    24c0:	8f 90       	pop	r8
    24c2:	7f 90       	pop	r7
    24c4:	6f 90       	pop	r6
    24c6:	08 95       	ret

000024c8 <HID_Device_ConfigureEndpoints>:
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	fc 01       	movw	r30, r24
    24ce:	09 96       	adiw	r24, 0x09	; 9
    24d0:	dc 01       	movw	r26, r24
    24d2:	87 e0       	ldi	r24, 0x07	; 7
    24d4:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    24d6:	19 92       	st	Y+, r1
    24d8:	8a 95       	dec	r24
    24da:	e9 f7       	brne	.-6      	; 0x24d6 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    24e0:	84 ef       	ldi	r24, 0xF4	; 244
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	95 87       	std	Z+13, r25	; 0x0d
    24e6:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    24ec:	cf 01       	movw	r24, r30
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	74 db       	rcall	.-2328   	; 0x1bdc <Endpoint_ConfigureEndpointTable>
    24f4:	df 91       	pop	r29
	  return false;

	return true;
}
    24f6:	cf 91       	pop	r28
    24f8:	08 95       	ret

000024fa <HID_Device_USBTask>:
    24fa:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    24fc:	5f 92       	push	r5
    24fe:	6f 92       	push	r6
    2500:	7f 92       	push	r7
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	00 d0       	rcall	.+0      	; 0x251c <HID_Device_USBTask+0x22>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2524:	4d b6       	in	r4, 0x3d	; 61
    2526:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2528:	80 91 51 06 	lds	r24, 0x0651
    252c:	84 30       	cpi	r24, 0x04	; 4
    252e:	09 f0       	breq	.+2      	; 0x2532 <HID_Device_USBTask+0x38>
    2530:	92 c0       	rjmp	.+292    	; 0x2656 <HID_Device_USBTask+0x15c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2532:	80 91 e4 00 	lds	r24, 0x00E4
    2536:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    253a:	f7 01       	movw	r30, r14
    253c:	22 85       	ldd	r18, Z+10	; 0x0a
    253e:	33 85       	ldd	r19, Z+11	; 0x0b
    2540:	28 17       	cp	r18, r24
    2542:	39 07       	cpc	r19, r25
    2544:	09 f4       	brne	.+2      	; 0x2548 <HID_Device_USBTask+0x4e>
    2546:	87 c0       	rjmp	.+270    	; 0x2656 <HID_Device_USBTask+0x15c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2548:	81 81       	ldd	r24, Z+1	; 0x01
    254a:	8f 70       	andi	r24, 0x0F	; 15
    254c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2550:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    2554:	85 ff       	sbrs	r24, 5
    2556:	7f c0       	rjmp	.+254    	; 0x2656 <HID_Device_USBTask+0x15c>
    2558:	7d b6       	in	r7, 0x3d	; 61
    255a:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    255c:	40 85       	ldd	r20, Z+8	; 0x08
    255e:	8d b7       	in	r24, 0x3d	; 61
    2560:	9e b7       	in	r25, 0x3e	; 62
    2562:	84 1b       	sub	r24, r20
    2564:	91 09       	sbc	r25, r1
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	9e bf       	out	0x3e, r25	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	8d bf       	out	0x3d, r24	; 61
    2570:	0d b7       	in	r16, 0x3d	; 61
    2572:	1e b7       	in	r17, 0x3e	; 62
    2574:	0f 5f       	subi	r16, 0xFF	; 255
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    2578:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    257a:	1b 82       	std	Y+3, r1	; 0x03
    257c:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    257e:	b0 2e       	mov	r11, r16
    2580:	a1 2e       	mov	r10, r17
    2582:	c8 01       	movw	r24, r16
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	f5 d1       	rcall	.+1002   	; 0x2976 <memset>
    258c:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    258e:	be 01       	movw	r22, r28
    2590:	6f 5f       	subi	r22, 0xFF	; 255
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	98 01       	movw	r18, r16
    2598:	8e 01       	movw	r16, r28
    259a:	0e 5f       	subi	r16, 0xFE	; 254
    259c:	1f 4f       	sbci	r17, 0xFF	; 255
    259e:	0e 94 cf 03 	call	0x79e	; 0x79e <CALLBACK_HID_Device_CreateHIDReport>
    25a2:	18 2f       	mov	r17, r24
    25a4:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    25a6:	84 85       	ldd	r24, Z+12	; 0x0c
    25a8:	95 85       	ldd	r25, Z+13	; 0x0d
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	59 f0       	breq	.+22     	; 0x25c4 <HID_Device_USBTask+0xca>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	26 85       	ldd	r18, Z+14	; 0x0e
    25b4:	37 85       	ldd	r19, Z+15	; 0x0f
    25b6:	21 15       	cp	r18, r1
    25b8:	31 05       	cpc	r19, r1
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <HID_Device_USBTask+0xc6>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <HID_Device_USBTask+0xce>
    25c4:	88 24       	eor	r8, r8
    25c6:	99 24       	eor	r9, r9
    25c8:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    25ca:	c6 80       	ldd	r12, Z+6	; 0x06
    25cc:	d7 80       	ldd	r13, Z+7	; 0x07
    25ce:	c1 14       	cp	r12, r1
    25d0:	d1 04       	cpc	r13, r1
    25d2:	91 f0       	breq	.+36     	; 0x25f8 <HID_Device_USBTask+0xfe>
    25d4:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    25d6:	5b 81       	ldd	r21, Y+3	; 0x03
    25d8:	8b 2d       	mov	r24, r11
    25da:	9a 2d       	mov	r25, r10
    25dc:	b6 01       	movw	r22, r12
    25de:	b5 d1       	rcall	.+874    	; 0x294a <memcmp>
    25e0:	01 e0       	ldi	r16, 0x01	; 1
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <HID_Device_USBTask+0xee>
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	f7 01       	movw	r30, r14
    25ea:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    25ec:	c6 01       	movw	r24, r12
    25ee:	6b 2d       	mov	r22, r11
    25f0:	7a 2d       	mov	r23, r10
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	b7 d1       	rcall	.+878    	; 0x2964 <memcpy>
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <HID_Device_USBTask+0x100>
    25f8:	00 e0       	ldi	r16, 0x00	; 0
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    25fe:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2600:	09 f1       	breq	.+66     	; 0x2644 <HID_Device_USBTask+0x14a>
    2602:	11 23       	and	r17, r17
    2604:	29 f4       	brne	.+10     	; 0x2610 <HID_Device_USBTask+0x116>
    2606:	00 23       	and	r16, r16
    2608:	19 f4       	brne	.+6      	; 0x2610 <HID_Device_USBTask+0x116>
    260a:	81 14       	cp	r8, r1
    260c:	91 04       	cpc	r9, r1
    260e:	d1 f0       	breq	.+52     	; 0x2644 <HID_Device_USBTask+0x14a>
    2610:	f7 01       	movw	r30, r14
    2612:	84 85       	ldd	r24, Z+12	; 0x0c
    2614:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2616:	97 87       	std	Z+15, r25	; 0x0f
    2618:	86 87       	std	Z+14, r24	; 0x0e
    261a:	81 81       	ldd	r24, Z+1	; 0x01
    261c:	8f 70       	andi	r24, 0x0F	; 15
    261e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	88 23       	and	r24, r24
    2626:	11 f0       	breq	.+4      	; 0x262c <HID_Device_USBTask+0x132>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2628:	80 93 f1 00 	sts	0x00F1, r24
    262c:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    262e:	7b 81       	ldd	r23, Y+3	; 0x03
    2630:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2632:	9a 2d       	mov	r25, r10
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	31 d9       	rcall	.-3486   	; 0x189c <Endpoint_Write_Stream_LE>
    263a:	80 91 e8 00 	lds	r24, 0x00E8
    263e:	8e 77       	andi	r24, 0x7E	; 126
    2640:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2644:	80 91 e4 00 	lds	r24, 0x00E4
    2648:	90 91 e5 00 	lds	r25, 0x00E5
    264c:	f7 01       	movw	r30, r14
    264e:	93 87       	std	Z+11, r25	; 0x0b
    2650:	82 87       	std	Z+10, r24	; 0x0a
    2652:	7d be       	out	0x3d, r7	; 61

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2654:	6e be       	out	0x3e, r6	; 62
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	5e be       	out	0x3e, r5	; 62
    265c:	0f be       	out	0x3f, r0	; 63
	}
}
    265e:	4d be       	out	0x3d, r4	; 61
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	9f 90       	pop	r9
    267c:	8f 90       	pop	r8
    267e:	7f 90       	pop	r7
    2680:	6f 90       	pop	r6
    2682:	5f 90       	pop	r5
    2684:	4f 90       	pop	r4
    2686:	08 95       	ret

00002688 <__divsf3>:
    2688:	0c d0       	rcall	.+24     	; 0x26a2 <__divsf3x>
    268a:	ae c0       	rjmp	.+348    	; 0x27e8 <__fp_round>
    268c:	a6 d0       	rcall	.+332    	; 0x27da <__fp_pscB>
    268e:	40 f0       	brcs	.+16     	; 0x26a0 <__divsf3+0x18>
    2690:	9d d0       	rcall	.+314    	; 0x27cc <__fp_pscA>
    2692:	30 f0       	brcs	.+12     	; 0x26a0 <__divsf3+0x18>
    2694:	21 f4       	brne	.+8      	; 0x269e <__divsf3+0x16>
    2696:	5f 3f       	cpi	r21, 0xFF	; 255
    2698:	19 f0       	breq	.+6      	; 0x26a0 <__divsf3+0x18>
    269a:	8f c0       	rjmp	.+286    	; 0x27ba <__fp_inf>
    269c:	51 11       	cpse	r21, r1
    269e:	d8 c0       	rjmp	.+432    	; 0x2850 <__fp_szero>
    26a0:	92 c0       	rjmp	.+292    	; 0x27c6 <__fp_nan>

000026a2 <__divsf3x>:
    26a2:	b3 d0       	rcall	.+358    	; 0x280a <__fp_split3>
    26a4:	98 f3       	brcs	.-26     	; 0x268c <__divsf3+0x4>

000026a6 <__divsf3_pse>:
    26a6:	99 23       	and	r25, r25
    26a8:	c9 f3       	breq	.-14     	; 0x269c <__divsf3+0x14>
    26aa:	55 23       	and	r21, r21
    26ac:	b1 f3       	breq	.-20     	; 0x269a <__divsf3+0x12>
    26ae:	95 1b       	sub	r25, r21
    26b0:	55 0b       	sbc	r21, r21
    26b2:	bb 27       	eor	r27, r27
    26b4:	aa 27       	eor	r26, r26
    26b6:	62 17       	cp	r22, r18
    26b8:	73 07       	cpc	r23, r19
    26ba:	84 07       	cpc	r24, r20
    26bc:	38 f0       	brcs	.+14     	; 0x26cc <__divsf3_pse+0x26>
    26be:	9f 5f       	subi	r25, 0xFF	; 255
    26c0:	5f 4f       	sbci	r21, 0xFF	; 255
    26c2:	22 0f       	add	r18, r18
    26c4:	33 1f       	adc	r19, r19
    26c6:	44 1f       	adc	r20, r20
    26c8:	aa 1f       	adc	r26, r26
    26ca:	a9 f3       	breq	.-22     	; 0x26b6 <__divsf3_pse+0x10>
    26cc:	33 d0       	rcall	.+102    	; 0x2734 <__divsf3_pse+0x8e>
    26ce:	0e 2e       	mov	r0, r30
    26d0:	3a f0       	brmi	.+14     	; 0x26e0 <__divsf3_pse+0x3a>
    26d2:	e0 e8       	ldi	r30, 0x80	; 128
    26d4:	30 d0       	rcall	.+96     	; 0x2736 <__divsf3_pse+0x90>
    26d6:	91 50       	subi	r25, 0x01	; 1
    26d8:	50 40       	sbci	r21, 0x00	; 0
    26da:	e6 95       	lsr	r30
    26dc:	00 1c       	adc	r0, r0
    26de:	ca f7       	brpl	.-14     	; 0x26d2 <__divsf3_pse+0x2c>
    26e0:	29 d0       	rcall	.+82     	; 0x2734 <__divsf3_pse+0x8e>
    26e2:	fe 2f       	mov	r31, r30
    26e4:	27 d0       	rcall	.+78     	; 0x2734 <__divsf3_pse+0x8e>
    26e6:	66 0f       	add	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	bb 1f       	adc	r27, r27
    26ee:	26 17       	cp	r18, r22
    26f0:	37 07       	cpc	r19, r23
    26f2:	48 07       	cpc	r20, r24
    26f4:	ab 07       	cpc	r26, r27
    26f6:	b0 e8       	ldi	r27, 0x80	; 128
    26f8:	09 f0       	breq	.+2      	; 0x26fc <__divsf3_pse+0x56>
    26fa:	bb 0b       	sbc	r27, r27
    26fc:	80 2d       	mov	r24, r0
    26fe:	bf 01       	movw	r22, r30
    2700:	ff 27       	eor	r31, r31
    2702:	93 58       	subi	r25, 0x83	; 131
    2704:	5f 4f       	sbci	r21, 0xFF	; 255
    2706:	2a f0       	brmi	.+10     	; 0x2712 <__divsf3_pse+0x6c>
    2708:	9e 3f       	cpi	r25, 0xFE	; 254
    270a:	51 05       	cpc	r21, r1
    270c:	68 f0       	brcs	.+26     	; 0x2728 <__divsf3_pse+0x82>
    270e:	55 c0       	rjmp	.+170    	; 0x27ba <__fp_inf>
    2710:	9f c0       	rjmp	.+318    	; 0x2850 <__fp_szero>
    2712:	5f 3f       	cpi	r21, 0xFF	; 255
    2714:	ec f3       	brlt	.-6      	; 0x2710 <__divsf3_pse+0x6a>
    2716:	98 3e       	cpi	r25, 0xE8	; 232
    2718:	dc f3       	brlt	.-10     	; 0x2710 <__divsf3_pse+0x6a>
    271a:	86 95       	lsr	r24
    271c:	77 95       	ror	r23
    271e:	67 95       	ror	r22
    2720:	b7 95       	ror	r27
    2722:	f7 95       	ror	r31
    2724:	9f 5f       	subi	r25, 0xFF	; 255
    2726:	c9 f7       	brne	.-14     	; 0x271a <__divsf3_pse+0x74>
    2728:	88 0f       	add	r24, r24
    272a:	91 1d       	adc	r25, r1
    272c:	96 95       	lsr	r25
    272e:	87 95       	ror	r24
    2730:	97 f9       	bld	r25, 7
    2732:	08 95       	ret
    2734:	e1 e0       	ldi	r30, 0x01	; 1
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	bb 1f       	adc	r27, r27
    273e:	62 17       	cp	r22, r18
    2740:	73 07       	cpc	r23, r19
    2742:	84 07       	cpc	r24, r20
    2744:	ba 07       	cpc	r27, r26
    2746:	20 f0       	brcs	.+8      	; 0x2750 <__divsf3_pse+0xaa>
    2748:	62 1b       	sub	r22, r18
    274a:	73 0b       	sbc	r23, r19
    274c:	84 0b       	sbc	r24, r20
    274e:	ba 0b       	sbc	r27, r26
    2750:	ee 1f       	adc	r30, r30
    2752:	88 f7       	brcc	.-30     	; 0x2736 <__divsf3_pse+0x90>
    2754:	e0 95       	com	r30
    2756:	08 95       	ret

00002758 <__fixsfsi>:
    2758:	04 d0       	rcall	.+8      	; 0x2762 <__fixunssfsi>
    275a:	68 94       	set
    275c:	b1 11       	cpse	r27, r1
    275e:	78 c0       	rjmp	.+240    	; 0x2850 <__fp_szero>
    2760:	08 95       	ret

00002762 <__fixunssfsi>:
    2762:	5b d0       	rcall	.+182    	; 0x281a <__fp_splitA>
    2764:	88 f0       	brcs	.+34     	; 0x2788 <__fixunssfsi+0x26>
    2766:	9f 57       	subi	r25, 0x7F	; 127
    2768:	90 f0       	brcs	.+36     	; 0x278e <__fixunssfsi+0x2c>
    276a:	b9 2f       	mov	r27, r25
    276c:	99 27       	eor	r25, r25
    276e:	b7 51       	subi	r27, 0x17	; 23
    2770:	a0 f0       	brcs	.+40     	; 0x279a <__fixunssfsi+0x38>
    2772:	d1 f0       	breq	.+52     	; 0x27a8 <__fixunssfsi+0x46>
    2774:	66 0f       	add	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	88 1f       	adc	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	1a f0       	brmi	.+6      	; 0x2784 <__fixunssfsi+0x22>
    277e:	ba 95       	dec	r27
    2780:	c9 f7       	brne	.-14     	; 0x2774 <__fixunssfsi+0x12>
    2782:	12 c0       	rjmp	.+36     	; 0x27a8 <__fixunssfsi+0x46>
    2784:	b1 30       	cpi	r27, 0x01	; 1
    2786:	81 f0       	breq	.+32     	; 0x27a8 <__fixunssfsi+0x46>
    2788:	62 d0       	rcall	.+196    	; 0x284e <__fp_zero>
    278a:	b1 e0       	ldi	r27, 0x01	; 1
    278c:	08 95       	ret
    278e:	5f c0       	rjmp	.+190    	; 0x284e <__fp_zero>
    2790:	67 2f       	mov	r22, r23
    2792:	78 2f       	mov	r23, r24
    2794:	88 27       	eor	r24, r24
    2796:	b8 5f       	subi	r27, 0xF8	; 248
    2798:	39 f0       	breq	.+14     	; 0x27a8 <__fixunssfsi+0x46>
    279a:	b9 3f       	cpi	r27, 0xF9	; 249
    279c:	cc f3       	brlt	.-14     	; 0x2790 <__fixunssfsi+0x2e>
    279e:	86 95       	lsr	r24
    27a0:	77 95       	ror	r23
    27a2:	67 95       	ror	r22
    27a4:	b3 95       	inc	r27
    27a6:	d9 f7       	brne	.-10     	; 0x279e <__fixunssfsi+0x3c>
    27a8:	3e f4       	brtc	.+14     	; 0x27b8 <__fixunssfsi+0x56>
    27aa:	90 95       	com	r25
    27ac:	80 95       	com	r24
    27ae:	70 95       	com	r23
    27b0:	61 95       	neg	r22
    27b2:	7f 4f       	sbci	r23, 0xFF	; 255
    27b4:	8f 4f       	sbci	r24, 0xFF	; 255
    27b6:	9f 4f       	sbci	r25, 0xFF	; 255
    27b8:	08 95       	ret

000027ba <__fp_inf>:
    27ba:	97 f9       	bld	r25, 7
    27bc:	9f 67       	ori	r25, 0x7F	; 127
    27be:	80 e8       	ldi	r24, 0x80	; 128
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	08 95       	ret

000027c6 <__fp_nan>:
    27c6:	9f ef       	ldi	r25, 0xFF	; 255
    27c8:	80 ec       	ldi	r24, 0xC0	; 192
    27ca:	08 95       	ret

000027cc <__fp_pscA>:
    27cc:	00 24       	eor	r0, r0
    27ce:	0a 94       	dec	r0
    27d0:	16 16       	cp	r1, r22
    27d2:	17 06       	cpc	r1, r23
    27d4:	18 06       	cpc	r1, r24
    27d6:	09 06       	cpc	r0, r25
    27d8:	08 95       	ret

000027da <__fp_pscB>:
    27da:	00 24       	eor	r0, r0
    27dc:	0a 94       	dec	r0
    27de:	12 16       	cp	r1, r18
    27e0:	13 06       	cpc	r1, r19
    27e2:	14 06       	cpc	r1, r20
    27e4:	05 06       	cpc	r0, r21
    27e6:	08 95       	ret

000027e8 <__fp_round>:
    27e8:	09 2e       	mov	r0, r25
    27ea:	03 94       	inc	r0
    27ec:	00 0c       	add	r0, r0
    27ee:	11 f4       	brne	.+4      	; 0x27f4 <__fp_round+0xc>
    27f0:	88 23       	and	r24, r24
    27f2:	52 f0       	brmi	.+20     	; 0x2808 <__fp_round+0x20>
    27f4:	bb 0f       	add	r27, r27
    27f6:	40 f4       	brcc	.+16     	; 0x2808 <__fp_round+0x20>
    27f8:	bf 2b       	or	r27, r31
    27fa:	11 f4       	brne	.+4      	; 0x2800 <__fp_round+0x18>
    27fc:	60 ff       	sbrs	r22, 0
    27fe:	04 c0       	rjmp	.+8      	; 0x2808 <__fp_round+0x20>
    2800:	6f 5f       	subi	r22, 0xFF	; 255
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	8f 4f       	sbci	r24, 0xFF	; 255
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	08 95       	ret

0000280a <__fp_split3>:
    280a:	57 fd       	sbrc	r21, 7
    280c:	90 58       	subi	r25, 0x80	; 128
    280e:	44 0f       	add	r20, r20
    2810:	55 1f       	adc	r21, r21
    2812:	59 f0       	breq	.+22     	; 0x282a <__fp_splitA+0x10>
    2814:	5f 3f       	cpi	r21, 0xFF	; 255
    2816:	71 f0       	breq	.+28     	; 0x2834 <__fp_splitA+0x1a>
    2818:	47 95       	ror	r20

0000281a <__fp_splitA>:
    281a:	88 0f       	add	r24, r24
    281c:	97 fb       	bst	r25, 7
    281e:	99 1f       	adc	r25, r25
    2820:	61 f0       	breq	.+24     	; 0x283a <__fp_splitA+0x20>
    2822:	9f 3f       	cpi	r25, 0xFF	; 255
    2824:	79 f0       	breq	.+30     	; 0x2844 <__fp_splitA+0x2a>
    2826:	87 95       	ror	r24
    2828:	08 95       	ret
    282a:	12 16       	cp	r1, r18
    282c:	13 06       	cpc	r1, r19
    282e:	14 06       	cpc	r1, r20
    2830:	55 1f       	adc	r21, r21
    2832:	f2 cf       	rjmp	.-28     	; 0x2818 <__fp_split3+0xe>
    2834:	46 95       	lsr	r20
    2836:	f1 df       	rcall	.-30     	; 0x281a <__fp_splitA>
    2838:	08 c0       	rjmp	.+16     	; 0x284a <__fp_splitA+0x30>
    283a:	16 16       	cp	r1, r22
    283c:	17 06       	cpc	r1, r23
    283e:	18 06       	cpc	r1, r24
    2840:	99 1f       	adc	r25, r25
    2842:	f1 cf       	rjmp	.-30     	; 0x2826 <__fp_splitA+0xc>
    2844:	86 95       	lsr	r24
    2846:	71 05       	cpc	r23, r1
    2848:	61 05       	cpc	r22, r1
    284a:	08 94       	sec
    284c:	08 95       	ret

0000284e <__fp_zero>:
    284e:	e8 94       	clt

00002850 <__fp_szero>:
    2850:	bb 27       	eor	r27, r27
    2852:	66 27       	eor	r22, r22
    2854:	77 27       	eor	r23, r23
    2856:	cb 01       	movw	r24, r22
    2858:	97 f9       	bld	r25, 7
    285a:	08 95       	ret

0000285c <__mulsf3>:
    285c:	0b d0       	rcall	.+22     	; 0x2874 <__mulsf3x>
    285e:	c4 cf       	rjmp	.-120    	; 0x27e8 <__fp_round>
    2860:	b5 df       	rcall	.-150    	; 0x27cc <__fp_pscA>
    2862:	28 f0       	brcs	.+10     	; 0x286e <__mulsf3+0x12>
    2864:	ba df       	rcall	.-140    	; 0x27da <__fp_pscB>
    2866:	18 f0       	brcs	.+6      	; 0x286e <__mulsf3+0x12>
    2868:	95 23       	and	r25, r21
    286a:	09 f0       	breq	.+2      	; 0x286e <__mulsf3+0x12>
    286c:	a6 cf       	rjmp	.-180    	; 0x27ba <__fp_inf>
    286e:	ab cf       	rjmp	.-170    	; 0x27c6 <__fp_nan>
    2870:	11 24       	eor	r1, r1
    2872:	ee cf       	rjmp	.-36     	; 0x2850 <__fp_szero>

00002874 <__mulsf3x>:
    2874:	ca df       	rcall	.-108    	; 0x280a <__fp_split3>
    2876:	a0 f3       	brcs	.-24     	; 0x2860 <__mulsf3+0x4>

00002878 <__mulsf3_pse>:
    2878:	95 9f       	mul	r25, r21
    287a:	d1 f3       	breq	.-12     	; 0x2870 <__mulsf3+0x14>
    287c:	95 0f       	add	r25, r21
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	55 1f       	adc	r21, r21
    2882:	62 9f       	mul	r22, r18
    2884:	f0 01       	movw	r30, r0
    2886:	72 9f       	mul	r23, r18
    2888:	bb 27       	eor	r27, r27
    288a:	f0 0d       	add	r31, r0
    288c:	b1 1d       	adc	r27, r1
    288e:	63 9f       	mul	r22, r19
    2890:	aa 27       	eor	r26, r26
    2892:	f0 0d       	add	r31, r0
    2894:	b1 1d       	adc	r27, r1
    2896:	aa 1f       	adc	r26, r26
    2898:	64 9f       	mul	r22, r20
    289a:	66 27       	eor	r22, r22
    289c:	b0 0d       	add	r27, r0
    289e:	a1 1d       	adc	r26, r1
    28a0:	66 1f       	adc	r22, r22
    28a2:	82 9f       	mul	r24, r18
    28a4:	22 27       	eor	r18, r18
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	62 1f       	adc	r22, r18
    28ac:	73 9f       	mul	r23, r19
    28ae:	b0 0d       	add	r27, r0
    28b0:	a1 1d       	adc	r26, r1
    28b2:	62 1f       	adc	r22, r18
    28b4:	83 9f       	mul	r24, r19
    28b6:	a0 0d       	add	r26, r0
    28b8:	61 1d       	adc	r22, r1
    28ba:	22 1f       	adc	r18, r18
    28bc:	74 9f       	mul	r23, r20
    28be:	33 27       	eor	r19, r19
    28c0:	a0 0d       	add	r26, r0
    28c2:	61 1d       	adc	r22, r1
    28c4:	23 1f       	adc	r18, r19
    28c6:	84 9f       	mul	r24, r20
    28c8:	60 0d       	add	r22, r0
    28ca:	21 1d       	adc	r18, r1
    28cc:	82 2f       	mov	r24, r18
    28ce:	76 2f       	mov	r23, r22
    28d0:	6a 2f       	mov	r22, r26
    28d2:	11 24       	eor	r1, r1
    28d4:	9f 57       	subi	r25, 0x7F	; 127
    28d6:	50 40       	sbci	r21, 0x00	; 0
    28d8:	8a f0       	brmi	.+34     	; 0x28fc <__mulsf3_pse+0x84>
    28da:	e1 f0       	breq	.+56     	; 0x2914 <__mulsf3_pse+0x9c>
    28dc:	88 23       	and	r24, r24
    28de:	4a f0       	brmi	.+18     	; 0x28f2 <__mulsf3_pse+0x7a>
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	bb 1f       	adc	r27, r27
    28e6:	66 1f       	adc	r22, r22
    28e8:	77 1f       	adc	r23, r23
    28ea:	88 1f       	adc	r24, r24
    28ec:	91 50       	subi	r25, 0x01	; 1
    28ee:	50 40       	sbci	r21, 0x00	; 0
    28f0:	a9 f7       	brne	.-22     	; 0x28dc <__mulsf3_pse+0x64>
    28f2:	9e 3f       	cpi	r25, 0xFE	; 254
    28f4:	51 05       	cpc	r21, r1
    28f6:	70 f0       	brcs	.+28     	; 0x2914 <__mulsf3_pse+0x9c>
    28f8:	60 cf       	rjmp	.-320    	; 0x27ba <__fp_inf>
    28fa:	aa cf       	rjmp	.-172    	; 0x2850 <__fp_szero>
    28fc:	5f 3f       	cpi	r21, 0xFF	; 255
    28fe:	ec f3       	brlt	.-6      	; 0x28fa <__mulsf3_pse+0x82>
    2900:	98 3e       	cpi	r25, 0xE8	; 232
    2902:	dc f3       	brlt	.-10     	; 0x28fa <__mulsf3_pse+0x82>
    2904:	86 95       	lsr	r24
    2906:	77 95       	ror	r23
    2908:	67 95       	ror	r22
    290a:	b7 95       	ror	r27
    290c:	f7 95       	ror	r31
    290e:	e7 95       	ror	r30
    2910:	9f 5f       	subi	r25, 0xFF	; 255
    2912:	c1 f7       	brne	.-16     	; 0x2904 <__mulsf3_pse+0x8c>
    2914:	fe 2b       	or	r31, r30
    2916:	88 0f       	add	r24, r24
    2918:	91 1d       	adc	r25, r1
    291a:	96 95       	lsr	r25
    291c:	87 95       	ror	r24
    291e:	97 f9       	bld	r25, 7
    2920:	08 95       	ret

00002922 <__udivmodhi4>:
    2922:	aa 1b       	sub	r26, r26
    2924:	bb 1b       	sub	r27, r27
    2926:	51 e1       	ldi	r21, 0x11	; 17
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <__udivmodhi4_ep>

0000292a <__udivmodhi4_loop>:
    292a:	aa 1f       	adc	r26, r26
    292c:	bb 1f       	adc	r27, r27
    292e:	a6 17       	cp	r26, r22
    2930:	b7 07       	cpc	r27, r23
    2932:	10 f0       	brcs	.+4      	; 0x2938 <__udivmodhi4_ep>
    2934:	a6 1b       	sub	r26, r22
    2936:	b7 0b       	sbc	r27, r23

00002938 <__udivmodhi4_ep>:
    2938:	88 1f       	adc	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	5a 95       	dec	r21
    293e:	a9 f7       	brne	.-22     	; 0x292a <__udivmodhi4_loop>
    2940:	80 95       	com	r24
    2942:	90 95       	com	r25
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	08 95       	ret

0000294a <memcmp>:
    294a:	fb 01       	movw	r30, r22
    294c:	dc 01       	movw	r26, r24
    294e:	04 c0       	rjmp	.+8      	; 0x2958 <memcmp+0xe>
    2950:	8d 91       	ld	r24, X+
    2952:	01 90       	ld	r0, Z+
    2954:	80 19       	sub	r24, r0
    2956:	21 f4       	brne	.+8      	; 0x2960 <memcmp+0x16>
    2958:	41 50       	subi	r20, 0x01	; 1
    295a:	50 40       	sbci	r21, 0x00	; 0
    295c:	c8 f7       	brcc	.-14     	; 0x2950 <memcmp+0x6>
    295e:	88 1b       	sub	r24, r24
    2960:	99 0b       	sbc	r25, r25
    2962:	08 95       	ret

00002964 <memcpy>:
    2964:	fb 01       	movw	r30, r22
    2966:	dc 01       	movw	r26, r24
    2968:	02 c0       	rjmp	.+4      	; 0x296e <memcpy+0xa>
    296a:	01 90       	ld	r0, Z+
    296c:	0d 92       	st	X+, r0
    296e:	41 50       	subi	r20, 0x01	; 1
    2970:	50 40       	sbci	r21, 0x00	; 0
    2972:	d8 f7       	brcc	.-10     	; 0x296a <memcpy+0x6>
    2974:	08 95       	ret

00002976 <memset>:
    2976:	dc 01       	movw	r26, r24
    2978:	01 c0       	rjmp	.+2      	; 0x297c <memset+0x6>
    297a:	6d 93       	st	X+, r22
    297c:	41 50       	subi	r20, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	e0 f7       	brcc	.-8      	; 0x297a <memset+0x4>
    2982:	08 95       	ret

00002984 <_exit>:
    2984:	f8 94       	cli

00002986 <__stop_program>:
    2986:	ff cf       	rjmp	.-2      	; 0x2986 <__stop_program>
